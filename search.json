[{"title":"Vue 筆記 - 動態產生多筆資料於網頁上 v-for、v-if","url":"/vue-js-Note/20200421/2762058618/","content":"<p><img src=\"https://firebasestorage.googleapis.com/v0/b/timpicturespace.appspot.com/o/vue%20cover.png?alt=media&token=5f8b5aa0-eb3e-4d21-a715-07c5442dafbc\" alt=\"vue.js\"></p>\n<p><code>data</code> 中除了之前所放入的屬性與資料內容外，也可以放入 JSON 的資料結構。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> vm = <span class=\"keyword\">new</span> Vue(&#123;</span><br><span class=\"line\">  el: <span class=\"string\">\"#app\"</span>,</span><br><span class=\"line\">  data: &#123;</span><br><span class=\"line\">    list: [</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        name: <span class=\"string\">\"Min\"</span>,</span><br><span class=\"line\">        age: <span class=\"number\">56</span>,</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        name: <span class=\"string\">\"Tim\"</span>,</span><br><span class=\"line\">        age: <span class=\"number\">55</span>,</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        name: <span class=\"string\">\"Joshua\"</span>,</span><br><span class=\"line\">        age: <span class=\"number\">20</span>,</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">    ],</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"v-for\"><a href=\"#v-for\" class=\"headerlink\" title=\"v-for\"></a>v-for</h2><p>這次要透過列表的方式將 JSON 資料呈現在網頁上，傳統 jQuery 可能要寫很多的 <code>li</code> 才能實現此畫面，透過 Vue 只要寫這樣：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">v-for</span>=<span class=\"string\">\"item in list\"</span>&gt;</span>&#123;&#123;item.name&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>說明：<br>透過 <code>v-for</code> 指令 ( 同等於 JS 的 for 迴圈篩選資料 ) 來取得資料，item 為自訂義的資料名稱，也就是指的是 <code>data</code> 中每一筆的物件資料，list 指的就是 JSON 本身，白話文可以解釋成：透過 <code>v-for</code> 從 list 篩選出每一筆的 item 資料內容，大括號指的是資料中的屬性。</p>\n<h3 id=\"加入索引-index\"><a href=\"#加入索引-index\" class=\"headerlink\" title=\"加入索引 index\"></a>加入索引 index</h3><p>如果要加入索引，可以這樣寫：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">v-for</span>=<span class=\"string\">\"(item, index) in list\"</span> <span class=\"attr\">:key</span>=<span class=\"string\">\"index\"</span>&gt;</span></span><br><span class=\"line\">    &#123;&#123; index +1 &#125;&#125; - &#123;&#123; item.name &#125;&#125; 是 &#123;&#123;item.age&#125;&#125; 歲</span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>要記得索引是從 0 開始，如果要讓使用者從 1 開始，要設定成 <code>index +1</code>。</p>\n<p><a href=\"https://codepen.io/hnzxewqw/pen/PoPzNma\" target=\"_blank\" rel=\"noopener\">CodePen:</a></p>\n<blockquote>\n<p>其實現在編輯器相當人性，只要在 <code>li</code> 輸入 <code>v-for</code>，按下 tab，就會跳出預設的格式，再修改成自己要的對應名稱即可。</p>\n</blockquote>\n<h2 id=\"v-if\"><a href=\"#v-if\" class=\"headerlink\" title=\"v-if\"></a>v-if</h2><p>簡單來說就是在 HTML 標籤中加入判斷式，以上方例子為例，倘若今天要判斷年紀超過 20 歲的人物顯示在網頁上。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">v-for</span>=<span class=\"string\">\"(item, index) in list\"</span> <span class=\"attr\">:key</span>=<span class=\"string\">\"index\"</span> <span class=\"attr\">v-if</span>=<span class=\"string\">\"item.age &gt; 20\"</span>&gt;</span></span><br><span class=\"line\">    &#123;&#123; index +1 &#125;&#125; - &#123;&#123; item.name &#125;&#125; 是 &#123;&#123;item.age&#125;&#125; 歲</span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"補充觀念\"><a href=\"#補充觀念\" class=\"headerlink\" title=\"補充觀念\"></a>補充觀念</h3><p>官網不推薦同時使用 <code>v-if</code> 和 <code>v-for</code>，原因是 <code>v-for</code> 的權重比較高。可看官網的<a href=\"https://cn.vuejs.org/v2/style-guide/#%E9%81%BF%E5%85%8D-v-if-%E5%92%8C-v-for-%E7%94%A8%E5%9C%A8%E4%B8%80%E8%B5%B7%E5%BF%85%E8%A6%81\" target=\"_blank\" rel=\"noopener\">指令說明</a>與<a href=\"https://cn.vuejs.org/v2/guide/list.html#v-for-object\" target=\"_blank\" rel=\"noopener\">渲染列表說明</a>，通常 <code>v-if</code> 會與 <code>v-show</code> 一起使用，這後面會提到。</p>\n<h3 id=\"v-for-列表渲染\"><a href=\"#v-for-列表渲染\" class=\"headerlink\" title=\"v-for 列表渲染\"></a>v-for 列表渲染</h3><p>在 <code>li</code> 建立 <code>v-for</code> 指令，讓 <code>li</code> 產生多個清單，再透過雙向綁定的方法，使得 HTML 的程式碼很乾淨。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">ul</span> <span class=\"attr\">id</span>=<span class=\"string\">\"ex1\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">v-for</span>=<span class=\"string\">\"item in List\"</span>&gt;</span></span><br><span class=\"line\">    &#123;&#123;item.msg&#125;&#125;</span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p><code>item</code> 為 <code>List</code> 中的清單資料，並且透過 <code>data</code> 中的 <code>List</code> 資料內容，同步到頁面上，這個列表不管是 HTML 或是資料的程式碼都乾淨且不會搞混。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> vm = <span class=\"keyword\">new</span> Vue(&#123;</span><br><span class=\"line\">  el: <span class=\"string\">\"#ex1\"</span>,</span><br><span class=\"line\">  data: &#123;</span><br><span class=\"line\">    List: [</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        msg: <span class=\"string\">\"Good\"</span>,</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        msg: <span class=\"string\">\"Wonderful\"</span>,</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">    ],</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>Codepen <a href=\"https://codepen.io/hnzxewqw/pen/xxwRVaZ\" target=\"_blank\" rel=\"noopener\">https://codepen.io/hnzxewqw/pen/xxwRVaZ</a></p>\n<p>實際範例：今日要查找公司的銷售員名單，並且有編號在前。</p>\n<p>HTML</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"app\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">v-for</span>=<span class=\"string\">\"(s, index) in sales\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">h3</span>&gt;</span>&#123;&#123; index &#125;&#125; &#123;&#123; s.name &#125;&#125;: <span class=\"tag\">&lt;/<span class=\"name\">h3</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>age: &#123;&#123; s.age &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>company: &#123;&#123; s.company &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>email: &#123;&#123; s.email &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>JavaScript</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> vm = <span class=\"keyword\">new</span> Vue(&#123;</span><br><span class=\"line\">  el: <span class=\"string\">\"#app\"</span>,</span><br><span class=\"line\">  data: &#123;</span><br><span class=\"line\">    sales: [</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        age: <span class=\"number\">26</span>,</span><br><span class=\"line\">        name: <span class=\"string\">\"Sarah Zamora\"</span>,</span><br><span class=\"line\">        company: <span class=\"string\">\"ZINCA\"</span>,</span><br><span class=\"line\">        email: <span class=\"string\">\"sarah_zamora@zinca.ca\"</span>,</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        age: <span class=\"number\">37</span>,</span><br><span class=\"line\">        name: <span class=\"string\">\"Cameron Wilder\"</span>,</span><br><span class=\"line\">        company: <span class=\"string\">\"NIKUDA\"</span>,</span><br><span class=\"line\">        email: <span class=\"string\">\"cameron_wilder@nikuda.biz\"</span>,</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        age: <span class=\"number\">40</span>,</span><br><span class=\"line\">        name: <span class=\"string\">\"Roach Hubbard\"</span>,</span><br><span class=\"line\">        company: <span class=\"string\">\"EMOLTRA\"</span>,</span><br><span class=\"line\">        email: <span class=\"string\">\"roach_hubbard@emoltra.me\"</span>,</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        age: <span class=\"number\">38</span>,</span><br><span class=\"line\">        name: <span class=\"string\">\"Juliet Sykes\"</span>,</span><br><span class=\"line\">        company: <span class=\"string\">\"PROWASTE\"</span>,</span><br><span class=\"line\">        email: <span class=\"string\">\"juliet_sykes@prowaste.org\"</span>,</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        age: <span class=\"number\">21</span>,</span><br><span class=\"line\">        name: <span class=\"string\">\"Jerri Jimenez\"</span>,</span><br><span class=\"line\">        company: <span class=\"string\">\"ACCUPHARM\"</span>,</span><br><span class=\"line\">        email: <span class=\"string\">\"jerri_jimenez@accupharm.tv\"</span>,</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">    ],</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>Codepen <a href=\"https://codepen.io/hnzxewqw/pen/VwvmjKy\" target=\"_blank\" rel=\"noopener\">https://codepen.io/hnzxewqw/pen/VwvmjKy</a></p>\n<p>或是做有分頁的選單也很不錯，</p>\n<p>HTML</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"app\"</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">class</span>=<span class=\"string\">\"pager\"</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"#\"</span>&gt;</span> <span class=\"symbol\">&amp;lt;</span> <span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">class</span>=<span class=\"string\">\"pager\"</span> <span class=\"attr\">v-for</span>=<span class=\"string\">\"n in 10\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"comment\">&lt;!-- n 從 1 開始計算 --&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"#\"</span>&gt;</span>&#123;&#123; n  &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">class</span>=<span class=\"string\">\"pager\"</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"#\"</span>&gt;</span> <span class=\"symbol\">&amp;gt;</span> <span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>Codepen <a href=\"https://codepen.io/hnzxewqw/pen/yLYVJEO\" target=\"_blank\" rel=\"noopener\">https://codepen.io/hnzxewqw/pen/yLYVJEO</a></p>\n<blockquote>\n<p>雖然 vue 裡面沒有寫東西，但因為要套用指令效果，所以在 <code>script</code> 中還是要寫入 vue。</p>\n</blockquote>\n<h3 id=\"v-for-key\"><a href=\"#v-for-key\" class=\"headerlink\" title=\"v-for + key\"></a>v-for + key</h3><p>加上 key 是考量到效能，在預設狀況下，Vue.js 會盡量重複使用已經渲染好的元素，若不設定 key，不會重新渲染，只會部分更新。故當元素更新時 ( 例如:改變順序 ) 有可識別唯一性的 key <strong>可以確保列表有重新渲染</strong>。</p>\n<p>HTML</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"app\"</span>&gt;</span></span><br><span class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>filtered by age less then 40: <span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\">     <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">v-for</span>=<span class=\"string\">\"(s, index) in filteredSales\"</span> <span class=\"attr\">:key</span>=<span class=\"string\">\"s.name\"</span>&gt;</span></span><br><span class=\"line\">       <span class=\"tag\">&lt;<span class=\"name\">h3</span>&gt;</span>&#123;&#123; index &#125;&#125; &#123;&#123; s.name &#125;&#125;: <span class=\"tag\">&lt;/<span class=\"name\">h3</span>&gt;</span></span><br><span class=\"line\">       <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>age: &#123;&#123; s.age &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">       <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>company: &#123;&#123; s.company &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">       <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>email: &#123;&#123; s.email &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">     <span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">   <span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>JavaScript</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> vm = <span class=\"keyword\">new</span> Vue(&#123;</span><br><span class=\"line\">  el: <span class=\"string\">\"#app\"</span>,</span><br><span class=\"line\">  computed: &#123;</span><br><span class=\"line\">    filteredSales() &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.sales.filter(<span class=\"function\">(<span class=\"params\">d</span>) =&gt;</span> d.age &lt; <span class=\"number\">40</span>);</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  data: &#123;</span><br><span class=\"line\">    search: <span class=\"string\">\"\"</span>,</span><br><span class=\"line\">    sales: [</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        age: <span class=\"number\">26</span>,</span><br><span class=\"line\">        name: <span class=\"string\">\"Sarah Zamora\"</span>,</span><br><span class=\"line\">        company: <span class=\"string\">\"ZINCA\"</span>,</span><br><span class=\"line\">        email: <span class=\"string\">\"sarah_zamora@zinca.ca\"</span>,</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        age: <span class=\"number\">37</span>,</span><br><span class=\"line\">        name: <span class=\"string\">\"Cameron Wilder\"</span>,</span><br><span class=\"line\">        company: <span class=\"string\">\"NIKUDA\"</span>,</span><br><span class=\"line\">        email: <span class=\"string\">\"cameron_wilder@nikuda.biz\"</span>,</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        age: <span class=\"number\">40</span>,</span><br><span class=\"line\">        name: <span class=\"string\">\"Roach Hubbard\"</span>,</span><br><span class=\"line\">        company: <span class=\"string\">\"EMOLTRA\"</span>,</span><br><span class=\"line\">        email: <span class=\"string\">\"roach_hubbard@emoltra.me\"</span>,</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        age: <span class=\"number\">38</span>,</span><br><span class=\"line\">        name: <span class=\"string\">\"Juliet Sykes\"</span>,</span><br><span class=\"line\">        company: <span class=\"string\">\"PROWASTE\"</span>,</span><br><span class=\"line\">        email: <span class=\"string\">\"juliet_sykes@prowaste.org\"</span>,</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        age: <span class=\"number\">21</span>,</span><br><span class=\"line\">        name: <span class=\"string\">\"Jerri Jimenez\"</span>,</span><br><span class=\"line\">        company: <span class=\"string\">\"ACCUPHARM\"</span>,</span><br><span class=\"line\">        email: <span class=\"string\">\"jerri_jimenez@accupharm.tv\"</span>,</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">    ],</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"v-if-v-else-amp-v-show\"><a href=\"#v-if-v-else-amp-v-show\" class=\"headerlink\" title=\"v-if / v-else &amp; v-show\"></a>v-if / v-else &amp; v-show</h2><p>大部分 <code>v-if</code> 跟 <code>v-show</code> 會拿來一起使用或比較，兩者最大的差別是在對 DOM 元素的操作。</p>\n<h3 id=\"v-if-1\"><a href=\"#v-if-1\" class=\"headerlink\" title=\"v-if\"></a>v-if</h3><p>會依照條件決定<strong>是否將元件渲染在網頁上</strong>，並決定事件與資料的監聽是否要綁定至元件或直接銷毀元件。</p>\n<p>透過 <code>v-if</code> 加入判斷，倘若條件相符，就顯示於網頁上。</p>\n<p>HTML</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"app\"</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">h1</span> <span class=\"attr\">v-if</span>=<span class=\"string\">\"option1\"</span>&gt;</span>Yes<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">hr</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">h1</span> <span class=\"attr\">v-if</span>=<span class=\"string\">\"option2\"</span>&gt;</span>Yes<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">h1</span> <span class=\"attr\">v-else</span>&gt;</span>No<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>JavaScript</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> vm = <span class=\"keyword\">new</span> Vue(&#123;</span><br><span class=\"line\">  el: <span class=\"string\">\"#app\"</span>,</span><br><span class=\"line\">  data: &#123;</span><br><span class=\"line\">    cond1: <span class=\"number\">1</span> &gt; <span class=\"number\">0</span>,</span><br><span class=\"line\">    cond2: <span class=\"literal\">false</span>,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>Codepen <a href=\"https://codepen.io/hnzxewqw/pen/gOaLwpV\" target=\"_blank\" rel=\"noopener\">https://codepen.io/hnzxewqw/pen/gOaLwpV</a></p>\n<h3 id=\"v-show\"><a href=\"#v-show\" class=\"headerlink\" title=\"v-show\"></a>v-show</h3><p>則是<strong>一定會產出元件</strong>，但以條件來切換 CSS <code>(display:block / none)</code> 的顯示與否。若條件更動頻繁，則適合用此方法。</p>\n<p>HTML</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"app\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">h1</span> <span class=\"attr\">v-if</span>=<span class=\"string\">\"cond1\"</span>&gt;</span>Yes<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">h1</span> <span class=\"attr\">v-else</span>&gt;</span>No<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">hr</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">h1</span> <span class=\"attr\">v-show</span>=<span class=\"string\">\"cond2\"</span>&gt;</span>Yes<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">h1</span> <span class=\"attr\">v-show</span>=<span class=\"string\">\"!cond2\"</span>&gt;</span>No<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>JavaScript</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> vm = <span class=\"keyword\">new</span> Vue(&#123;</span><br><span class=\"line\">  el: <span class=\"string\">\"#app\"</span>,</span><br><span class=\"line\">  data: &#123;</span><br><span class=\"line\">    cond1: <span class=\"literal\">false</span>,</span><br><span class=\"line\">    cond2: <span class=\"literal\">true</span>,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>Codepen <a href=\"https://codepen.io/hnzxewqw/pen/abvBmNG\" target=\"_blank\" rel=\"noopener\">https://codepen.io/hnzxewqw/pen/abvBmNG</a></p>\n","categories":["vue.js Note"],"tags":["vue.js"]},{"title":"ASP.NET MVC 筆記 - 認識 MVC 與建立第一個 ASP.NET MVC","url":"/ASP-NET-MVC-Note/20200421/3396145742/","content":"<p><img src=\"https://www.webpromedya.com/wp-content/uploads/2018/08/asp-net.jpg\" alt=\"image alt\"></p>\n<h2 id=\"什麼是-MVC\"><a href=\"#什麼是-MVC\" class=\"headerlink\" title=\"什麼是 MVC\"></a>什麼是 MVC</h2><p>MVC 模式（Model–view–controller）是軟體工程中的一種軟體架構模式，把軟體系統分為三個基本部分：模型（Model）、視圖（View）和控制器（Controller）。不是新技術，而是開發網頁的一種觀念，著重在關注點分離。</p>\n<p>目的是實現一種動態的程式設計，使後續對程式的修改和擴充簡化，並且使程式某一部分的重複利用成為可能。除此之外，此模式透過對複雜度的簡化，使程式結構更加直覺。軟體系統透過對自身基本部分分離的同時也賦予了各個基本部分應有的功能。專業人員可以依據自身的專長分組：</p>\n<ul>\n<li><strong>控制器（Controller）</strong>- 負責轉發請求，對請求進行處理。</li>\n<li><strong>視圖（View）</strong> - 介面設計人員進行圖形介面設計。</li>\n<li><strong>模型（Model）</strong>- 程式設計師編寫程式應有的功能（實現演算法等等）、資料庫專家進行資料管理和資料庫設計(可以實現具體的功能)。</li>\n</ul>\n<h2 id=\"建立-ASP-NET-MVC\"><a href=\"#建立-ASP-NET-MVC\" class=\"headerlink\" title=\"建立 ASP.NET MVC\"></a>建立 ASP.NET MVC</h2><p>ASP.NET 是微軟開發的網頁套件，並搭配 visual studio 2019 編輯器來使用，新手建議環境直接使用 windows，畢竟這整套都是微軟開發的。</p>\n<p>這邊就不介紹編輯器的使用，若有興趣可以看<a href=\"https://visualstudio.microsoft.com/zh-hant/vs/getting-started/\" target=\"_blank\" rel=\"noopener\">官網有教學</a>，下面直接進入 ASP.NET 來建立一個基本的網站。</p>\n<h3 id=\"建立新專案\"><a href=\"#建立新專案\" class=\"headerlink\" title=\"建立新專案\"></a>建立新專案</h3><p>首先開啟 visual studio 2019，選擇「建立新專案」:</p>\n<p><img src=\"https://ithelp.ithome.com.tw/upload/images/20190902/20120055S4ugLPlmyF.png\" alt=\"建立新專案\"></p>\n<h3 id=\"選擇專案類型\"><a href=\"#選擇專案類型\" class=\"headerlink\" title=\"選擇專案類型\"></a>選擇專案類型</h3><p>選擇後會看到很多專案類型可以選，因公司專案是使用 C#，故語言類選擇 C#，平台是 windows，專案類型選擇「ASP.NET Web 應用程式 (.NET Framework)」，</p>\n<p><img src=\"https://i.imgur.com/a2wREqp.png\" alt=\"選擇專案類型\"></p>\n<h3 id=\"設定專案名稱\"><a href=\"#設定專案名稱\" class=\"headerlink\" title=\"設定專案名稱\"></a>設定專案名稱</h3><p>檔案名稱就打容易記得的，沒有特別想法可以使用預設的名稱，儲存位置與架構若沒特別需要可以使用預設值。</p>\n<p><img src=\"https://i.imgur.com/n435d8x.png\" alt=\"設定專案名稱\"></p>\n<h3 id=\"挑選使用的框架\"><a href=\"#挑選使用的框架\" class=\"headerlink\" title=\"挑選使用的框架\"></a>挑選使用的框架</h3><p>選擇 MVC 專案，然後就會開始建立!</p>\n<p><img src=\"https://i.imgur.com/LijOuUm.png\" alt=\"MVC\"></p>\n<h3 id=\"建立完成\"><a href=\"#建立完成\" class=\"headerlink\" title=\"建立完成\"></a>建立完成</h3><p>跑完之後會看到右側有很多的資料夾，並當中會看到 Model、Controller、View 三個主要的資料夾，其餘資料夾都是放套件或是存放資料用。</p>\n<p><img src=\"https://i.imgur.com/nrLNkl5.png\" alt=\"資料夾\"></p>\n<h4 id=\"Controller-控制器在哪\"><a href=\"#Controller-控制器在哪\" class=\"headerlink\" title=\"Controller 控制器在哪?\"></a>Controller 控制器在哪?</h4><p>它位於在 Controller 資料夾內，專案建立時會預設建立 HomeController.cs，稱為 Home 控制器，其中定義了 <code>Index()</code>、<code>About()</code>、<code>Contact()</code> 三個 Action Methods (動作方法)。</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">using</span> System;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System.Collections.Generic;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System.Linq;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System.Web;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System.Web.Mvc;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">namespace</span> <span class=\"title\">chartTest.Controllers</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">HomeController</span> : <span class=\"title\">Controller</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> ActionResult <span class=\"title\">Index</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> View();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> ActionResult <span class=\"title\">About</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>        &#123;</span><br><span class=\"line\">            ViewBag.Message = <span class=\"string\">\"Your application description page.\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">return</span> View();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> ActionResult <span class=\"title\">Contact</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>        &#123;</span><br><span class=\"line\">            ViewBag.Message = <span class=\"string\">\"Your contact page.\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">return</span> View();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Model-在哪\"><a href=\"#Model-在哪\" class=\"headerlink\" title=\"Model 在哪?\"></a>Model 在哪?</h4><p>位於 Model 資料夾中，目前為空，因尚未建立任何資料，類別會定義 Properties 屬性，用來存放資料。</p>\n<h4 id=\"View-在哪\"><a href=\"#View-在哪\" class=\"headerlink\" title=\"View 在哪?\"></a>View 在哪?</h4><p>位於 View 資料夾中，內有 <code>Home</code> 跟 <code>Shared</code> 兩個子資料夾，此兩個資料夾是對應 <code>Home</code> 控制器，通常一個 Aciton 方法會對應一個 View 檔案。</p>\n<p><img src=\"https://i.imgur.com/YbMJYPA.png\" alt=\"\"></p>\n<blockquote>\n<p>例如: Index()會對應到一個 <code>Index.cshtml</code>，<code>.cshtml</code> 就是 C# 的 html 檔案。</p>\n</blockquote>\n<h2 id=\"手動建立-Model、Controller、View\"><a href=\"#手動建立-Model、Controller、View\" class=\"headerlink\" title=\"手動建立 Model、Controller、View\"></a>手動建立 Model、Controller、View</h2><p>雖然使用專案可以自動建立 MVC 樣版檔案，但學會自己手動建立，才能證明自己跨入了 MVC 大門。</p>\n<h3 id=\"建立-Controller\"><a href=\"#建立-Controller\" class=\"headerlink\" title=\"建立 Controller\"></a>建立 Controller</h3><p>在 Controller 資料夾上點選【右鍵】、選擇【加入】、選擇【控制器】。</p>\n<p>後會跳出控制器建立選項，選擇【MVC 5 控制器 - 空白】，並自訂控制器名稱，便完成建立了控制器。</p>\n<p><img src=\"https://i.imgur.com/rztlQtx.png\" alt=\"\"></p>\n<p>完成的控制器。</p>\n<p><img src=\"https://i.imgur.com/71udtkg.png\" alt=\"\"></p>\n<h3 id=\"建立-View\"><a href=\"#建立-View\" class=\"headerlink\" title=\"建立 View\"></a>建立 View</h3><p>點開剛剛建立的控制器，會看到有一個 <code>Index()</code> 的 Action。</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">using</span> System;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System.Collections.Generic;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System.Linq;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System.Web;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System.Web.Mvc;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">namespace</span> <span class=\"title\">chartTest.Controllers</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">productController</span> : <span class=\"title\">Controller</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"comment\">// GET: product</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> ActionResult <span class=\"title\">Index</span>(<span class=\"params\"></span>) <span class=\"comment\">// Index 上點右鍵</span></span></span><br><span class=\"line\"><span class=\"function\"></span>        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> View();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>在其上點選【右鍵】，選擇第一個【新增檢視】選項，檢視名稱維持 Index，範本也維持 Empty，按【加入】即建立完成。</p>\n<blockquote>\n<p>本來有試著修改名稱，但後面卻跳錯找不到 URL，所以建議先按照這裡的設定，熟悉流程。</p>\n</blockquote>\n<p>會看到在 View 資料夾下會產生一個 product 的資料夾，並產生 <code>index.cshtml</code> 檢視檔案，與 <code>index()</code> Action 相對應。</p>\n<p><img src=\"https://i.imgur.com/TL3VMg5.png\" alt=\"\"></p>\n<p>裡面程式碼長這樣。</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"code\"><pre><span class=\"line\">@&#123;</span><br><span class=\"line\">    ViewBag.Title = <span class=\"string\">\"Index\"</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;h2&gt;Index&lt;/h2&gt;</span><br></pre></td></tr></table></figure>\n\n<p>這時可以象徵性的修改 Index 中的 <code>&lt;h2&gt;</code> 的標題以及加入一張圖片，在按下 <code>F5</code> 會看到原本中間的區塊改變了。</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"code\"><pre><span class=\"line\">@&#123;</span><br><span class=\"line\">    ViewBag.Title = <span class=\"string\">\"Index\"</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;h2&gt;car&lt;/h2&gt;</span><br><span class=\"line\">&lt;img src=<span class=\"string\">\"https://images.unsplash.com/photo-1542362567-b07e54358753?ixlib=rb-1.2.1&amp;ixid=eyJhcHBfaWQiOjEyMDd9&amp;auto=format&amp;fit=crop&amp;w=500&amp;q=60\"</span> alt=<span class=\"string\">\"\"</span> /&gt;</span><br></pre></td></tr></table></figure>\n\n<p>F5 預覽頁面。</p>\n<p><img src=\"https://i.imgur.com/0B9Cpim.png\" alt=\"預覽畫面\"></p>\n<h3 id=\"建立-Model\"><a href=\"#建立-Model\" class=\"headerlink\" title=\"建立 Model\"></a>建立 Model</h3><p>在 Model 資料夾點擊【右鍵】、【加入】、【類別】(在最下方)，選擇第一個「類別」並且最下方的命名處命名「Product.cs」、【新增】即建立完成。</p>\n<p><img src=\"https://i.imgur.com/kY8lxhT.png\" alt=\"類別選單\"></p>\n<blockquote>\n<p>Model 檔案可隨意命名，它和 Controller 或 View 名稱沒有約定上的連動關係與限制。</p>\n</blockquote>\n<h4 id=\"定義-Model-的-Property-屬性\"><a href=\"#定義-Model-的-Property-屬性\" class=\"headerlink\" title=\"定義 Model 的 Property 屬性\"></a>定義 Model 的 Property 屬性</h4><p>在 Product 模型中加入 <code>Id</code>、<code>ProductName</code> 和 <code>UnitPrice</code> 三個 Property 屬性，用來存放資料。</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">using</span> System;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System.Collections.Generic;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System.Dynamic;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System.Linq;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System.Web;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">namespace</span> <span class=\"title\">chartTest.Models</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">product</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"keyword\">int</span> Id &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"keyword\">string</span> ProductName &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"keyword\">int</span> UnitPrice &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>參考資料</p>\n<p>網頁程式設計 ASP.NET MVC 5.x 範例完美演繹-第三版(適用 Visual C# 2019/2017)</p>\n","categories":["ASP.NET MVC Note"],"tags":["ASP.NET MVC"]},{"title":"Vue 筆記 - 使用 v-bind 動態新增屬性","url":"/vue-js-Note/20200421/4264825025/","content":"<p><img src=\"https://firebasestorage.googleapis.com/v0/b/timpicturespace.appspot.com/o/vue%20cover.png?alt=media&token=5f8b5aa0-eb3e-4d21-a715-07c5442dafbc\" alt=\"vue.js\"></p>\n<p>v-bind 縮寫為 <code>:</code></p>\n<h2 id=\"用法：\"><a href=\"#用法：\" class=\"headerlink\" title=\"用法：\"></a>用法：</h2><p>動態地綁定一個或多個特性，或一個組件 <code>prop</code> 到表達式。<br>在綁定 <code>class</code> 或 <code>style</code> 特性時，支持其它類型的值，如數組或對象。可以通過下面的教程鏈接查看詳情。</p>\n<blockquote>\n<p><code>Mustache</code> 不可作為屬性使用，如果要在 HTML 標記內的屬性帶入 data 或運算後的內容，要用 <code>v-bind</code> 來進行綁定。</p>\n</blockquote>\n<p>一般 html 程式碼是下方這樣</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"app\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"https://cn.vuejs.org/\"</span>&gt;</span>請點選連結<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">br</span> /&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">img</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">src</span>=<span class=\"string\">\"https://images.unsplash.com/photo-1523049673857-eb18f1d7b578?ixlib=rb-1.2.1&amp;ixid=eyJhcHBfaWQiOjEyMDd9&amp;auto=format&amp;fit=crop&amp;w=1268&amp;q=80\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">alt</span>=<span class=\"string\">\"fruit\"</span></span></span><br><span class=\"line\"><span class=\"tag\">  /&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>加入 vue 後的程式碼：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"app\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">:href</span>=<span class=\"string\">\"link\"</span>&gt;</span>請點選連結<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">br</span> /&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">:src</span>=<span class=\"string\">\"imgUrl\"</span> <span class=\"attr\">alt</span>=<span class=\"string\">\"fruit\"</span> /&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"actionscript\">  <span class=\"keyword\">var</span> vm = <span class=\"keyword\">new</span> Vue(&#123;</span></span><br><span class=\"line\"><span class=\"actionscript\">    el: <span class=\"string\">\"#app\"</span>,</span></span><br><span class=\"line\">    data: &#123;</span><br><span class=\"line\"><span class=\"actionscript\">      link: <span class=\"string\">\"https://cn.vuejs.org/\"</span>,</span></span><br><span class=\"line\">      imgUrl:</span><br><span class=\"line\"><span class=\"actionscript\">        <span class=\"string\">\"https://images.unsplash.com/photo-1523049673857-eb18f1d7b578?ixlib=rb-1.2.1&amp;ixid=eyJhcHBfaWQiOjEyMDd9&amp;auto=format&amp;fit=crop&amp;w=1268&amp;q=80\"</span>,</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>Codepen: <a href=\"https://codepen.io/tim_hsu/pen/ExVYbNg\" target=\"_blank\" rel=\"noopener\">https://codepen.io/tim_hsu/pen/ExVYbNg</a></p>\n<h2 id=\"動態加上-className\"><a href=\"#動態加上-className\" class=\"headerlink\" title=\"動態加上 className\"></a>動態加上 className</h2><p>來個綜合練習，有一個 box，透過 v-bind 動態加上 class，點擊 button 後旋轉 box，並且會變成粉紅色。</p>\n<p>HTML</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"app\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"container\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"box rotate\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    //這時正方形是 45 度</span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">hr</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">class</span>=<span class=\"string\">\"btn\"</span>&gt;</span>button<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>SCSS</p>\n<figure class=\"highlight css\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.container</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">500px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">margin</span>: <span class=\"number\">0</span> auto;</span><br><span class=\"line\">  .box &#123;</span><br><span class=\"line\">    <span class=\"selector-tag\">width</span>: 100<span class=\"selector-tag\">px</span>;</span><br><span class=\"line\">    <span class=\"selector-tag\">height</span>: 100<span class=\"selector-tag\">px</span>;</span><br><span class=\"line\">    <span class=\"selector-tag\">margin-top</span>: 50<span class=\"selector-tag\">px</span>;</span><br><span class=\"line\">    <span class=\"selector-tag\">transition</span>: <span class=\"selector-tag\">transform</span> 0<span class=\"selector-class\">.5s</span>;</span><br><span class=\"line\">    <span class=\"selector-tag\">border</span>: 1<span class=\"selector-tag\">px</span> <span class=\"selector-tag\">solid</span> <span class=\"selector-id\">#000</span>;</span><br><span class=\"line\">    transition: all 0.5s ease; //旋轉顏色漸變效果</span><br><span class=\"line\">    &amp;<span class=\"selector-class\">.rotate</span> &#123;</span><br><span class=\"line\">      transform: rotate(45deg); //旋轉45 度</span><br><span class=\"line\">      background-color: pink; //旋轉後變粉紅色</span><br><span class=\"line\">      border: 5px solid red; //旋轉後外框變粗變色</span><br><span class=\"line\">      border-radius: 20px; //旋轉有圓角效果</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"selector-tag\">hr</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">margin</span>: <span class=\"number\">50px</span> <span class=\"number\">0</span> <span class=\"number\">10px</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>vue</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> vm = <span class=\"keyword\">new</span> Vue(&#123;</span><br><span class=\"line\">  el: <span class=\"string\">\"#app\"</span>,</span><br><span class=\"line\">  data: &#123;</span><br><span class=\"line\">    isTransform: <span class=\"literal\">false</span>, <span class=\"comment\">//預設不旋轉</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>這時透過 v-bind 動態加上 class，語法是 <code>&lt;div class=&quot;box&quot; :class=&quot;{&#39;要加入的 className&#39;:判斷式}&quot;&gt;&lt;/div&gt;</code></p>\n<p>所以完成後的程式碼變為:</p>\n<p>HTML</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"app\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"container\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"box\"</span> <span class=\"attr\">:class</span>=<span class=\"string\">\"&#123;'rotate':isTransform&#125;\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">hr</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">class</span>=<span class=\"string\">\"btn\"</span>&gt;</span>button<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>透過 vue 開發工具會看到 <code>isTransform: false;</code>，改成 true 就會看到 box 會旋轉，代表效果有吃到。</p>\n<p>有 button 就會有 <code>click</code> 事件，所以在 button 中加上 <code>@click=&quot;rotatebox&quot;</code>，程式碼如下:<br><code>&lt;button class=&quot;btn&quot; @click=&quot;rotatebox&quot;&gt;button&lt;/button&gt;</code></p>\n<p>並且在 data 裡面加入 methods，</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\">methods: &#123;</span><br><span class=\"line\">  rotatebox()&#123;</span><br><span class=\"line\">   <span class=\"keyword\">this</span>.isTransform = !<span class=\"keyword\">this</span>.isTransform</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"> &#125;,</span><br></pre></td></tr></table></figure>\n\n<p>CodePen: <a href=\"https://codepen.io/hnzxewqw/pen/dyYXexX\" target=\"_blank\" rel=\"noopener\">https://codepen.io/hnzxewqw/pen/dyYXexX</a></p>\n","categories":["vue.js Note"],"tags":["vue.js"]},{"title":"C# 筆記 - 運算式與陳述式基本認識","url":"/C-Note/20200420/2434136122/","content":"<p><img src=\"https://robertlan.com/wp-content/uploads/2018/09/C-1024x384.png\" alt=\"C# ASP.NET\"></p>\n<h2 id=\"運算式\"><a href=\"#運算式\" class=\"headerlink\" title=\"運算式\"></a>運算式</h2><ul>\n<li>「運算式」是由「運算元」和「運算子」建構而成。運算式的運算子會指出要將哪些運算套用到運算元。</li>\n<li>運算子範例包括 <code>+</code>、<code>-</code>、<code>*</code>、<code>/</code> 及 <code>new</code>。</li>\n<li>運算元範例包括<strong>常值</strong>、<strong>欄位</strong>、<strong>區域變數</strong>及<strong>運算式</strong>。</li>\n</ul>\n<p><img src=\"https://ithelp.ithome.com.tw/upload/images/20190908/20120055CTeRE2CKnA.png\" alt=\"運算式示意圖\n\"></p>\n<p>當運算式包含多個運算子時，運算子的「優先順序」會控制評估個別運算子的順序。 例如，運算式 <code>x + y * z</code> 會評估為<code>x + (y * z)</code>，因為 <code>*</code> 運算子的優先順序高於 <code>+</code> 運算子。</p>\n<blockquote>\n<p>白話文：先乘除，後加減。</p>\n</blockquote>\n<p>更多運算子可參考下面兩篇</p>\n<p><a href=\"https://docs.microsoft.com/zh-tw/dotnet/csharp/language-reference/operators/\" target=\"_blank\" rel=\"noopener\">C# 運算子 (C# 參考)</a></p>\n<p><a href=\"https://ithelp.ithome.com.tw/articles/10213220\" target=\"_blank\" rel=\"noopener\">Day08-C#運算式與運算子(+、-、*、/、&gt;、&lt;….等)-來用 C#算數學吧!(上)</a></p>\n<h2 id=\"陳述式\"><a href=\"#陳述式\" class=\"headerlink\" title=\"陳述式\"></a>陳述式</h2><p>程式的動作是藉由陳述式來表達。 C# 支援數種不同類型的陳述式，其中一些是以內嵌陳述式來定義。</p>\n<h3 id=\"區塊宣告陳述式：\"><a href=\"#區塊宣告陳述式：\" class=\"headerlink\" title=\"區塊宣告陳述式：\"></a>區塊宣告陳述式：</h3><p>可允許在許可單一陳述式的內容中撰寫多個陳述式。 區塊是由在 <code>{</code> 與 <code>}</code> 分隔符號之間撰寫的陳述式清單所組成，可用來宣告區域變數和常數。</p>\n<h4 id=\"區域變數宣告\"><a href=\"#區域變數宣告\" class=\"headerlink\" title=\"區域變數宣告\"></a>區域變數宣告</h4><figure class=\"highlight csharp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">Declarations</span>(<span class=\"params\"><span class=\"keyword\">string</span>[] args</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> a;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> b = <span class=\"number\">2</span>, c = <span class=\"number\">3</span>;</span><br><span class=\"line\">    a = <span class=\"number\">1</span>;</span><br><span class=\"line\">    Console.WriteLine(a + b + c);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"區域常數宣告\"><a href=\"#區域常數宣告\" class=\"headerlink\" title=\"區域常數宣告\"></a>區域常數宣告</h4><figure class=\"highlight csharp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">ConstantDeclarations</span>(<span class=\"params\"><span class=\"keyword\">string</span>[] args</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> <span class=\"keyword\">float</span> pi = <span class=\"number\">3.1415927f</span>;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> <span class=\"keyword\">int</span> r = <span class=\"number\">25</span>;</span><br><span class=\"line\">    Console.WriteLine(pi * r * r);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"運算式陳述式\"><a href=\"#運算式陳述式\" class=\"headerlink\" title=\"運算式陳述式\"></a>運算式陳述式</h3><figure class=\"highlight csharp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">Expressions</span>(<span class=\"params\"><span class=\"keyword\">string</span>[] args</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> i;</span><br><span class=\"line\">    i = <span class=\"number\">123</span>;                <span class=\"comment\">// Expression statement</span></span><br><span class=\"line\">    Console.WriteLine(i);   <span class=\"comment\">// Expression statement</span></span><br><span class=\"line\">    i++;                    <span class=\"comment\">// Expression statement</span></span><br><span class=\"line\">    Console.WriteLine(i);   <span class=\"comment\">// Expression statement</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"「選取範圍陳述式」\"><a href=\"#「選取範圍陳述式」\" class=\"headerlink\" title=\"「選取範圍陳述式」\"></a>「選取範圍陳述式」</h3><p>可用來選取一些可能陳述式的其中之一，以根據某個運算式的值來執行。</p>\n<h4 id=\"if-陳述式\"><a href=\"#if-陳述式\" class=\"headerlink\" title=\"if 陳述式\"></a>if 陳述式</h4><p>加入判斷條件。</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">IfStatement</span>(<span class=\"params\"><span class=\"keyword\">string</span>[] args</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (args.Length == <span class=\"number\">0</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        Console.WriteLine(<span class=\"string\">\"No arguments\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        Console.WriteLine(<span class=\"string\">\"One or more arguments\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"switch-陳述式\"><a href=\"#switch-陳述式\" class=\"headerlink\" title=\"switch 陳述式\"></a>switch 陳述式</h4><figure class=\"highlight csharp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">SwitchStatement</span>(<span class=\"params\"><span class=\"keyword\">string</span>[] args</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> n = args.Length;</span><br><span class=\"line\">    <span class=\"keyword\">switch</span> (n)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"number\">0</span>:</span><br><span class=\"line\">            Console.WriteLine(<span class=\"string\">\"No arguments\"</span>);</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"number\">1</span>:</span><br><span class=\"line\">            Console.WriteLine(<span class=\"string\">\"One argument\"</span>);</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        <span class=\"keyword\">default</span>:</span><br><span class=\"line\">            Console.WriteLine(<span class=\"string\">$\"<span class=\"subst\">&#123;n&#125;</span> arguments\"</span>);</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"反覆運算陳述式\"><a href=\"#反覆運算陳述式\" class=\"headerlink\" title=\"反覆運算陳述式\"></a>反覆運算陳述式</h3><p>可用來重複執行內嵌的陳述式。</p>\n<h4 id=\"while-陳述式\"><a href=\"#while-陳述式\" class=\"headerlink\" title=\"while 陳述式\"></a>while 陳述式</h4><p>while 迴圈寫法</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">WhileStatement</span>(<span class=\"params\"><span class=\"keyword\">string</span>[] args</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> i = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (i &lt; args.Length)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        Console.WriteLine(args[i]);</span><br><span class=\"line\">        i++;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"do-陳述式\"><a href=\"#do-陳述式\" class=\"headerlink\" title=\"do 陳述式\"></a>do 陳述式</h4><figure class=\"highlight csharp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">DoStatement</span>(<span class=\"params\"><span class=\"keyword\">string</span>[] args</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">string</span> s;</span><br><span class=\"line\">    <span class=\"keyword\">do</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        s = Console.ReadLine();</span><br><span class=\"line\">        Console.WriteLine(s);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">while</span> (!<span class=\"keyword\">string</span>.IsNullOrEmpty(s));</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"for-陳述式\"><a href=\"#for-陳述式\" class=\"headerlink\" title=\"for 陳述式\"></a>for 陳述式</h4><figure class=\"highlight csharp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">ForStatement</span>(<span class=\"params\"><span class=\"keyword\">string</span>[] args</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; args.Length; i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        Console.WriteLine(args[i]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"foreach-陳述式\"><a href=\"#foreach-陳述式\" class=\"headerlink\" title=\"foreach 陳述式\"></a>foreach 陳述式</h4><figure class=\"highlight csharp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">ForEachStatement</span>(<span class=\"params\"><span class=\"keyword\">string</span>[] args</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">foreach</span> (<span class=\"keyword\">string</span> s <span class=\"keyword\">in</span> args)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        Console.WriteLine(s);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"跳躍陳述式\"><a href=\"#跳躍陳述式\" class=\"headerlink\" title=\"跳躍陳述式\"></a>跳躍陳述式</h3><p>可用來轉移控制項。</p>\n<h4 id=\"break-陳述式\"><a href=\"#break-陳述式\" class=\"headerlink\" title=\"break 陳述式\"></a>break 陳述式</h4><figure class=\"highlight csharp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">BreakStatement</span>(<span class=\"params\"><span class=\"keyword\">string</span>[] args</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (<span class=\"literal\">true</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">string</span> s = Console.ReadLine();</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">string</span>.IsNullOrEmpty(s))</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        Console.WriteLine(s);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"continue-陳述式\"><a href=\"#continue-陳述式\" class=\"headerlink\" title=\"continue 陳述式\"></a>continue 陳述式</h4><figure class=\"highlight csharp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">ContinueStatement</span>(<span class=\"params\"><span class=\"keyword\">string</span>[] args</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; args.Length; i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (args[i].StartsWith(<span class=\"string\">\"/\"</span>))</span><br><span class=\"line\">            <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">        Console.WriteLine(args[i]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"goto-陳述式\"><a href=\"#goto-陳述式\" class=\"headerlink\" title=\"goto 陳述式\"></a>goto 陳述式</h4><figure class=\"highlight csharp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">GoToStatement</span>(<span class=\"params\"><span class=\"keyword\">string</span>[] args</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> i = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">goto</span> check;</span><br><span class=\"line\">    loop:</span><br><span class=\"line\">    Console.WriteLine(args[i++]);</span><br><span class=\"line\">    check:</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (i &lt; args.Length)</span><br><span class=\"line\">        <span class=\"keyword\">goto</span> loop;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"return-陳述式\"><a href=\"#return-陳述式\" class=\"headerlink\" title=\"return 陳述式\"></a>return 陳述式</h4><figure class=\"highlight csharp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">int</span> <span class=\"title\">Add</span>(<span class=\"params\"><span class=\"keyword\">int</span> a, <span class=\"keyword\">int</span> b</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> a + b;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">ReturnStatement</span>(<span class=\"params\"><span class=\"keyword\">string</span>[] args</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">   Console.WriteLine(Add(<span class=\"number\">1</span>, <span class=\"number\">2</span>));</span><br><span class=\"line\">   <span class=\"keyword\">return</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"yield-陳述式\"><a href=\"#yield-陳述式\" class=\"headerlink\" title=\"yield 陳述式\"></a>yield 陳述式</h4><figure class=\"highlight csharp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">static</span> System.Collections.Generic.<span class=\"function\">IEnumerable&lt;<span class=\"keyword\">int</span>&gt; <span class=\"title\">Range</span>(<span class=\"params\"><span class=\"keyword\">int</span> start, <span class=\"keyword\">int</span> end</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = start; i &lt; end; i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">yield</span> <span class=\"keyword\">return</span> i;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">yield</span> <span class=\"keyword\">break</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">YieldStatement</span>(<span class=\"params\"><span class=\"keyword\">string</span>[] args</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">foreach</span> (<span class=\"function\"><span class=\"keyword\">int</span> i <span class=\"keyword\">in</span> <span class=\"title\">Range</span>(<span class=\"params\"><span class=\"number\">-10</span>,<span class=\"number\">10</span></span>))</span></span><br><span class=\"line\"><span class=\"function\"></span>    &#123;</span><br><span class=\"line\">        Console.WriteLine(i);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"throw-陳述式和-try-陳述式\"><a href=\"#throw-陳述式和-try-陳述式\" class=\"headerlink\" title=\"throw 陳述式和 try 陳述式\"></a>throw 陳述式和 try 陳述式</h3><p>可用來攔截在執行區塊時發生的例外狀況，而 <code>try</code> … <code>finally</code> 陳述式則可用來指定不論是否發生例外狀況都一律會執行的最終處理程式碼。</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">double</span> <span class=\"title\">Divide</span>(<span class=\"params\"><span class=\"keyword\">double</span> x, <span class=\"keyword\">double</span> y</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (y == <span class=\"number\">0</span>)</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> DivideByZeroException();</span><br><span class=\"line\">    <span class=\"keyword\">return</span> x / y;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">TryCatch</span>(<span class=\"params\"><span class=\"keyword\">string</span>[] args</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">try</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (args.Length != <span class=\"number\">2</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> InvalidOperationException(<span class=\"string\">\"Two numbers required\"</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">double</span> x = <span class=\"keyword\">double</span>.Parse(args[<span class=\"number\">0</span>]);</span><br><span class=\"line\">        <span class=\"keyword\">double</span> y = <span class=\"keyword\">double</span>.Parse(args[<span class=\"number\">1</span>]);</span><br><span class=\"line\">        Console.WriteLine(Divide(x, y));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">catch</span> (InvalidOperationException e)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        Console.WriteLine(e.Message);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">finally</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        Console.WriteLine(<span class=\"string\">\"Good bye!\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"checked-和-unchecked-陳述式\"><a href=\"#checked-和-unchecked-陳述式\" class=\"headerlink\" title=\"checked 和 unchecked 陳述式\"></a>checked 和 unchecked 陳述式</h4><p>可用來控制整數型別算術運算和轉換的溢位檢查內容。</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">CheckedUnchecked</span>(<span class=\"params\"><span class=\"keyword\">string</span>[] args</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> x = <span class=\"keyword\">int</span>.MaxValue;</span><br><span class=\"line\">    <span class=\"keyword\">unchecked</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        Console.WriteLine(x + <span class=\"number\">1</span>);  <span class=\"comment\">// Overflow</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">checked</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        Console.WriteLine(x + <span class=\"number\">1</span>);  <span class=\"comment\">// Exception</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"lock-陳述式\"><a href=\"#lock-陳述式\" class=\"headerlink\" title=\"lock 陳述式\"></a>lock 陳述式</h3><p>可用來取得所指定物件的互斥鎖定、執行陳述式，然後釋放鎖定。</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title\">Account</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">decimal</span> balance;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">readonly</span> <span class=\"keyword\">object</span> sync = <span class=\"keyword\">new</span> <span class=\"keyword\">object</span>();</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">Withdraw</span>(<span class=\"params\"><span class=\"keyword\">decimal</span> amount</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">lock</span> (sync)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (amount &gt; balance)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> Exception(</span><br><span class=\"line\">                    <span class=\"string\">\"Insufficient funds\"</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            balance -= amount;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"using-陳述式\"><a href=\"#using-陳述式\" class=\"headerlink\" title=\"using 陳述式\"></a>using 陳述式</h3><p>可用來取得資源、執行陳述式，然後處置該資源。</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">UsingStatement</span>(<span class=\"params\"><span class=\"keyword\">string</span>[] args</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">using</span> (TextWriter w = File.CreateText(<span class=\"string\">\"test.txt\"</span>))</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        w.WriteLine(<span class=\"string\">\"Line one\"</span>);</span><br><span class=\"line\">        w.WriteLine(<span class=\"string\">\"Line two\"</span>);</span><br><span class=\"line\">        w.WriteLine(<span class=\"string\">\"Line three\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>參考資料</p>\n<p><a href=\"https://docs.microsoft.com/zh-tw/dotnet/csharp/tour-of-csharp/statements\" target=\"_blank\" rel=\"noopener\">陳述式</a></p>\n","categories":["C# Note"],"tags":["C#"]},{"title":"C# 筆記 - 型別與變數","url":"/C-Note/20200420/951951981/","content":"<p><img src=\"https://robertlan.com/wp-content/uploads/2018/09/C-1024x384.png\" alt=\"C# ASP.NET\"></p>\n<h2 id=\"資料型別\"><a href=\"#資料型別\" class=\"headerlink\" title=\"資料型別\"></a>資料型別</h2><p>C# 中有兩種型別：<strong>實值型別</strong>和<strong>參考型別</strong>。</p>\n<h3 id=\"實值型別\"><a href=\"#實值型別\" class=\"headerlink\" title=\"實值型別\"></a>實值型別</h3><p>變數的記憶體空間存放的是實際的值。如 <code>int x = 5</code>，x 的內容就是 5。</p>\n<p>實值型別可進一步細分為<strong>簡單型別</strong>、<strong>列舉型別</strong>、<strong>結構型別</strong>和<strong>可為 Null 的實值型別</strong>。</p>\n<ul>\n<li><p><strong>簡單型別</strong></p>\n<ul>\n<li>帶正負號的整數︰<code>sbyte</code>、<code>short</code>、<code>int</code>、<code>long</code>。</li>\n<li>不帶正負號的整數︰<code>byte</code>、<code>ushort</code>、<code>uint</code>、<code>ulong</code>。</li>\n<li>Unicode 字元：<code>char</code>。</li>\n<li>IEEE 二進位浮點：<code>float</code>、<code>double</code>。</li>\n<li>高精確度十進位浮點：<code>decimal</code>。</li>\n<li>布林值：<code>bool</code>。</li>\n</ul>\n<blockquote>\n<p>C# 的 <code>bool</code> 型別用來代表布林值 — 不是 <code>true</code> 或 <code>false</code> 的值。</p>\n</blockquote>\n</li>\n<li><p><strong>枚舉類型</strong><br>使用者定義型別，格式為 <code>enum E {...}</code>。</p>\n</li>\n<li><p><strong>結構型別</strong><br>使用者定義型別，格式為 <code>struct S {...}</code>。</p>\n</li>\n<li><p><strong>可為 Null 的實值類型</strong><br>含有 <code>null</code> 值的所有其他數值型別的擴充。</p>\n</li>\n</ul>\n<h3 id=\"參考型別\"><a href=\"#參考型別\" class=\"headerlink\" title=\"參考型別\"></a>參考型別</h3><p>變數的記憶體空間存放的是值的記憶體位置，也就是放值的記憶體第一個開頭的地方。如 <code>int[] A = new int[] {1,4,2}</code>。<code>A</code> 存的就是 <code>[1,4,2]</code> 的記憶體位置。當要讀取 <code>4</code> 的時候，就是讀取 <code>A[1]</code>，指的是 <code>A</code> 記憶體位置的第二個值 (因陣列第一個序列為 0)。</p>\n<p>參考型別可進一步細分為<strong>類別型別 (物件、字串、自訂類別)</strong>、<strong>介面型別</strong>、<strong>陣列型別</strong>和<strong>委派型別</strong>。</p>\n<ul>\n<li><strong>類別類型</strong><ul>\n<li>所有其他型別的基底類別︰<code>object</code>。</li>\n<li>Unicode 字串：<code>string</code>。</li>\n<li>使用者定義型別，格式為 <code>class C {...}</code>。</li>\n</ul>\n</li>\n<li><strong>介面型別</strong><br>使用者定義型別，格式為 <code>interface I {...}</code>。</li>\n<li><strong>陣列類型</strong><br>單一維度和多維度，例如 <code>int[]</code> 和 <code>int[,]</code>。</li>\n<li><strong>委派型別</strong><br>使用者定義型別，格式為 <code>delegate int D(...)</code>。</li>\n</ul>\n<h3 id=\"C-常用到的基本資料型別\"><a href=\"#C-常用到的基本資料型別\" class=\"headerlink\" title=\"C# 常用到的基本資料型別\"></a>C# 常用到的基本資料型別</h3><p><img src=\"https://i.imgur.com/h3q18Kf.png\" alt=\"C# 常用的資料型別\"></p>\n<blockquote>\n<p>橘色標示的是比較常使用到的型別。了解<a href=\"https://docs.microsoft.com/zh-tw/dotnet/csharp/tour-of-csharp/types-and-variables\" target=\"_blank\" rel=\"noopener\">更多</a></p>\n</blockquote>\n<ul>\n<li>考量到記憶體的使用效能，整數分類較多。</li>\n<li>物件導向設計裡，萬物都是物件，物件在宣告時都需要使用 new 的方式給他一個新的記憶體空間。但值類型的基本型別 (object 除外)，宣告都不需要使用 new。</li>\n</ul>\n<h2 id=\"變數與變數宣告\"><a href=\"#變數與變數宣告\" class=\"headerlink\" title=\"變數與變數宣告\"></a>變數與變數宣告</h2><p>跟 JavaScript 有點像，都需要變數宣告、定義變數名稱還有給予其值。</p>\n<ol>\n<li><strong>變數定義</strong>: 用來表示值的名稱。顧名思義，存在變數裡的值是可以被改變的。</li>\n<li><strong>宣告方式</strong>: <code>資料型別 變數名稱 = 內容</code>。</li>\n<li>類別、結構、靜態變數、陳列元素中的變數宣告時若無指派初值，會自動給予初始值。</li>\n<li>數字型別初始值為 <code>0</code>。</li>\n<li>參考型別初始值為 <code>null</code>。</li>\n<li>布林預設值為 <code>false</code>。</li>\n</ol>\n<p>常用的方式如下 <del>(跟 JS 有 87% 像)</del></p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span> a;<span class=\"comment\">// 宣告 a 是一個可以存整數的變數</span></span><br><span class=\"line\"><span class=\"keyword\">int</span> a = <span class=\"number\">1</span>;<span class=\"comment\">// 宣告 a 是一個整數，且賦值1給a</span></span><br><span class=\"line\"><span class=\"keyword\">char</span> sex = <span class=\"string\">'F'</span>;<span class=\"comment\">// 字元宣告用單引號</span></span><br><span class=\"line\"><span class=\"keyword\">string</span> apple = <span class=\"string\">\"好吃\"</span>;<span class=\"comment\">// 字串宣告用雙引號</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">int</span> a,b,c;<span class=\"comment\">// 可以一次宣告多個同型別的變數</span></span><br><span class=\"line\"><span class=\"keyword\">int</span> a,b = <span class=\"number\">0</span>,c = <span class=\"number\">1</span>;<span class=\"comment\">// 也可以同時賦值</span></span><br></pre></td></tr></table></figure>\n\n<p>參考資料</p>\n<p><a href=\"https://docs.microsoft.com/zh-tw/dotnet/csharp/tour-of-csharp/types-and-variables\" target=\"_blank\" rel=\"noopener\">型別與變數</a></p>\n<p><a href=\"https://ithelp.ithome.com.tw/articles/10213219\" target=\"_blank\" rel=\"noopener\">Day06-C#變數與變數宣告、常數與常數宣告、var、型別轉換</a></p>\n","categories":["C# Note"],"tags":["C#"]},{"title":"C# 筆記 - C# 語言的基本認識","url":"/C-Note/20200420/1210559046/","content":"<p><img src=\"https://robertlan.com/wp-content/uploads/2018/09/C-1024x384.png\" alt=\"C# ASP.NET\"></p>\n<p>C# 是微軟推出的一種基於 <strong>.NET 框架</strong>的、<strong>物件導向</strong>的進階程式語言。C# 以 .NET 框架類別館作為基礎，擁有類似 Visual Basic 的快速開發能力。C# 由安德斯·海爾斯伯格主持開發，微軟在 2000 年發布了這種語言，希望藉助這種語言來取代 Java。 C# 已經成為 ECMA 國際和國際標準組織的標準規範。</p>\n<p><a href=\"https://zh.wikipedia.org/wiki/C%E2%99%AF\" target=\"_blank\" rel=\"noopener\">若要看更多關於 C# 的資訊，可見維基百科</a></p>\n<h2 id=\"何謂-C\"><a href=\"#何謂-C\" class=\"headerlink\" title=\"何謂 C#\"></a>何謂 C#</h2><ol>\n<li><p>C# ( 念法為 C Sharp )。源自於 C 語言。</p>\n</li>\n<li><p>C# 為<strong>強型別的語言</strong>，指的是每一個物件都<strong>必須</strong>指定型別。使用前你要先幫它規定好，該是整數就是整數 ( int )，該是字串就是字串 ( string )，要把整數當成字串用，就需要使用<strong>轉型</strong>。在各型別的<strong>繼承關係</strong>中，最上層的型別是 Object，意即，所有的東西都是物件。</p>\n</li>\n<li><p>C# 副檔名為 .cs，應用範圍廣，如網頁、大型作業系統、小型嵌入式系統…等皆可以用其來開發。</p>\n</li>\n<li><p>為了確保 C# 程式和庫能夠隨著時間的推移以相容的方式發展，在 C# 設計中，已非常強調版本控制。 許多程式設計語言很少注意這個問題。 因此，引入依賴庫的較新版本時，用這些其他語言編寫的程式中斷的頻率超過必要。 C# 設計中受版本控制注意事項直接影響的方面包括單獨 <code>virtual</code> 和 <code>override</code> 修改器、方法重載解析規則以及對顯式介面成員聲明的支援。</p>\n</li>\n</ol>\n<h2 id=\"Hello-World\"><a href=\"#Hello-World\" class=\"headerlink\" title=\"Hello World\"></a>Hello World</h2><p>以下為 C# 官方起手式的寫法，並附上說明：</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">using</span> System;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title\">Hello</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">Main</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>    &#123;</span><br><span class=\"line\">        Console.WriteLine(<span class=\"string\">\"Hello, World\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"using\"><a href=\"#using\" class=\"headerlink\" title=\"using\"></a>using</h2><p>寫在最上方用來匯入函式庫(其他命名空間)使用，這也是 <code>using</code> 最常用的用法。</p>\n<ul>\n<li>為什麼要匯入其他函式?</li>\n</ul>\n<p>用法類似寫 SCSS 使用的 <code>import</code> ，匯入外部程式碼，就可以直接在程式中使用命名空間裡的型別，而不用指定型別的詳細空間，以縮短程式碼。</p>\n<h2 id=\"namespace-命名空間\"><a href=\"#namespace-命名空間\" class=\"headerlink\" title=\"namespace 命名空間\"></a>namespace 命名空間</h2><p>通常會在 <code>using System</code> 之後，在 <code>class</code> 之前，打包程式碼的空間，把相同功能者聚集在一起，用 <code>namespace</code> 名稱 <code>{ }</code> 一組大括號包起來，可以自訂義名稱，預設建立時會設定的跟專案( project )名稱一樣，當其他地方要用到的時候可以呼叫這個名字，如上方 using 後方也都是命名空間。<strong>用來指名程式所屬範圍，避免相同名稱類別產生衝突，可以控制類別的範圍。</strong> 一個檔案只有一個命名空間。</p>\n<h2 id=\"class\"><a href=\"#class\" class=\"headerlink\" title=\"class\"></a>class</h2><ul>\n<li>開頭要使用 <code>using</code>, <code>System</code> 代表使用這個命名空間，命名空間包含數個型別 (如程式中參考的 <code>Console</code> 類別)，和數個其他命名空間 (如 <code>IO</code> 和 <code>Collections</code>)。並且每一段程式碼要用 <code>;</code> 分號結尾。</li>\n<li>如上方簡介提到 C# 為強型別語言，也就是都要先定義類別 <code>(class)</code> 並給予一個變數名稱，這裡使用變數名稱為 <code>Hello</code>。</li>\n<li>C# 是階層式的語法，從宣告 <code>class</code> 開始，都要使用大括號包住下一層的程式碼。</li>\n</ul>\n<h3 id=\"static-void-Main-進入點寫法\"><a href=\"#static-void-Main-進入點寫法\" class=\"headerlink\" title=\"static void Main(){ }: 進入點寫法\"></a>static void Main(){ }: 進入點寫法</h3><p>整份程式碼非常多，C# 的世界裡，要告訴電腦從哪一行開始往下讀。這是 <code>Console</code> 模式裡進入點的寫法。C# 只能有一個進入點。</p>\n<ol>\n<li><strong>static</strong>: 一般類別中的方法必須先建立該類別的實體物件 (new) 後才能使用。若宣告為 <code>static</code>，<strong>代表一開始就存在在記憶體中</strong>，不用先建立 <code>Main()</code> 的物件實體就能叫用。</li>\n<li><strong>void</strong>: 表示不會傳回任何值。</li>\n<li><strong>Main()</strong>: 為程式開始執行的進入點。</li>\n<li><strong>string[] args</strong>:代表執行 <code>Main()</code> 方法時會將接在專案執行檔後面的參數置入 <code>args</code> 陣列。<code>args</code> 是一個字串陣列。</li>\n</ol>\n<blockquote>\n<p>在函式參數中看到這串參數 <code>string[] args</code> ，表示命令列引數是字串陣列，就是說，你在命令列 <code>[]</code> 裡輸入的引數可以使多個字串(在某種意義上意味著什麼都可以是命令列引數)。</p>\n<ul>\n<li>執行時會彈出命令視窗,你可以在那裡輸入一些引數，<code>string[] args</code> 指的就是你在命令視窗輸入的引數。<code>args</code> 是用來處理命令列引數的。命令列引數，就是你執行這個程式的時候給它傳的引數。它是可選項，不是必須。</li>\n</ul>\n</blockquote>\n<h3 id=\"Console\"><a href=\"#Console\" class=\"headerlink\" title=\"Console\"></a>Console</h3><p><code>Console.WritLine(&quot;Hello World!&quot;);</code></p>\n<ul>\n<li><strong>console</strong>: 是在 <code>console</code> 執行，所以目標就是 <code>console</code>。</li>\n<li><strong>WriteLine()</strong>: 這是一種方法，代表 <strong>輸出 + 換行</strong> 這個動作。<code>()</code> 內要放參數，或是我們要輸出的內容。由於我們要輸出的 <code>Hello World</code> 是字串，要用雙引號包起來。更多輸出內容可以參考 <a href=\"https://docs.microsoft.com/zh-tw/dotnet/api/system.console.writeline?view=netframework-4.8\" target=\"_blank\" rel=\"noopener\">MSDN</a></li>\n<li>C#每行程式需要用分號 <code>;</code> 結尾。</li>\n</ul>\n<p><code>Console.Read();</code></p>\n<p>架構跟上方相同，<code>Read()</code> 這個方法是讀入主控台輸入的字串。這一行是因為，程式預設一執行完就會關閉視窗，會看不到輸出結果。加了這一行它就會等著我們輸入字串暫時不關閉視窗。也可以寫<code>Console.ReadKey();</code>，讀入一個鍵的意思。</p>\n<p>接著按下上方執行輸出結果，恭喜你完成 <code>Hello World!</code> 了!</p>\n<h2 id=\"C-讀入與輸出\"><a href=\"#C-讀入與輸出\" class=\"headerlink\" title=\"C# 讀入與輸出\"></a>C# 讀入與輸出</h2><h3 id=\"讀入\"><a href=\"#讀入\" class=\"headerlink\" title=\"讀入\"></a>讀入</h3><p><code>Console.Read()</code>: 讀入一個字元。<br><code>Console.ReadLine()</code>: 讀入一行字串。<br><code>Console.ReadKey()</code>: 讀入一個鍵。</p>\n<h3 id=\"輸出\"><a href=\"#輸出\" class=\"headerlink\" title=\"輸出\"></a>輸出</h3><p><code>Console.Write()</code>: 輸出一段字但不換行。<br><code>Console.WriteLine()</code>: 輸出一段字並換行。</p>\n<p>所呈現的程式碼內容會如下圖:</p>\n<p><img src=\"https://ithelp.ithome.com.tw/upload/images/20190903/20120055SKBEyvMP6B.png\" alt=\"the first C#\"></p>\n<blockquote>\n<p>以上為自學筆記，若有誤還請各位前輩提點指正。</p>\n</blockquote>\n<p>參考資料:</p>\n<p><a href=\"https://ithelp.ithome.com.tw/articles/10213373\" target=\"_blank\" rel=\"noopener\">Day04-用 C#寫出第一個 Hello World 吧!(Console 模式/Visual Studio)</a></p>\n<p><a href=\"https://docs.microsoft.com/zh-tw/dotnet/csharp/tour-of-csharp/\" target=\"_blank\" rel=\"noopener\">C# 語言之旅</a></p>\n","categories":["C# Note"],"tags":["C#"]},{"title":"JS 筆記 - 控制判斷(if、else if、switch)","url":"/JavaScript-Note/20200420/4050508230/","content":"<p><img src=\"https://firebasestorage.googleapis.com/v0/b/timpicturespace.appspot.com/o/JavaScript%20note-01.jpg?alt=media&token=7bee0261-72ac-4de4-9f5a-f39d58735b7d\" alt=\"JavaScript Note\"></p>\n<h2 id=\"if\"><a href=\"#if\" class=\"headerlink\" title=\"if\"></a>if</h2><p>光看英文單字，if 有如果的意思，在這邊程式碼也是直接使用字面上的感覺。<br>if 的程式碼如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> name = value;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> (name == value) &#123; <span class=\"comment\">//判斷式</span></span><br><span class=\"line\">  ...<span class=\"comment\">//陳述式</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>判斷式<strong>先判斷</strong>小括號內的條件是否<strong>符合</strong>變數給的值，若相同就會執行陳述式，若不同則不會執行，所以 if 的感覺很直覺，想什麼講什麼就是了。</p>\n<p>if 後面的小括號要放<code>比較運算子</code>，也就是 <code>name == value</code>，不能放 <code>name = value</code>，這樣會變成<strong>變數值</strong>。</p>\n<hr>\n<h2 id=\"else-if、else\"><a href=\"#else-if、else\" class=\"headerlink\" title=\"else if、else\"></a>else if、else</h2><p>是延續 <code>if</code> 的屬性，倘若 <code>if</code> 內陳述式的程式碼與判斷式<strong>不相符</strong>，就會直接執行 <code>else if</code> 的陳述式，結尾要用 <code>else</code>。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> name = value;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> (condition) &#123; <span class=\"comment\">//判斷式</span></span><br><span class=\"line\">  ... <span class=\"comment\">//陳述式</span></span><br><span class=\"line\">&#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>&#123;</span><br><span class=\"line\">  ... <span class=\"comment\">//倘若第一個陳述式沒有滿足條件，就會執行 else 裡面的程式碼</span></span><br><span class=\"line\">  ...</span><br><span class=\"line\">  ...</span><br><span class=\"line\">  ... <span class=\"comment\">// else if 可以很多程式碼</span></span><br><span class=\"line\">&#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">  ...<span class=\"comment\">//最後結尾會執行 else 的程式碼</span></span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>else 不用滿足條件，可以直接顯示結果，是滿好用的語法</p>\n</blockquote>\n<hr>\n<h2 id=\"Switch\"><a href=\"#Switch\" class=\"headerlink\" title=\"Switch\"></a>Switch</h2><p><code>Switch</code> 的用法跟 <code>if</code>、 <code>else if</code> 有點像，差別是 <code>if</code> 會把所有的程式碼都讀取過，相對渲染會比較慢，效能相對較低，而 <code>Switch</code> 會全部都讀過，但會只先看條件，看到有相符的型別才會再進去讀取相關內容，讀取後執行其他程式碼就不會再存取了，相對效能較高。</p>\n<p>switch 的程式碼如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">switch</span> (key) &#123; <span class=\"comment\">//設定一個表達式，且包含條件</span></span><br><span class=\"line\">  <span class=\"keyword\">case</span> value: <span class=\"comment\">//要先寫一個 case 然後加上**變數名稱**(字串要加引號，不用小括弧)，給一個冒號：寫裡面的內容，結尾用分號 ; ，結束有點像 CSS</span></span><br><span class=\"line\">    ...</span><br><span class=\"line\">    <span class=\"keyword\">break</span>; <span class=\"comment\">//每個 case 都要用一個 break 做結束。</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">default</span>: <span class=\"comment\">//defalt 用法有點像 else，就如果沒有滿足的條件就會執行這個內容，但其位置可以任意放置，但我會習慣放在最後面，這樣寫程式碼比較有邏輯一點</span></span><br><span class=\"line\">    ...</span><br><span class=\"line\">    <span class=\"keyword\">break</span>; <span class=\"comment\">// 結束也要用一個 break 當作結束。</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>建立 switch：設立一個表達式，且包含條件，用小括號包起來。<br>case: 後方會開始比對，如果符合就會執行相關連的程式碼。<br>break: 每個 case 後方都會補上一個 break，如果讀取到條件相符，就會停止讀取後方的程式碼。</p>\n</blockquote>\n<hr>\n<h3 id=\"加入-function-到-Switch\"><a href=\"#加入-function-到-Switch\" class=\"headerlink\" title=\"加入 function 到 Switch\"></a>加入 function 到 Switch</h3><blockquote>\n<ol>\n<li>建立變數。</li>\n<li>建立 function。</li>\n<li>帶入 switch，switch 裡面可以帶入多個相同條件的 case。</li>\n</ol>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> name = value;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">name</span>(<span class=\"params\">params</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(params);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">switch</span> (key) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">case</span> value: <span class=\"comment\">//case1</span></span><br><span class=\"line\">    ...</span><br><span class=\"line\">    <span class=\"keyword\">break</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">case</span> value: <span class=\"comment\">//case2</span></span><br><span class=\"line\">    name(params); <span class=\"comment\">//帶入 function</span></span><br><span class=\"line\">    <span class=\"keyword\">break</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">default</span>:</span><br><span class=\"line\">    ...</span><br><span class=\"line\">    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>實際遇到的<a href=\"https://hsuchihting.github.io/JavaScript-Note/20200325/2975558676/\">jQuery 筆記 - 使用 select 選取 option 的資料，並同步渲染於網頁</a></p>\n","categories":["JavaScript Note"],"tags":["JavaScript"]},{"title":"Vue 筆記 - 資料綁定與模板 v-model、v-text、v-html","url":"/vue-js-Note/20200419/2954354756/","content":"<p><img src=\"https://firebasestorage.googleapis.com/v0/b/timpicturespace.appspot.com/o/vue04.png?alt=media&token=b2202a44-956f-4b67-81a9-401df1d363cf\" alt=\"pic\"></p>\n<p>先前已經提過 Vue 的概念是受到 M-V-VM 的概念為啟發，並非完全的 M-V-VM，至於概念可看<a href=\"https://zh.wikipedia.org/wiki/MVVM\" target=\"_blank\" rel=\"noopener\">維基百科</a>。</p>\n<p>下方有一個 vue 的程式碼，data 中有一個預設字串，想把 data 中的資料顯示於網頁上，可以使用雙大括號 ( Mustache 語法 ) 做同步的顯示，如果想透過網頁操作資料，可以使用指令 <code>v-model</code> 在 <code>input</code> 的表單中控制其資料內容。</p>\n<blockquote>\n<p><code>Mustache</code> 不可作為屬性使用，如果要在 HTML 標記內的屬性帶入 data 或運算後的內容，要用 <code>v-bind</code> 來進行綁定。</p>\n</blockquote>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"app\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text\"</span>&gt;</span></span><br><span class=\"line\"> <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"actionscript\">  <span class=\"keyword\">var</span> vm = <span class=\"keyword\">new</span> Vue(&#123;</span></span><br><span class=\"line\"><span class=\"actionscript\">    el: <span class=\"string\">'#app'</span>,</span></span><br><span class=\"line\">    data: &#123;</span><br><span class=\"line\"><span class=\"actionscript\">      text: <span class=\"string\">'the sample'</span>,</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">  &#125;);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"v-model\"><a href=\"#v-model\" class=\"headerlink\" title=\"v-model\"></a>v-model</h2><ul>\n<li>表單的元件可透過 <code>v-model</code> 來進行資料的「雙向」綁定，並會根據不同的表單類別來更新元素的內容。表面上看似神奇，只要輸入綁定的區域就可以同步顯示資料，但實際上 Vue 在背後負責監聽網頁的事件與更新實體的內容。 (M-V-VM)。</li>\n<li><code>v-model</code> 不會處理表單元件的預設值，如：<code>checked</code>/<code>selected</code> 等，表單內的值一律由綁定的資料來決定。</li>\n<li><code>v-model</code> 指令中的屬性就是 <code>data</code> 中 <code>text</code> 的屬性，所以可以透過指令的設定，控制所指定的資料內容。</li>\n</ul>\n<h3 id=\"v-model-使用的範圍\"><a href=\"#v-model-使用的範圍\" class=\"headerlink\" title=\"v-model 使用的範圍\"></a>v-model 使用的範圍</h3><p>你可以用 <code>v-model</code> 指令在表單 <code>&lt;input&gt;</code>、<code>&lt;textarea&gt;</code> 及 <code>&lt;select&gt;</code> 元素上創建雙向數據綁定。</p>\n<h4 id=\"example\"><a href=\"#example\" class=\"headerlink\" title=\"example\"></a>example</h4><ul>\n<li>input</li>\n</ul>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"form\"</span> <span class=\"attr\">id</span>=<span class=\"string\">\"app\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span>message is :&#123;&#123; msg &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">br</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text\"</span> <span class=\"attr\">placeholder</span>=<span class=\"string\">\"edit me\"</span> <span class=\"attr\">v-model</span>=<span class=\"string\">\"msg\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>checkbox</li>\n</ul>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"checkbox\"</span> <span class=\"attr\">id</span>=<span class=\"string\">\"app2\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">label</span> <span class=\"attr\">for</span>=<span class=\"string\">\"checkbox\"</span>&gt;</span>&#123;&#123; checkbox&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"checkbox\"</span> <span class=\"attr\">id</span>=<span class=\"string\">\"checkbox\"</span> <span class=\"attr\">v-model</span>=<span class=\"string\">\"checked\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>checkboxes</li>\n</ul>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"checkboxes\"</span> <span class=\"attr\">id</span>=<span class=\"string\">\"app3\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">label</span> <span class=\"attr\">for</span>=<span class=\"string\">\"checkbox\"</span>&gt;</span>Jack <span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"checkbox\"</span> <span class=\"attr\">id</span>=<span class=\"string\">\"jack\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"jack\"</span> <span class=\"attr\">v-model</span>=<span class=\"string\">\"checkedNames\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">label</span> <span class=\"attr\">for</span>=<span class=\"string\">\"checkbox\"</span>&gt;</span>Mary <span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"checkbox\"</span> <span class=\"attr\">id</span>=<span class=\"string\">\"mary\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"mary\"</span> <span class=\"attr\">v-model</span>=<span class=\"string\">\"checkedNames\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">label</span> <span class=\"attr\">for</span>=<span class=\"string\">\"checkbox\"</span>&gt;</span>Tom <span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"checkbox\"</span> <span class=\"attr\">id</span>=<span class=\"string\">\"tom\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"tom\"</span> <span class=\"attr\">v-model</span>=<span class=\"string\">\"checkedNames\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">br</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span>Checked Name: &#123;&#123; checkedNames &#125;&#125; 狀態<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>radio</li>\n</ul>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"radio\"</span> <span class=\"attr\">id</span>=<span class=\"string\">\"app4\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">label</span> <span class=\"attr\">for</span>=<span class=\"string\">\"one\"</span>&gt;</span> One <span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"radio\"</span> <span class=\"attr\">id</span>=<span class=\"string\">\"one\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"One\"</span> <span class=\"attr\">v-model</span>=<span class=\"string\">\"picked\"</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">label</span> <span class=\"attr\">for</span>=<span class=\"string\">\"two\"</span>&gt;</span> Two <span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"radio\"</span> <span class=\"attr\">id</span>=<span class=\"string\">\"two\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"Two\"</span> <span class=\"attr\">v-model</span>=<span class=\"string\">\"picked\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">br</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span>Picked: &#123;&#123;picked&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>select</li>\n</ul>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"select\"</span> <span class=\"attr\">id</span>=<span class=\"string\">\"app5\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">select</span> <span class=\"attr\">v-model</span>=<span class=\"string\">\"selected\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">option</span>&gt;</span>A<span class=\"tag\">&lt;/<span class=\"name\">option</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">option</span>&gt;</span>B<span class=\"tag\">&lt;/<span class=\"name\">option</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">option</span>&gt;</span>C<span class=\"tag\">&lt;/<span class=\"name\">option</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">select</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span>Selected: &#123;&#123;selected&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p><a href=\"https://codepen.io/hnzxewqw/pen/ZEbOoGx\" target=\"_blank\" rel=\"noopener\">範例 CodePen</a></p>\n<blockquote>\n<p>v-model 會忽略所有表單元素的 <code>value</code>、<code>checked</code>、<code>selected</code> 的屬性初始值。</p>\n</blockquote>\n<p><a href=\"https://cn.vuejs.org/v2/guide/forms.html#%E5%9C%A8%E7%BB%84%E4%BB%B6%E4%B8%8A%E4%BD%BF%E7%94%A8-v-model\" target=\"_blank\" rel=\"noopener\">官網</a>註明 v-model 對應的類別與使用的屬性與事件：</p>\n<ul>\n<li><code>text</code> 和 <code>textarea</code> 元素使用 value 屬性和 <code>input</code> 事件。</li>\n<li><code>checkbox</code> 和 <code>radio</code> 使用 checked 屬性和 <code>change</code> 事件。</li>\n<li><code>select</code> 字段將 value 作為 prop 並將 <code>change</code> 作為事件。</li>\n</ul>\n<blockquote>\n<p>個人目前在 <code>input</code> 跟 <code>select</code> 最常使用 v-model，並且只要綁定 v-model 後，在 data 中就要同步加入該屬性。</p>\n</blockquote>\n<h2 id=\"其他資料綁定的指令\"><a href=\"#其他資料綁定的指令\" class=\"headerlink\" title=\"其他資料綁定的指令\"></a>其他資料綁定的指令</h2><p>除了這兩個以外還有另外的指令可以把資料內容顯示於網頁。</p>\n<h2 id=\"v-text\"><a href=\"#v-text\" class=\"headerlink\" title=\"v-text\"></a>v-text</h2><p>用來渲染純文字</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">v-text</span>=<span class=\"string\">\"text\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"v-html\"><a href=\"#v-html\" class=\"headerlink\" title=\"v-html\"></a>v-html</h2><p>用來渲染 HTML 解析後的內容，並新增 html 標籤到網頁上。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">v-html</span>=<span class=\"string\">\"text\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>兩個透過 console 檢查，都會顯示：<code>&lt;div&gt;the sample&lt;/div&gt;</code></p>\n</blockquote>\n<p><a href=\"https://codepen.io/hnzxewqw/pen/OJyXNbE\" target=\"_blank\" rel=\"noopener\">CodePen</a></p>\n<p>參考文章</p>\n<p><a href=\"https://cythilya.github.io/2017/04/14/vue-data-v-model/\" target=\"_blank\" rel=\"noopener\">Vue.js: data、v-model 與雙向綁定</a></p>\n<p><a href=\"https://cn.vuejs.org/v2/guide/forms.html#%E5%9C%A8%E7%BB%84%E4%BB%B6%E4%B8%8A%E4%BD%BF%E7%94%A8-v-model\" target=\"_blank\" rel=\"noopener\">Vue 官網</a></p>\n","categories":["vue.js Note"],"tags":["vue.js"]},{"title":"JQuery 筆記 - datepicker 與 timepicker 套件練習","url":"/jQuery-Note/20200414/1101598249/","content":"<p><img src=\"https://images.unsplash.com/photo-1506784365847-bbad939e9335?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=crop&w=1348&q=80\" alt=\"calender\"></p>\n<p>還記得之前挑戰<a href=\"https://w3c.hexschool.com/blog/bde2f503\" target=\"_blank\" rel=\"noopener\">旅館訂房網站</a>頁面，手刻月曆真是花了很長的時間，不過也首次見識到 flex 排版的威力。</p>\n<p>後來才知道有月曆跟時間的套件…就來記錄一下使用的方式。</p>\n<h2 id=\"匯入套件\"><a href=\"#匯入套件\" class=\"headerlink\" title=\"匯入套件\"></a>匯入套件</h2><p>如果想要修改月曆配色，可以使用 cdn 或<a href=\"https://jqueryui.com/resources/download/jquery-ui-1.12.1.zip\" target=\"_blank\" rel=\"noopener\">官網</a>下載套件或是 <strong>jQuery UI CSS cdn</strong></p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">rel</span>=<span class=\"string\">\"stylesheet\"</span> <span class=\"attr\">href</span>=<span class=\"string\">\"./jquery-ui-1.12.1/jquery-ui.css\"</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>我是下載整包檔案</p>\n</blockquote>\n<h2 id=\"datepicker\"><a href=\"#datepicker\" class=\"headerlink\" title=\"datepicker\"></a>datepicker</h2><p>datepicker cdnjs <a href=\"https://cdnjs.com/libraries/datepicker\" target=\"_blank\" rel=\"noopener\">https://cdnjs.com/libraries/datepicker</a></p>\n<p>我這次是選擇用 jQuery UI 的 <a href=\"https://jqueryui.com/datepicker/\" target=\"_blank\" rel=\"noopener\">datepicker 套件</a>，進入頁面後可以在右側欄選擇喜歡的月曆的出現形式，使用的前提是要搭配 <code>input</code>，<code>type=&quot;text&quot;</code>，雖然原本 input 就有預設 <code>date</code> 類型，但樣式太醜，所以才用此套件。</p>\n<p><strong>官網範例程式碼</strong></p>\n<p>HTML</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>Date: <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text\"</span> <span class=\"attr\">id</span>=<span class=\"string\">\"datepicker\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>javascript</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">  $( <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    $( <span class=\"string\">\"#datepicker\"</span> ).datepicker();</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&lt;<span class=\"regexp\">/script&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>預設顯示為 日/月/年，但我比較喜歡年/月/日，官網也提供修改的方式：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\">$(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  $(<span class=\"string\">\"#datepicker\"</span>).datepicker(&#123;</span><br><span class=\"line\">    dateFormat: <span class=\"string\">\"yy-mm-dd\"</span>, <span class=\"comment\">//修改顯示順序</span></span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"timepicker\"><a href=\"#timepicker\" class=\"headerlink\" title=\"timepicker\"></a>timepicker</h2><p>我是找這個<a href=\"https://timepicker.co/\" target=\"_blank\" rel=\"noopener\">套件</a>，</p>\n<p>timepicker cdnjs <a href=\"https://cdnjs.com/libraries/timepicker\" target=\"_blank\" rel=\"noopener\">https://cdnjs.com/libraries/timepicker</a></p>\n<p>跟 datepicker 很類似，一樣先參考官網程式碼，再修正成喜歡的樣式跟內容：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\">$(<span class=\"string\">\".timepicker\"</span>).timepicker(&#123;</span><br><span class=\"line\">  timeFormat: <span class=\"string\">\"h:mm p\"</span>, <span class=\"comment\">// 時間隔式</span></span><br><span class=\"line\">  interval: <span class=\"number\">60</span>, <span class=\"comment\">//時間間隔</span></span><br><span class=\"line\">  minTime: <span class=\"string\">\"10\"</span>, <span class=\"comment\">//最小時間</span></span><br><span class=\"line\">  maxTime: <span class=\"string\">\"6:00pm\"</span>, <span class=\"comment\">//最大時間</span></span><br><span class=\"line\">  defaultTime: <span class=\"string\">\"11\"</span>, <span class=\"comment\">//預設起始時間</span></span><br><span class=\"line\">  startTime: <span class=\"string\">\"10:00\"</span>, <span class=\"comment\">// 開始時間</span></span><br><span class=\"line\">  dynamic: <span class=\"literal\">true</span>, <span class=\"comment\">//是否顯示項目，使第一個項目按時間順序緊接在所選時間之後</span></span><br><span class=\"line\">  dropdown: <span class=\"literal\">true</span>, <span class=\"comment\">//是否顯示時間條目的下拉列表</span></span><br><span class=\"line\">  scrollbar: <span class=\"literal\">true</span>, <span class=\"comment\">//是否顯示捲軸</span></span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>一樣要同步寫入 CSS，才會在點擊 <code>input</code> 後出現在下方。</p>\n<blockquote>\n<p>datepicker 跟 timepicker 的樣式都是直接從預設樣式修改成要的，不是自己另外寫。</p>\n</blockquote>\n<p>Codepen <a href=\"https://codepen.io/hnzxewqw/pen/LYppObK\" target=\"_blank\" rel=\"noopener\">https://codepen.io/hnzxewqw/pen/LYppObK</a></p>\n","categories":["jQuery Note"],"tags":["JavaScript","jQuery"]},{"title":"JS 筆記 - Object & Array 物件與陣列的綜合應用","url":"/JavaScript-Note/20200413/690135993/","content":"<p><img src=\"https://firebasestorage.googleapis.com/v0/b/timpicturespace.appspot.com/o/JavaScript%20note-01.jpg?alt=media&token=7bee0261-72ac-4de4-9f5a-f39d58735b7d\" alt=\"JavaScript Note\"></p>\n<p>本篇記錄物件與陣列的綜合應用，會使用到以下內容，順便複習一下寫法：</p>\n<p><strong>變數 var</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"number\">1</span>;</span><br></pre></td></tr></table></figure>\n\n<p><strong>函式 function</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">name</span>(<span class=\"params\">params</span>) </span>&#123;&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>陣列 array</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> array = [<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>],</span><br></pre></td></tr></table></figure>\n\n<p><strong>物件 object</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> object = &#123;</span><br><span class=\"line\">  text: <span class=\"string\">\"string\"</span>,</span><br><span class=\"line\">  number: <span class=\"number\">10</span>,</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h2 id=\"物件-函式\"><a href=\"#物件-函式\" class=\"headerlink\" title=\"物件 + 函式\"></a>物件 + 函式</h2><p>物件內建立函式，可以透過函式的功能來做運算，讓物件成為一系列的內容，會相當好用。<br>以一個家庭為例，程式碼如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> home = &#123;</span><br><span class=\"line\">  dad: <span class=\"string\">\"Tim\"</span>,</span><br><span class=\"line\">  mom: <span class=\"string\">\"Min\"</span>,</span><br><span class=\"line\">  son: [<span class=\"string\">\"Joshua\"</span>, <span class=\"string\">\"John\"</span>],</span><br><span class=\"line\">  chair: <span class=\"number\">4</span>,</span><br><span class=\"line\">  table: <span class=\"number\">3</span>,</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>如果要在物件內加入函式，若要顯示：「Tim，該吃晚餐囉！」可以這樣寫：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> home = &#123;</span><br><span class=\"line\">  dad: <span class=\"string\">\"Tim\"</span>,</span><br><span class=\"line\">  mom: <span class=\"string\">\"Min\"</span>,</span><br><span class=\"line\">  son: [<span class=\"string\">\"Joshua\"</span>, <span class=\"string\">\"John\"</span>],</span><br><span class=\"line\">  chair: <span class=\"number\">4</span>,</span><br><span class=\"line\">  table: <span class=\"number\">3</span>,</span><br><span class=\"line\">  dinner: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//建立函式</span></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(home.dad + <span class=\"string\">\"，該吃晚餐囉!\"</span>); <span class=\"comment\">//函式執行內容</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">home.dinner(); <span class=\"comment\">//執行物件 home 裡面的函式 dinner 的內容</span></span><br></pre></td></tr></table></figure>\n\n<p>就會得到 Tim，該吃晚餐囉！的結果</p>\n<hr>\n<h3 id=\"存取物件中函式資料\"><a href=\"#存取物件中函式資料\" class=\"headerlink\" title=\"存取物件中函式資料\"></a>存取物件中函式資料</h3><p>倘若今天要計算物件裡面桌子椅子的總數量，可以在物件中建立另一個函式，做為計算的功能，可以這樣寫：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> home = &#123;</span><br><span class=\"line\">  dad: <span class=\"string\">\"Tim\"</span>,</span><br><span class=\"line\">  mom: <span class=\"string\">\"Min\"</span>,</span><br><span class=\"line\">  son: [<span class=\"string\">\"Joshua\"</span>, <span class=\"string\">\"John\"</span>],</span><br><span class=\"line\">  chair: <span class=\"number\">4</span>,</span><br><span class=\"line\">  table: <span class=\"number\">3</span>,</span><br><span class=\"line\">  dinner: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//建立函式</span></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(home.dad + <span class=\"string\">\"，該吃晚餐囉!\"</span>); <span class=\"comment\">//函式執行內容</span></span><br><span class=\"line\">  &#125;, <span class=\"comment\">//新增新物件要用逗點隔開</span></span><br><span class=\"line\">  furniture: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> furnitureNum = home.chair + home.table; <span class=\"comment\">//增加一個區域變數，把物件中的要抓取的屬性放進來</span></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(furnitureNum); <span class=\"comment\">//執行函式中的區域變數內容</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">home.dinner(); <span class=\"comment\">//執行物件 home 裡面的函式 dinner 的內容 ()</span></span><br><span class=\"line\">home.furnitureNum(); <span class=\"comment\">//執行物件 home 裡面的函式中的區域變數，結果會得到 7</span></span><br></pre></td></tr></table></figure>\n\n<hr>\n<h2 id=\"陣列-物件\"><a href=\"#陣列-物件\" class=\"headerlink\" title=\"陣列 + 物件\"></a>陣列 + 物件</h2><p>可以利用陣列整合資料的觀念，把物件變成陣列資料，如果今天有兩個家庭為例，程式碼會如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> homes = [</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    dad: <span class=\"string\">\"Tim\"</span>,</span><br><span class=\"line\">    mom: <span class=\"string\">\"Min\"</span>,</span><br><span class=\"line\">    son: [<span class=\"string\">\"Joshua\"</span>, <span class=\"string\">\"John\"</span>],</span><br><span class=\"line\">    chair: <span class=\"number\">4</span>,</span><br><span class=\"line\">    table: <span class=\"number\">3</span>,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    dad: <span class=\"string\">\"Jerry\"</span>,</span><br><span class=\"line\">    mom: <span class=\"string\">\"Nancy\"</span>,</span><br><span class=\"line\">    son: [<span class=\"string\">\"Ethan\"</span>, <span class=\"string\">\"Elijah\"</span>, <span class=\"string\">\"Emma\"</span>],</span><br><span class=\"line\">    chair: <span class=\"number\">5</span>,</span><br><span class=\"line\">    table: <span class=\"number\">4</span>,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">];</span><br></pre></td></tr></table></figure>\n\n<p><em>因為是物件，所以在大括號中間還是要用逗號隔開</em><br><em>陣列中加入物件，物件前面就不用再寫一個變數名稱，因為直接在陣列裡面變成資料了</em></p>\n<hr>\n<h3 id=\"存取陣列中的物件資料\"><a href=\"#存取陣列中的物件資料\" class=\"headerlink\" title=\"存取陣列中的物件資料\"></a>存取陣列中的物件資料</h3><p>延續上方程式碼，今天要存取物件資料的寫法如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> homes = [</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    dad: <span class=\"string\">\"Tim\"</span>,</span><br><span class=\"line\">    mom: <span class=\"string\">\"Min\"</span>,</span><br><span class=\"line\">    son: [<span class=\"string\">\"Joshua\"</span>, <span class=\"string\">\"John\"</span>],</span><br><span class=\"line\">    chair: <span class=\"number\">4</span>,</span><br><span class=\"line\">    table: <span class=\"number\">3</span>,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    dad: <span class=\"string\">\"Jerry\"</span>,</span><br><span class=\"line\">    mom: <span class=\"string\">\"Nancy\"</span>,</span><br><span class=\"line\">    son: [<span class=\"string\">\"Ethan\"</span>, <span class=\"string\">\"Elijah\"</span>, <span class=\"string\">\"Emma\"</span>],</span><br><span class=\"line\">    chair: <span class=\"number\">5</span>,</span><br><span class=\"line\">    table: <span class=\"number\">4</span>,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(homes[<span class=\"number\">0</span>].dad);</span><br><span class=\"line\"><span class=\"comment\">//會找到陣列中第一筆物件的資料，再找到裡面的 dad 的值，結果會是 Tim</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(homes[<span class=\"number\">1</span>].son[<span class=\"number\">2</span>]);</span><br><span class=\"line\"><span class=\"comment\">//會找到陣列中第二筆物件的資料，再找到裡面的 son 的第三個值，結果會是 Elijah</span></span><br></pre></td></tr></table></figure>\n\n<hr>\n<h2 id=\"心得\"><a href=\"#心得\" class=\"headerlink\" title=\"心得\"></a>心得</h2><ol>\n<li>要把變數、函式、陣列、物件四個寫法搞清楚。</li>\n<li>因為四個東西有相關聯，要把不同的存取方法搞清楚，也要把彼此程式綜合應用時讀取的方式也要搞清楚，</li>\n<li>存取資料的方法要想得直覺一點，不要想得太複雜，不然會卡關。</li>\n<li>這一篇要連同前面的單元重複複習幾次，要熟悉。</li>\n</ol>\n","categories":["JavaScript Note"],"tags":["JavaScript"]},{"title":"JS 筆記 - 控制判斷 (比較運算子、邏輯運算子)","url":"/JavaScript-Note/20200413/2524097541/","content":"<p><img src=\"https://firebasestorage.googleapis.com/v0/b/timpicturespace.appspot.com/o/JavaScript%20note-01.jpg?alt=media&token=7bee0261-72ac-4de4-9f5a-f39d58735b7d\" alt=\"JavaScript Note\"></p>\n<p>此次內容是 JavaScript 的控制判斷，<strong>比較運算子</strong>跟<strong>邏輯運算子</strong>的筆記。<br>用途會是在驗證資料是否有與原本設定的條件相同，例如：今天填寫一個表單，如果勾選「是」，就可以繼續往下填寫之類的控制判斷。</p>\n<hr>\n<h2 id=\"運算子\"><a href=\"#運算子\" class=\"headerlink\" title=\"運算子\"></a>運算子</h2><h3 id=\"比較運算子\"><a href=\"#比較運算子\" class=\"headerlink\" title=\"比較運算子 ==\"></a>比較運算子 <code>==</code></h3><p>用來比較 a 與 b 是否為正確或不正確，例如：設定兩個變數比較他們的關係。<br>會發現有兩個地方不同， <code>=</code> 跟 <code>==</code>， <code>=</code> 的用法是給予變數一個值； <code>==</code> 他是用比較兩個數值之間的關係是否為 true 還是 false。</p>\n<p>然後有兩種寫法：</p>\n<blockquote>\n<p><code>==</code> 等於</p>\n<p><code>!==</code> 不等於</p>\n</blockquote>\n<p>簡單的範例：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"number\">1</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> b = <span class=\"number\">1</span>;</span><br><span class=\"line\">a == b; <span class=\"comment\">//結果會得到 true</span></span><br></pre></td></tr></table></figure>\n\n<p>反之 <code>!==</code></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"number\">1</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> b = <span class=\"number\">1</span>;</span><br><span class=\"line\">a !== b; <span class=\"comment\">//結果會得到 false</span></span><br></pre></td></tr></table></figure>\n\n<hr>\n<p>加上情境，倘若今天一間餐廳有當月壽星禮，可以這樣做控制判斷</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> myBirthdayMonth = <span class=\"number\">3</span>; <span class=\"comment\">//我的生日月份</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> nowMonth = <span class=\"number\">12</span>; <span class=\"comment\">//本月壽星</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> birthdayMonthCheck = myBirthdayMonth == nowMonth; <span class=\"comment\">//判斷我是否為本月壽星</span></span><br><span class=\"line\"><span class=\"built_in\">document</span>.getElementById(<span class=\"string\">\"birthdayId\"</span>).textContent = birthdayMonthCheck; <span class=\"comment\">//本月為 12 月，我是 3 月壽星，故結果會得到 false</span></span><br></pre></td></tr></table></figure>\n\n<hr>\n<h3 id=\"嚴謹模式\"><a href=\"#嚴謹模式\" class=\"headerlink\" title=\"嚴謹模式 ===\"></a>嚴謹模式 <code>===</code></h3><p>因為 <code>==</code> 比較不嚴謹，如果有些資料要確認型別，就會用到 <code>===</code>，假如下方程式碼：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">1</span> == <span class=\"string\">\"1\"</span>;</span><br><span class=\"line\"><span class=\"comment\">//會得到結果是 true，可是一邊是數字，另一邊是字串，資料型別不同啊?</span></span><br></pre></td></tr></table></figure>\n\n<p>因為 <code>==</code> 會在比較時發現值如果數字跟字串長一樣的時候，會自動轉型，被比較成一樣，所以如果剛好遇到類似的數值跟字串內容會一樣時，為了讓資料更明確的比較，就會用到嚴謹模式 <code>===</code>，例如：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">1</span> === <span class=\"string\">\"1\"</span>;</span><br><span class=\"line\"><span class=\"comment\">//得到的結果就會是 false</span></span><br></pre></td></tr></table></figure>\n\n<hr>\n<h3 id=\"大於-gt-、小於-lt-、大於等於-gt-、小於等於-gt\"><a href=\"#大於-gt-、小於-lt-、大於等於-gt-、小於等於-gt\" class=\"headerlink\" title=\"大於 &gt;、小於 &lt;、大於等於 &gt;=、小於等於 =&gt;\"></a>大於 <code>&gt;</code>、小於 <code>&lt;</code>、大於等於 <code>&gt;=</code>、小於等於 <code>=&gt;</code></h3><p>用法就跟字面一樣，可以自己玩一下，例如：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">3</span> &gt; <span class=\"number\">2</span>;</span><br><span class=\"line\"><span class=\"number\">7</span> &lt; <span class=\"number\">8</span>;</span><br><span class=\"line\"><span class=\"number\">13</span> &gt;= <span class=\"number\">13</span>;</span><br><span class=\"line\"><span class=\"number\">15</span> &lt;= <span class=\"number\">21</span>;</span><br></pre></td></tr></table></figure>\n\n<p>以上結果都會得到 true <del>(廢話)</del></p>\n<hr>\n<h2 id=\"邏輯運算式-amp-amp-and-、-or-、-not\"><a href=\"#邏輯運算式-amp-amp-and-、-or-、-not\" class=\"headerlink\" title=\"邏輯運算式 &amp;&amp; (and)、|| (or)、! (not)\"></a>邏輯運算式 &amp;&amp; (and)、|| (or)、! (not)</h2><p>要滿足預設的兩個條件要用 and，這樣寫： <code>&amp;&amp;</code>，只要滿足其中一個條件用 or ，這樣寫： <code>||</code>，如果要表示「不是」則是用 <code>!</code>。</p>\n<hr>\n<h3 id=\"amp-amp-所有條件皆符合\"><a href=\"#amp-amp-所有條件皆符合\" class=\"headerlink\" title=\"&amp;&amp; 所有條件皆符合\"></a>&amp;&amp; 所有條件皆符合</h3><p>以搭飛機為例，出入境都需要<strong>機票</strong>跟<strong>護照</strong>的話，程式碼如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> passport = <span class=\"literal\">true</span>; <span class=\"comment\">//有帶護照</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> ticket = <span class=\"literal\">true</span>; <span class=\"comment\">//有帶機票</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> pass = passport == <span class=\"literal\">true</span> &amp;&amp; ticket == <span class=\"literal\">true</span>; <span class=\"comment\">// 出入境條件</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(pass); <span class=\"comment\">// 結果會是 true</span></span><br></pre></td></tr></table></figure>\n\n<p>如果沒有機票的話，程式碼如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> passport = <span class=\"literal\">true</span>; <span class=\"comment\">//有帶護照</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> ticket = <span class=\"literal\">false</span>; <span class=\"comment\">//沒帶機票</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> pass = passport == <span class=\"literal\">true</span> &amp;&amp; ticket == <span class=\"literal\">true</span>; <span class=\"comment\">// 出入境條件</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(pass); <span class=\"comment\">// 結果會是 false</span></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>在條件上可以自行定義多寡，但建議一到兩個就好，最多三個，不然程式碼會太長。</p>\n</blockquote>\n<hr>\n<h3 id=\"符合一項條件\"><a href=\"#符合一項條件\" class=\"headerlink\" title=\"|| 符合一項條件\"></a>|| 符合一項條件</h3><p>以餐廳優惠為例，餐廳很多都有當月壽星禮，程式碼如下：</p>\n<p>剛好是當月壽星：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//餐廳折扣優惠</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> myBirthdMonth = <span class=\"literal\">true</span>; <span class=\"comment\">//當月壽星禮</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> fbTag = <span class=\"literal\">true</span>; <span class=\"comment\">//臉書打卡</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> discount = myBirthdMonth == <span class=\"literal\">true</span> || fbTag == <span class=\"literal\">true</span>; <span class=\"comment\">// 符合折扣條件</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(discount); <span class=\"comment\">// 結果會是 true</span></span><br></pre></td></tr></table></figure>\n\n<hr>\n<h3 id=\"不是\"><a href=\"#不是\" class=\"headerlink\" title=\"! 不是\"></a>! 不是</h3><p>Not 會把原本的意思改成不是的意思，例如：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">2</span> &lt; <span class=\"number\">3</span>; <span class=\"comment\">//true</span></span><br><span class=\"line\"></span><br><span class=\"line\">!(<span class=\"number\">2</span> &lt; <span class=\"number\">3</span>); <span class=\"comment\">// false</span></span><br></pre></td></tr></table></figure>\n","categories":["JavaScript Note"],"tags":["JavaScript"]},{"title":"CSS 筆記 - 使用 overflow 顯示一個捲軸與自訂顏色","url":"/CSS-Note/20200410/3203726250/","content":"<p><img src=\"https://images.unsplash.com/photo-1580501170888-80668882ca0c?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=crop&w=1350&q=80\" alt=\"scroll\"></p>\n<blockquote>\n<p>Scroll 英文叫做滾動，在網頁中是捲軸。</p>\n</blockquote>\n<p>這次一樣是紀錄工作遇到的問題，目前的專案是一個後臺開發，遇到一個 table 版面，資料會從 API 回傳數據後填入，所以會有很多筆，但因為版面的關係，PM 希望 table 表格可以自己使用捲軸，這次用到 CSS 的 overflow 的語法。</p>\n<h2 id=\"overflow\"><a href=\"#overflow\" class=\"headerlink\" title=\"overflow\"></a>overflow</h2><p>之前過用 <code>overflow:hidden;</code> 是用<a href=\"https://medium.com/@smallmoney1224/%E5%BE%9E0%E9%96%8B%E5%A7%8B%E8%A4%87%E7%BF%92-html-css-javascript-%E5%9C%96%E7%89%87%E5%8F%96%E4%BB%A3%E6%96%87%E5%AD%97-with-h1-logo-be56c85159a4\" target=\"_blank\" rel=\"noopener\">圖片取代文字</a>而已…</p>\n<p>透過這次專案稍微研究一下 overflow 相關資料，才知道有以下屬性：</p>\n<p>overflow 屬性用來定義元素超過某個範圍的時候該如何呈現，例如圖片超過預設區域的大小、文字長度超出原本的範圍等，這時候可以透過 CSS overflow 屬性來制定該區塊是否顯示 scrollbar（卷軸）或者是否要隱藏該元素。</p>\n<ul>\n<li><p><code>overflow: auto;</code> 預設會自動使用 x, y 捲軸</p>\n<ul>\n<li>overflow-x 產生 X 軸。</li>\n<li>overflew-y 產生 Y 軸。</li>\n</ul>\n</li>\n<li><p><code>overflow:visible;</code> 顯示的文字或圖片會直接超出範圍，不使用捲軸。</p>\n</li>\n<li><p><code>overflow:hidden;</code> 自動隱藏超出的文字或圖片。</p>\n</li>\n<li><p><code>overflow:scroll;</code> 自動產生捲軸。</p>\n</li>\n<li><p><code>overflow:inherit;</code> 繼承自父元素的可見性</p>\n</li>\n</ul>\n<p>這次要做的專案就是在特定範圍高度內要產生一個 scroll 捲軸，但在嘗試的時候發現以下幾件事情：</p>\n<ol>\n<li>一定要寫在<code>&lt;div&gt;</code> 上，不是寫在 <code>&lt;table&gt;</code> 上。</li>\n<li>要限制高度，資料超過就會自動產生 scroll，但有些版面不會。</li>\n</ol>\n<p>例如畫面類似這樣的樣式：</p>\n<p><img src=\"https://firebasestorage.googleapis.com/v0/b/timpicturespace.appspot.com/o/overflow-01.png?alt=media&token=7ed8d6b1-24f8-4cb9-8670-c3f3e911c1ad\" alt=\"sample\"></p>\n<p><strong>HTML</strong></p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"wrap\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"topbox\"</span>&gt;</span></span><br><span class=\"line\">    this is header</span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"boxBottom\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"boxLeft\"</span>&gt;</span></span><br><span class=\"line\">      // overflow 要下在這一層</span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>...lorem...<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"boxRight\"</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">img</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">src</span>=<span class=\"string\">\"https://images.unsplash.com/photo-1558981806-ec527fa84c39?ixlib=rb-1.2.1&amp;ixid=eyJhcHBfaWQiOjEyMDd9&amp;auto=format&amp;fit=crop&amp;w=1350&amp;q=80\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">alt</span>=<span class=\"string\">\"\"</span></span></span><br><span class=\"line\"><span class=\"tag\">      /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>overflow 下在這個地方 (因 CSS 有點長，只擷取片段程式碼)。</p>\n<p><strong>CSS</strong></p>\n<figure class=\"highlight css\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.boxLeft</span> &#123;</span><br><span class=\"line\">  height: 400px; //限定高度</span><br><span class=\"line\">  overflow-y: auto; //自動產生 y 軸捲軸</span><br><span class=\"line\">  <span class=\"selector-tag\">p</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">line-height</span>: <span class=\"number\">1.5</span>;</span><br><span class=\"line\">    <span class=\"attribute\">padding</span>: <span class=\"number\">1em</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>這樣就可以達到想要的效果了。</p>\n<p>可以把其他屬性複製起來，套用在 overflow 的地方，看一下效果!</p>\n<p>codepen <a href=\"https://codepen.io/hnzxewqw/pen/LYpYQRK\" target=\"_blank\" rel=\"noopener\">https://codepen.io/hnzxewqw/pen/LYpYQRK</a></p>\n<h2 id=\"同場加映-修改-ScrollBar-樣式\"><a href=\"#同場加映-修改-ScrollBar-樣式\" class=\"headerlink\" title=\"同場加映 - 修改 ScrollBar 樣式\"></a>同場加映 - 修改 ScrollBar 樣式</h2><p><code>table</code> 表格若遇到很多資料，但版面有限時如何增加捲軸?</p>\n<p>目前有一個捲軸程式碼如下：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"wrap\"</span>&gt;</span></span><br><span class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>Our Family<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span><br><span class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"tableGroup\"</span> <span class=\"attr\">id</span>=<span class=\"string\">\"style-3\"</span>&gt;</span></span><br><span class=\"line\">     <span class=\"tag\">&lt;<span class=\"name\">table</span>&gt;</span></span><br><span class=\"line\">       <span class=\"tag\">&lt;<span class=\"name\">thead</span>&gt;</span></span><br><span class=\"line\">         <span class=\"tag\">&lt;<span class=\"name\">tr</span>&gt;</span></span><br><span class=\"line\">           <span class=\"tag\">&lt;<span class=\"name\">th</span>&gt;</span>INDEX<span class=\"tag\">&lt;/<span class=\"name\">th</span>&gt;</span></span><br><span class=\"line\">           <span class=\"tag\">&lt;<span class=\"name\">th</span>&gt;</span>NAME<span class=\"tag\">&lt;/<span class=\"name\">th</span>&gt;</span></span><br><span class=\"line\">           <span class=\"tag\">&lt;<span class=\"name\">th</span>&gt;</span>JOB<span class=\"tag\">&lt;/<span class=\"name\">th</span>&gt;</span></span><br><span class=\"line\">           <span class=\"tag\">&lt;<span class=\"name\">th</span>&gt;</span>OTHER<span class=\"tag\">&lt;/<span class=\"name\">th</span>&gt;</span></span><br><span class=\"line\">         <span class=\"tag\">&lt;/<span class=\"name\">tr</span>&gt;</span></span><br><span class=\"line\">       <span class=\"tag\">&lt;/<span class=\"name\">thead</span>&gt;</span></span><br><span class=\"line\">       <span class=\"tag\">&lt;<span class=\"name\">tbody</span>&gt;</span></span><br><span class=\"line\">         <span class=\"tag\">&lt;<span class=\"name\">tr</span>&gt;</span></span><br><span class=\"line\">           <span class=\"tag\">&lt;<span class=\"name\">td</span>&gt;</span>01<span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></span><br><span class=\"line\">           <span class=\"tag\">&lt;<span class=\"name\">td</span>&gt;</span>Tim<span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></span><br><span class=\"line\">           <span class=\"tag\">&lt;<span class=\"name\">td</span>&gt;</span>F2E<span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></span><br><span class=\"line\">           <span class=\"tag\">&lt;<span class=\"name\">td</span>&gt;</span>null<span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></span><br><span class=\"line\">         <span class=\"tag\">&lt;/<span class=\"name\">tr</span>&gt;</span></span><br><span class=\"line\">         <span class=\"tag\">&lt;<span class=\"name\">tr</span>&gt;</span></span><br><span class=\"line\">           <span class=\"tag\">&lt;<span class=\"name\">td</span>&gt;</span>02<span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></span><br><span class=\"line\">           <span class=\"tag\">&lt;<span class=\"name\">td</span>&gt;</span>Mary<span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></span><br><span class=\"line\">           <span class=\"tag\">&lt;<span class=\"name\">td</span>&gt;</span>HR<span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></span><br><span class=\"line\">           <span class=\"tag\">&lt;<span class=\"name\">td</span>&gt;</span>null<span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></span><br><span class=\"line\">         <span class=\"tag\">&lt;/<span class=\"name\">tr</span>&gt;</span></span><br><span class=\"line\">         <span class=\"tag\">&lt;<span class=\"name\">tr</span>&gt;</span></span><br><span class=\"line\">           <span class=\"tag\">&lt;<span class=\"name\">td</span>&gt;</span>03<span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></span><br><span class=\"line\">           <span class=\"tag\">&lt;<span class=\"name\">td</span>&gt;</span>Mike<span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></span><br><span class=\"line\">           <span class=\"tag\">&lt;<span class=\"name\">td</span>&gt;</span>Sales<span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></span><br><span class=\"line\">           <span class=\"tag\">&lt;<span class=\"name\">td</span>&gt;</span>like eating<span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></span><br><span class=\"line\">         <span class=\"tag\">&lt;/<span class=\"name\">tr</span>&gt;</span></span><br><span class=\"line\">         <span class=\"tag\">&lt;<span class=\"name\">tr</span>&gt;</span></span><br><span class=\"line\">           <span class=\"tag\">&lt;<span class=\"name\">td</span>&gt;</span>04<span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></span><br><span class=\"line\">           <span class=\"tag\">&lt;<span class=\"name\">td</span>&gt;</span>Joshua<span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></span><br><span class=\"line\">           <span class=\"tag\">&lt;<span class=\"name\">td</span>&gt;</span>Baby<span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></span><br><span class=\"line\">           <span class=\"tag\">&lt;<span class=\"name\">td</span>&gt;</span>Sleeping<span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></span><br><span class=\"line\">         <span class=\"tag\">&lt;/<span class=\"name\">tr</span>&gt;</span></span><br><span class=\"line\">         <span class=\"tag\">&lt;<span class=\"name\">tr</span>&gt;</span></span><br><span class=\"line\">           <span class=\"tag\">&lt;<span class=\"name\">td</span>&gt;</span>05<span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></span><br><span class=\"line\">           <span class=\"tag\">&lt;<span class=\"name\">td</span>&gt;</span>Min<span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></span><br><span class=\"line\">           <span class=\"tag\">&lt;<span class=\"name\">td</span>&gt;</span>Teacher<span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></span><br><span class=\"line\">           <span class=\"tag\">&lt;<span class=\"name\">td</span>&gt;</span>Like drinking<span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></span><br><span class=\"line\">         <span class=\"tag\">&lt;/<span class=\"name\">tr</span>&gt;</span></span><br><span class=\"line\">         <span class=\"tag\">&lt;<span class=\"name\">tr</span>&gt;</span></span><br><span class=\"line\">           <span class=\"tag\">&lt;<span class=\"name\">td</span>&gt;</span>06<span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></span><br><span class=\"line\">           <span class=\"tag\">&lt;<span class=\"name\">td</span>&gt;</span>Brandon<span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></span><br><span class=\"line\">           <span class=\"tag\">&lt;<span class=\"name\">td</span>&gt;</span>PM<span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></span><br><span class=\"line\">           <span class=\"tag\">&lt;<span class=\"name\">td</span>&gt;</span>Sport<span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></span><br><span class=\"line\">         <span class=\"tag\">&lt;/<span class=\"name\">tr</span>&gt;</span></span><br><span class=\"line\">       <span class=\"tag\">&lt;/<span class=\"name\">tbody</span>&gt;</span></span><br><span class=\"line\">     <span class=\"tag\">&lt;/<span class=\"name\">table</span>&gt;</span></span><br><span class=\"line\">   <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"> <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>可以看到共有六個項目，然後今天 PM 說：<strong>UI 設計稿上最多顯示四筆資料，目前資料超過四筆，請使用捲軸呈現。</strong></p>\n<p>這時用 CSS 就可以辦到此效果，上面有提到如何使用捲軸的方法，這邊就在 <code>table</code> 外面的 <code>div</code> 寫上找到的捲軸設定，一定要在 <code>div</code>，沒辦法放在 <code>table</code> 上。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"tableGroup\"</span> <span class=\"attr\">id</span>=<span class=\"string\">\"style-3\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">table</span>&gt;</span></span><br><span class=\"line\">  ---以下省略---</span><br></pre></td></tr></table></figure>\n\n<p>再把設定帶入 CSS 中，這邊我只修改顏色跟調整 scroll bar 的寬度，可以自行玩玩看。</p>\n<figure class=\"highlight css\"><table><tr><td class=\"code\"><pre><span class=\"line\">//捲軸底色</span><br><span class=\"line\"><span class=\"selector-id\">#style-3</span><span class=\"selector-pseudo\">::-webkit-scrollbar-track</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">-webkit-box-shadow</span>: inset <span class=\"number\">0</span> <span class=\"number\">0</span> <span class=\"number\">6px</span> <span class=\"built_in\">rgba</span>(<span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0.3</span>);</span><br><span class=\"line\">  <span class=\"attribute\">background-color</span>: <span class=\"number\">#ffc0cb</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">//捲軸寬度</span><br><span class=\"line\"><span class=\"selector-id\">#style-3</span><span class=\"selector-pseudo\">::-webkit-scrollbar</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">6px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">background-color</span>: black;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">//捲軸本體顏色</span><br><span class=\"line\"><span class=\"selector-id\">#style-3</span><span class=\"selector-pseudo\">::-webkit-scrollbar-thumb</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">background-color</span>: <span class=\"number\">#bb6573</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>Webkit 可以利用 CSS 修改 Scoll bar 的外觀，有試過其他瀏覽器是不行的，而有時候在使用局部範圍的 <code>overflow: auto</code>，會需要較為纖細的 scroll bar，如果不在意 webkit 以外的瀏覽器，可以試試看這個方法。</p>\n</blockquote>\n<p><strong>注意</strong><br>本範例只有 Webkit 瀏覽器有效，Chrome or Safari，如果要跨瀏覽器的 scrollbar，就建議使用 javascript 或是 jquery 了。</p>\n<p>Codepen <a href=\"https://codepen.io/hnzxewqw/pen/XWmXpMB\" target=\"_blank\" rel=\"noopener\">https://codepen.io/hnzxewqw/pen/XWmXpMB</a></p>\n<hr>\n<p>參考文章：</p>\n<p><a href=\"https://pjchender.github.io/2018/08/30/css-%E6%BB%91%E9%BC%A0%E9%81%B8%E8%BB%B8%E6%BB%BE%E5%8B%95-scroll/\" target=\"_blank\" rel=\"noopener\">[CSS] 滑鼠選軸滾動 scroll</a></p>\n<p><a href=\"https://www.wibibi.com/info.php?tid=157\" target=\"_blank\" rel=\"noopener\">CSS overflow 屬性用法</a></p>\n<p><a href=\"https://codepen.io/devstreak/pen/dMYgeO\" target=\"_blank\" rel=\"noopener\">捲軸改色</a></p>\n<p><a href=\"https://wcc723.github.io/css/2014/12/03/css-scrollbar/\" target=\"_blank\" rel=\"noopener\">Webkit 自定義 Scroll Bar 外觀</a></p>\n","categories":["CSS Note"],"tags":["CSS"]},{"title":"Vue 筆記 - 使用 vue CLI 建立 SPA 專案","url":"/vue-js-Note/20200404/497821688/","content":"<p><img src=\"https://firebasestorage.googleapis.com/v0/b/timpicturespace.appspot.com/o/vueCli-00.png?alt=media&token=fbc73968-437f-40fb-9b00-34d8b2dd69fb\" alt=\"Vue CLI\"></p>\n<p>面對現在正流行的 SPA 專案，若要用原生碼或傳統作法也不是不行，就會變整個專案很大一包，而且程式碼冗長，開發與維護都相當不容易。透過 Vue CLI 建立一個專案，不僅方便快速，且因為 MVVM 的特性，在開發不僅可以專注於資料上，且維護也較為容易。</p>\n<h2 id=\"使用-Vue-CLI-建立專案\"><a href=\"#使用-Vue-CLI-建立專案\" class=\"headerlink\" title=\"使用 Vue CLI 建立專案\"></a>使用 Vue CLI 建立專案</h2><p>VueCLI: A simple CLI (command-line interface) for scaffolding Vue.js projects.<br>整合了 webpack、vue-loader 與其他周邊開發套件 如 Vuex / sass-loader 等的建構工具。</p>\n<h3 id=\"安裝\"><a href=\"#安裝\" class=\"headerlink\" title=\"安裝\"></a>安裝</h3><p>VueCLI 需要先安裝 npm 或 yarn，然後透過指令來進行安裝。</p>\n<figure class=\"highlight cmd\"><table><tr><td class=\"code\"><pre><span class=\"line\">npm install -g @vue/cli</span><br></pre></td></tr></table></figure>\n\n<p>或</p>\n<figure class=\"highlight cmd\"><table><tr><td class=\"code\"><pre><span class=\"line\">yarn global add @vue/cli</span><br></pre></td></tr></table></figure>\n\n<p>我個人是使用 npm 比較習慣，所以我就輸入 npm 指令進行安裝，安裝完畢後再輸入下方指令確認版本號。</p>\n<figure class=\"highlight cmd\"><table><tr><td class=\"code\"><pre><span class=\"line\">vue -V</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>注意：-V 的 V 要大寫，不然會跳錯，目前版本號為 <code>@vue/cli 4.2.3</code></p>\n</blockquote>\n<h3 id=\"開啟專案\"><a href=\"#開啟專案\" class=\"headerlink\" title=\"開啟專案\"></a>開啟專案</h3><p>首先開啟命令列或終端機，輸入</p>\n<figure class=\"highlight cmd\"><table><tr><td class=\"code\"><pre><span class=\"line\">vue create [專案名稱]</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>也就是 vue create newProject，括弧不用打</p>\n</blockquote>\n<p>或者已經在專案目錄中了，那就輸入</p>\n<figure class=\"highlight cmd\"><table><tr><td class=\"code\"><pre><span class=\"line\">vue create .</span><br></pre></td></tr></table></figure>\n<p>cli 就會提示你是否直接在這個目錄中建立專案，選擇 y，並選擇手動建立專案 (Manually select features)，如下圖。</p>\n<p><img src=\"https://firebasestorage.googleapis.com/v0/b/timpicturespace.appspot.com/o/vueCli-01.png?alt=media&token=f6b99f3b-4dc2-474f-bdcd-eecb95900e6f\" alt=\"建立專案\"></p>\n<h3 id=\"選擇套件\"><a href=\"#選擇套件\" class=\"headerlink\" title=\"選擇套件\"></a>選擇套件</h3><h4 id=\"常用套件選擇\"><a href=\"#常用套件選擇\" class=\"headerlink\" title=\"常用套件選擇\"></a>常用套件選擇</h4><p>選 Babel、Vuex、CSS Pre-processors 以及 Linter / Formatter。</p>\n<p><img src=\"https://firebasestorage.googleapis.com/v0/b/timpicturespace.appspot.com/o/vueCli-02.png?alt=media&token=1a6f8eb0-9472-4c59-880a-8bcac07ec9e7\" alt=\"選擇套件\"></p>\n<h4 id=\"CSS-預處理器\"><a href=\"#CSS-預處理器\" class=\"headerlink\" title=\"CSS 預處理器\"></a>CSS 預處理器</h4><p>Sass / SCSS (with node-sass)</p>\n<p><img src=\"https://firebasestorage.googleapis.com/v0/b/timpicturespace.appspot.com/o/vueCli-03.png?alt=media&token=aad50ffc-e0ae-4d64-b3a0-d617c38dbb5c\" alt=\"CSS 預處理器\"></p>\n<h4 id=\"選擇規範\"><a href=\"#選擇規範\" class=\"headerlink\" title=\"選擇規範\"></a>選擇規範</h4><p>此範例我們選 SASS 與 ESLint + Airbnb config，當然也可以按照自己習慣調整。</p>\n<p><img src=\"https://firebasestorage.googleapis.com/v0/b/timpicturespace.appspot.com/o/vueCli-04.png?alt=media&token=250a1ec3-c6e0-4d67-9e3a-9a02be4c5de7\" alt=\"選擇規範\"></p>\n<blockquote>\n<p>開發若使用此功能，就會很容易陰部符合規範時一直跳錯，是滿煩的，但為了工作上的 coding style 其實還是有必要的。</p>\n</blockquote>\n<h4 id=\"Lint-存檔\"><a href=\"#Lint-存檔\" class=\"headerlink\" title=\"Lint 存檔\"></a>Lint 存檔</h4><p>只以這次為主。</p>\n<p><img src=\"https://firebasestorage.googleapis.com/v0/b/timpicturespace.appspot.com/o/vueCli-05.png?alt=media&token=dc9e47e0-f121-4bde-9e7a-7487cdcddc58\" alt=\"Lint\"></p>\n<h4 id=\"存檔在-package-json\"><a href=\"#存檔在-package-json\" class=\"headerlink\" title=\"存檔在 package.json\"></a>存檔在 package.json</h4><p>本次專案相關設定就會從這邊取出，如果要設定相關內容也從 package.json 修改，就可以讓整個專案吃到了，相當方便。</p>\n<p><img src=\"https://firebasestorage.googleapis.com/v0/b/timpicturespace.appspot.com/o/vueCli-06.png?alt=media&token=b65c1bb9-0ba2-4546-9656-842ad026b77a\" alt=\"package.json\"></p>\n<h4 id=\"不要儲存相關設定\"><a href=\"#不要儲存相關設定\" class=\"headerlink\" title=\"不要儲存相關設定\"></a>不要儲存相關設定</h4><p>最後會詢問，是否要儲存相關設定，在未來的專案使用，建議選擇 no，相關設定要看未來專案選擇。</p>\n<p><img src=\"https://firebasestorage.googleapis.com/v0/b/timpicturespace.appspot.com/o/vueCli-07.png?alt=media&token=0a20cd4f-972a-417f-b7ea-abe05544a006\" alt=\"請選擇不要\"></p>\n<p>選擇完畢後就會安裝所選擇的套件，這時就可以去倒杯水，回到座位看到下方畫面，代表完成了。</p>\n<h4 id=\"安裝完成\"><a href=\"#安裝完成\" class=\"headerlink\" title=\"安裝完成\"></a>安裝完成</h4><p><img src=\"https://firebasestorage.googleapis.com/v0/b/timpicturespace.appspot.com/o/vueCli-08.png?alt=media&token=7660ab32-fdbc-4251-a9f0-68613a6e6333\" alt=\"Vue CLI 安裝完成\"></p>\n<p>這時候按照上方條件輸入後就會跳出下方畫面</p>\n<p><img src=\"https://firebasestorage.googleapis.com/v0/b/timpicturespace.appspot.com/o/vueCli-09.png?alt=media&token=5d4e95e0-cc41-447d-814f-cf35444bb366\" alt=\"done\"></p>\n<p>打開瀏覽器輸入所得到的 localhost 的位址，若出現下方畫面，就是代表建立完成一個新的 SPA 專案囉!</p>\n<p><img src=\"https://firebasestorage.googleapis.com/v0/b/timpicturespace.appspot.com/o/vueCli-10.png?alt=media&token=75d77f86-2238-4812-8b57-3c542a8a9412\" alt=\"Vue SPA 專案建立完成\"></p>\n<h2 id=\"專案架構\"><a href=\"#專案架構\" class=\"headerlink\" title=\"專案架構\"></a>專案架構</h2><p>生成的專案架構大概會向下方這樣：</p>\n<p><img src=\"https://firebasestorage.googleapis.com/v0/b/timpicturespace.appspot.com/o/vueCli-11.png?alt=media&token=59c88031-8e83-489d-b540-37d43d0fca64\" alt=\"專案架構\"></p>\n<p>開發主要會動到的檔案，大多集中在 src 目錄，以及 public 裡的 index.html 。</p>\n<h2 id=\"Vue-的單一元件檔\"><a href=\"#Vue-的單一元件檔\" class=\"headerlink\" title=\"Vue 的單一元件檔\"></a>Vue 的單一元件檔</h2><p><img src=\"https://firebasestorage.googleapis.com/v0/b/timpicturespace.appspot.com/o/vueCli-12_%E5%B7%A5%E4%BD%9C%E5%8D%80%E5%9F%9F%201.png?alt=media&token=4238ffea-3f4a-47be-bb6a-2187c9466e8a\" alt=\"Vue 的單一元件檔\"></p>\n<p>一個獨立的 vue 檔案，也就是一個 component，通常會包含</p>\n<ul>\n<li>HTML</li>\n<li>JavaScript</li>\n<li>CSS</li>\n</ul>\n<p>這三個部分，分別由 <code>&lt;template&gt;</code>  、  <code>&lt;script&gt;</code>  與 <code>&lt;style&gt;</code> 這三個標籤來表示。</p>\n<p>而 <code>.vue</code> 檔案也可以透過 <code>import</code> 其他 <code>.vue</code>  檔案，來將其他 component 引入作為自己的子元件。</p>\n<p><img src=\"https://firebasestorage.googleapis.com/v0/b/timpicturespace.appspot.com/o/vueCli-13.png?alt=media&token=4a7a4db1-7697-41fa-b7b4-f30f0119eba2\" alt=\"components\"></p>\n","categories":["vue.js Note"],"tags":["vue.js","vue CLI"]},{"title":"JS 筆記 - ES6：使用 let 與 const 宣告變數","url":"/JavaScript-Note/20200404/784099098/","content":"<p><img src=\"https://firebasestorage.googleapis.com/v0/b/timpicturespace.appspot.com/o/js-ES6.png?alt=media&token=0bf94bee-c7cd-4cc0-b619-45e5bf71d07b\" alt=\"ES6\"></p>\n<p><code>var</code>、<code>let</code>、<code>const</code> 都是宣告變數的方法，倘若沒有使用變數宣告，就會變成<strong>全域變數</strong>，那這些宣告的方法中，在作用域中的範圍是哪些，來記錄一下釐清觀念。</p>\n<h2 id=\"var-let-的作用域差異\"><a href=\"#var-let-的作用域差異\" class=\"headerlink\" title=\"var let 的作用域差異\"></a>var let 的作用域差異</h2><p>下方有一個範例，宣告後並透過一個<a href=\"https://developer.mozilla.org/zh-TW/docs/Glossary/IIFE\" target=\"_blank\" rel=\"noopener\">立即函式</a>來執行其內容，</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> mom = <span class=\"string\">'mary'</span>;</span><br><span class=\"line\">(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">console</span>.log(<span class=\"string\">'mom'</span>) <span class=\"comment\">// mary</span></span><br><span class=\"line\">&#125;)();</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p><strong>立即函式</strong>：IIFE (Immediately Invoked Function Expression) 是一個定義完馬上就執行的 JavaScript function。</p>\n</blockquote>\n<p>可知會得到 <code>mary</code> 這個值，把 <code>var</code> 換成 <code>let</code> 也會有一樣的結果。<br>但若把 <code>console.log</code> 複製一個並移到最上面，結果會如何呢?</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'mom'</span>) <span class=\"comment\">//mom is not defined</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> mom = <span class=\"string\">'mary'</span>;</span><br><span class=\"line\">(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">console</span>.log(<span class=\"string\">'mom'</span>) </span><br><span class=\"line\">&#125;)();</span><br></pre></td></tr></table></figure>\n\n<p>會直接跳錯，並顯示：<code>mom is not defined</code>，因為變數尚未定義，所以會找不到，但如果又把 <code>let</code> 換成 <code>var</code> 就會得到下方結果：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'mom'</span>) <span class=\"comment\">//undefined</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> mom = <span class=\"string\">'mary'</span>;</span><br><span class=\"line\">(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">console</span>.log(<span class=\"string\">'mom'</span>) <span class=\"comment\">// mary</span></span><br><span class=\"line\">&#125;)();</span><br></pre></td></tr></table></figure>\n<p>兩個都會被執行，不會跳錯，究竟 <code>not defined</code> 跟 <code>undefined</code> 的差別在哪裡呢? 這在開發時檢查會很常遇到，這邊紀錄一下。</p>\n<h3 id=\"undefined\"><a href=\"#undefined\" class=\"headerlink\" title=\"undefined\"></a>undefined</h3><p>記憶體已經準備好空間，但讀不到相關資料，之所以 <code>var</code> 可以抓到 <code>undefined</code>，是 <strong>Hoisting</strong> 向上提升的特性。</p>\n<blockquote>\n<p>Hoisting 向上提升：在變數與函數宣告時，會在編譯階段就被放入記憶體。</p>\n</blockquote>\n<h3 id=\"not-defined\"><a href=\"#not-defined\" class=\"headerlink\" title=\"not defined\"></a>not defined</h3><p>記憶體還沒有準備空間，所以沒辦法抓取資料到記憶體。</p>\n<p>為了<strong>避免汙染全域</strong>，現在都會建議使用 <code>let</code>。</p>\n<h2 id=\"var-與-let-的作用域\"><a href=\"#var-與-let-的作用域\" class=\"headerlink\" title=\"var 與 let 的作用域\"></a>var 與 let 的作用域</h2><p>透過下方 function 的範例，來了解，<code>var</code> 與 <code>let</code> 的作用域範圍。</p>\n<h3 id=\"var-的作用域範圍是-function-scope\"><a href=\"#var-的作用域範圍是-function-scope\" class=\"headerlink\" title=\"var 的作用域範圍是 function scope\"></a>var 的作用域範圍是 function scope</h3><p>若是在 function 內所宣告的 <code>var</code>，皆會被影響，若重複宣告變數的值，後宣告的變數內容會去<strong>覆蓋</strong>這個 function 內先前所宣告的變數內容。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">funA</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> name = <span class=\"string\">'小明'</span>;</span><br><span class=\"line\">  <span class=\"keyword\">if</span>(<span class=\"literal\">true</span>)&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> name = <span class=\"string\">'大明'</span>;\t</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log (name); <span class=\"comment\">// '大明'</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"let-的作用域範圍是-block\"><a href=\"#let-的作用域範圍是-block\" class=\"headerlink\" title=\"let 的作用域範圍是 block\"></a>let 的作用域範圍是 block</h3><p>若是在 function 內使用 <code>let</code> ，只會讀取該<strong>「大括號」</strong>的內變數內容。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">funA</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> name = <span class=\"string\">'小明'</span>;</span><br><span class=\"line\">  <span class=\"keyword\">if</span>(<span class=\"literal\">true</span>)&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> name = <span class=\"string\">'大明'</span>;\t</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log (name); <span class=\"comment\">// '小明'</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>由此可知，<code>var</code> 因為比較容易汙染到全域，所以使用 <code>let</code> 會比較容易管理 function 的內容。</p>\n<h2 id=\"var-與-let-經典的-for-迴圈範例\"><a href=\"#var-與-let-經典的-for-迴圈範例\" class=\"headerlink\" title=\"var 與 let 經典的 for 迴圈範例\"></a>var 與 let 經典的 for 迴圈範例</h2><p>此範例希望出現的是在 console 內顯示 「這是第幾次執行」的文字，並且 <code>i</code> 的內容會是 0~9，所以預期的結果應該如下：</p>\n<blockquote>\n<p>這是第0次執行<br>這是第1次執行<br>這是第2次執行<br>這是第3次執行<br>這是第4次執行<br>這是第5次執行<br>這是第6次執行<br>這是第7次執行<br>這是第8次執行<br>這是第9次執行</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">10</span>; i++)&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(i);</span><br><span class=\"line\">  setTimeout (<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'這是第'</span>+i+<span class=\"string\">'次執行'</span>)</span><br><span class=\"line\">  &#125;,<span class=\"number\">10</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>可看到一個 for 迴圈裏面有一個非同步事件，並且這個 for 迴圈並沒有被 function 包住，是直接執行的，邏輯上 setTimeout 的位置應該在 for 迴圈之外，如下程式碼：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">10</span>; i++)&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(i);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">setTimeout (<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123; <span class=\"comment\">//應該在 i 加總完之後，才在這裡執行</span></span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'這是第'</span>+i+<span class=\"string\">'次執行'</span>)</span><br><span class=\"line\">\t&#125;,<span class=\"number\">10</span>);</span><br></pre></td></tr></table></figure>\n<p>透過第一範例知道這裡使用 <code>var</code> 宣告 <code>i</code> 的時候，此時 <code>i</code> 是全域變數，在 <code>console.log</code> 中輸入 window.i 時，會出現 10 的結果。所以 setTimeout 會執行的是全域變數底下的 <code>i</code>，並不會依序的執行，所以這並非預期出現的結果。</p>\n<p>但如果將 <code>var</code> 改成 <code>let</code>，作用域就會變成 block，就只會執行該大括號內的內容。所以就會得到預期的結果，並且在 console 中輸入 window.i 結果會出現 <code>undefined</code>。</p>\n<h2 id=\"const-的特性\"><a href=\"#const-的特性\" class=\"headerlink\" title=\"const 的特性\"></a>const 的特性</h2><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> a = <span class=\"number\">1</span>;</span><br><span class=\"line\">a = <span class=\"number\">2</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(a); <span class=\"comment\">//2</span></span><br></pre></td></tr></table></figure>\n<p>在開發人員工具，就會出現跳錯的訊息，</p>\n<p><code>Uncaught SyntaxError: Identifier &#39;a&#39; has already been declared</code></p>\n<p>所以只要是不能變更的資訊，就可以使用 <code>const</code> 來宣告。(例如 AJAX 中的 API 網址。)</p>\n<h3 id=\"但是-const-宣告的物件是可以修改內容的\"><a href=\"#但是-const-宣告的物件是可以修改內容的\" class=\"headerlink\" title=\"但是 const 宣告的物件是可以修改內容的\"></a>但是 const 宣告的物件是可以修改內容的</h3><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> family = &#123;</span><br><span class=\"line\">  mom: <span class=\"string\">'媽媽'</span>,</span><br><span class=\"line\">\tson: <span class=\"string\">'兒子'</span>,</span><br><span class=\"line\">\tsister: <span class=\"string\">'妹妹'</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">family.dad = <span class=\"string\">'爸爸'</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(family); </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//就會得到 </span></span><br><span class=\"line\"><span class=\"comment\">//mom: \"媽媽\"</span></span><br><span class=\"line\"><span class=\"comment\">//son: \"兒子\"</span></span><br><span class=\"line\"><span class=\"comment\">//sister: \"妹妹\"</span></span><br><span class=\"line\"><span class=\"comment\">//dad: \"爸爸\"</span></span><br></pre></td></tr></table></figure>\n<p>因為 <code>const</code> 物件是傳參考，不是傳值，所以並非改變物件中的值，所以是可以的。<br>但如果把上方物件修改成： <code>family = {};</code><br>因為修改了值，就會跳錯。</p>\n<h2 id=\"心得\"><a href=\"#心得\" class=\"headerlink\" title=\"心得\"></a>心得</h2><p>了解 <code>var</code> 跟 <code>let</code> 作用域的概念以及 <code>const</code> 的特行，在使用 function 上，比較不會因為程式碼一多，就會搞亂。</p>\n","categories":["JavaScript Note"],"tags":["JavaScript","ES6"]},{"title":"JS 筆記 - Object 物件的基本認識","url":"/JavaScript-Note/20200331/3067475316/","content":"<p><img src=\"https://firebasestorage.googleapis.com/v0/b/timpicturespace.appspot.com/o/JavaScript%20note-01.jpg?alt=media&token=7bee0261-72ac-4de4-9f5a-f39d58735b7d\" alt=\"JavaScript Note\"></p>\n<blockquote>\n<p>一個物件可以是個零至多種屬性的集合，而屬性是鍵 (key) 與值 (value) 之間的關聯。 一個屬性的「值」可以是某個基本型別，也可以是另一個物件，甚至可以是一個函數。<br>*引用 KURO 老師<a href=\"http://https://ithelp.ithome.com.tw/articles/10190962\" target=\"_blank\" rel=\"noopener\">這篇文章</a>對於物件的陳述</p>\n</blockquote>\n<hr>\n<h2 id=\"物件的寫法\"><a href=\"#物件的寫法\" class=\"headerlink\" title=\"物件的寫法\"></a>物件的寫法</h2><p>宣告一個變數 var ，<strong>自定義</strong>一個名稱，直接用一個<strong>大括號</strong> <code>{}</code> 的方式來建立物件，資料結尾要用逗號 <code>,</code> ，也是 JSON 格式的核心語法，寫法如下：</p>\n<p><code>var object ={};</code></p>\n<p>有點像寫 CSS 格式的感覺，用這個聯想就滿好記的。</p>\n<p><code>.header{};</code></p>\n<h3 id=\"在物件中加上屬性\"><a href=\"#在物件中加上屬性\" class=\"headerlink\" title=\"在物件中加上屬性\"></a>在物件中加上屬性</h3><p>在大括號裡面，會給物件一些內容，稱之為<strong>屬性</strong>跟<strong>值</strong>。<br>如果以一個家為例，家裡面有爸爸，名字叫做 Tim，那物件內容就會這樣寫：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> home =&#123;</span><br><span class=\"line\">  dad: <span class=\"string\">\"Tim\"</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>增加屬性內容要注意的地方是：給屬性一個<strong>自定義</strong>的名稱，加上<strong>冒號</strong> <code>：</code>，後面一樣要按照變數的資料型態來寫，字串要加上引號，數字則不用，多個物件內容要用<strong>逗點</strong> <code>,</code> ，但最後一個物件項目，無須逗點。如下方程式碼：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> home =&#123;</span><br><span class=\"line\">  dad: <span class=\"string\">\"Tim\"</span>,</span><br><span class=\"line\">  mom: <span class=\"string\">\"Min\"</span>,</span><br><span class=\"line\">  son: <span class=\"string\">\"Joshua\"</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h3 id=\"存取物件的屬性\"><a href=\"#存取物件的屬性\" class=\"headerlink\" title=\"存取物件的屬性\"></a>存取物件的屬性</h3><p>物件本身不會被執行，要把物件中的屬性做<strong>存取的動作</strong>，才會被執行，假如要存取下方物件中的內容，要在物件名稱後加上點 <code>.</code>，才能取得屬性的值，程式碼可以這樣寫：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> home =&#123;</span><br><span class=\"line\">  dad: <span class=\"string\">\"Tim\"</span>,</span><br><span class=\"line\">  mom: <span class=\"string\">\"Min\"</span>,</span><br><span class=\"line\">  son: [<span class=\"string\">\"Joshua\"</span>,<span class=\"string\">\"John\"</span>],</span><br><span class=\"line\">  chair:<span class=\"number\">4</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">home.dad; <span class=\"comment\">//會得到 Tim 這個結果</span></span><br><span class=\"line\">home.son[<span class=\"number\">0</span>] <span class=\"comment\">//會得到 Joshua 這個結果</span></span><br></pre></td></tr></table></figure>\n\n<p>白話文：</p>\n<ol>\n<li>在 home 的物件中，找到 dad 屬性中裡面的值，所以結果會得到 Tim。</li>\n<li>在 home 的物件中，找到 son 陣列裡的第一個值，所以結果會得到 Joshua。</li>\n</ol>\n<hr>\n<h3 id=\"新增物件屬性\"><a href=\"#新增物件屬性\" class=\"headerlink\" title=\"新增物件屬性\"></a>新增物件屬性</h3><p>如果要在物件外，直接新增屬性到物件內的話，可以這樣寫：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> home =&#123;</span><br><span class=\"line\">  dad: <span class=\"string\">\"Tim\"</span>,</span><br><span class=\"line\">  mom: <span class=\"string\">\"Min\"</span>,</span><br><span class=\"line\">  son: [<span class=\"string\">\"Joshua\"</span>,<span class=\"string\">\"John\"</span>],</span><br><span class=\"line\">  chair:<span class=\"number\">4</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">home.dog = <span class=\"number\">1</span>; <span class=\"comment\">//增加屬性 dog，值為 1 的內容到物件內</span></span><br><span class=\"line\">home.dog; <span class=\"comment\">//存取值就會得到 1</span></span><br></pre></td></tr></table></figure>\n\n<hr>\n<h3 id=\"刪除物件屬性\"><a href=\"#刪除物件屬性\" class=\"headerlink\" title=\"刪除物件屬性\"></a>刪除物件屬性</h3><p>如果要在物件外，直接刪除物件內屬性，可以這樣寫：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> home =&#123;</span><br><span class=\"line\">  dad: <span class=\"string\">\"Tim\"</span>,</span><br><span class=\"line\">  mom: <span class=\"string\">\"Min\"</span>,</span><br><span class=\"line\">  son: [<span class=\"string\">\"Joshua\"</span>,<span class=\"string\">\"John\"</span>],</span><br><span class=\"line\">  chair:<span class=\"number\">4</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">home.dog = <span class=\"number\">1</span>; <span class=\"comment\">//增加屬性 dog，值為 1 的內容到物件內</span></span><br><span class=\"line\">home.dog; <span class=\"comment\">//存取值就會得到 1</span></span><br><span class=\"line\"><span class=\"keyword\">delete</span> home.dog; <span class=\"comment\">//刪除物件 home 裡面的屬性 dog</span></span><br><span class=\"line\">home.dog; <span class=\"comment\">//存取值會得到 undefined</span></span><br></pre></td></tr></table></figure>\n\n<p><em>其實滿直覺的</em></p>\n<p>參考文章 <a href=\"https://ithelp.ithome.com.tw/articles/10190962\" target=\"_blank\" rel=\"noopener\">https://ithelp.ithome.com.tw/articles/10190962</a></p>\n","categories":["JavaScript Note"],"tags":["JavaScript"]},{"title":"jQuery 筆記 - Chart.js 基本使用","url":"/jQuery-Note/20200327/3238077972/","content":"<p><img src=\"https://images.unsplash.com/photo-1460925895917-afdab827c52f?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=crop&w=2004&q=80\" alt=\"chart.js\"></p>\n<h2 id=\"Chart-js-簡介\"><a href=\"#Chart-js-簡介\" class=\"headerlink\" title=\"Chart.js 簡介\"></a>Chart.js 簡介</h2><p>Chart.js 是一款彈性很高的圖表 JavaScript library，支援八種常見的統計圖表類型，夠將圖表混合在一起使用，也支援動畫的效果，讓我們製作出來的圖表更加精美！Chart.js 可以與 ES6 模塊，純 JavaScript 和模塊加載器一起使用。</p>\n<h2 id=\"載入-chart-js\"><a href=\"#載入-chart-js\" class=\"headerlink\" title=\"載入 chart.js\"></a>載入 chart.js</h2><p>您可以從 <a href=\"https://github.com/chartjs/Chart.js/releases/tag/v2.9.3\" target=\"_blank\" rel=\"noopener\">GitHub</a> 版本下載最新版本的 Chart.js  或使用 <a href=\"https://cdnjs.com/libraries/Chart.js/\" target=\"_blank\" rel=\"noopener\">Chart.js CDN</a>。</p>\n<figure class=\"highlight cmd\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;script src=\"https://cdnjs.cloudflare.com/ajax/libs/Chart.js/<span class=\"number\">2</span>.<span class=\"number\">9</span>.<span class=\"number\">3</span>/Chart.min.js\"&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n<p>要把這一段加在 <code>&lt;head&gt;</code> 標籤中，不然會讀取不到資料，記得也要加入 js 的 <code>&lt;script&gt;</code> 標籤。</p>\n<blockquote>\n<p>因會不定期更新，最新版本請見官網。</p>\n</blockquote>\n<h2 id=\"用法\"><a href=\"#用法\" class=\"headerlink\" title=\"用法\"></a>用法</h2><p>把圖表放在 html 中的位置中，並且要用 <code>&lt;canvas&gt;</code> 標籤包住。如下方程式碼。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">canvas</span> <span class=\"attr\">id</span>=<span class=\"string\">\"chart-area\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">canvas</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>可用 CSS 或是直接在 <code>&lt;canvas&gt;</code> 中加入寬度與高度的設定，但我個人習慣用 CSS 獨立管理，這裡便不贅述。</p>\n<h3 id=\"綁定-id\"><a href=\"#綁定-id\" class=\"headerlink\" title=\"綁定 id\"></a>綁定 id</h3><p>提供四種綁定方式，任擇一即可。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> ctx = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'myChart'</span>);</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> ctx = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'myChart'</span>).getContext(<span class=\"string\">'2d'</span>);</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> ctx = $(<span class=\"string\">'#myChart'</span>);</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> ctx = <span class=\"string\">'myChart'</span>;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"設定自己的圖表\"><a href=\"#設定自己的圖表\" class=\"headerlink\" title=\"設定自己的圖表\"></a>設定自己的圖表</h3><p>放入了位置與綁定了元素，就可以開始定義或創建自己的圖表類型了！以下為官網範例的條形圖，該條形圖顯示了不同顏色的數值表，y 軸從 0 開始。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> ctx = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'myChart'</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> myChart = <span class=\"keyword\">new</span> Chart(ctx, &#123;</span><br><span class=\"line\">  type: <span class=\"string\">'bar'</span>, <span class=\"comment\">//圖表類型</span></span><br><span class=\"line\">  data: &#123;</span><br><span class=\"line\">    <span class=\"comment\">//標題</span></span><br><span class=\"line\">    labels: [<span class=\"string\">'Red'</span>, <span class=\"string\">'Blue'</span>, <span class=\"string\">'Yellow'</span>, <span class=\"string\">'Green'</span>, <span class=\"string\">'Purple'</span>, <span class=\"string\">'Orange'</span>],</span><br><span class=\"line\">    datasets: [&#123;</span><br><span class=\"line\">      label: <span class=\"string\">'# test'</span>, <span class=\"comment\">//標籤</span></span><br><span class=\"line\">      data: [<span class=\"number\">12</span>, <span class=\"number\">19</span>, <span class=\"number\">3</span>, <span class=\"number\">5</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>], <span class=\"comment\">//資料</span></span><br><span class=\"line\">      <span class=\"comment\">//圖表背景色</span></span><br><span class=\"line\">      backgroundColor: [</span><br><span class=\"line\">        <span class=\"string\">'rgba(255, 99, 132, 0.2)'</span>,</span><br><span class=\"line\">        <span class=\"string\">'rgba(54, 162, 235, 0.2)'</span>,</span><br><span class=\"line\">        <span class=\"string\">'rgba(255, 206, 86, 0.2)'</span>,</span><br><span class=\"line\">        <span class=\"string\">'rgba(75, 192, 192, 0.2)'</span>,</span><br><span class=\"line\">        <span class=\"string\">'rgba(153, 102, 255, 0.2)'</span>,</span><br><span class=\"line\">        <span class=\"string\">'rgba(255, 159, 64, 0.2)'</span></span><br><span class=\"line\">      ],</span><br><span class=\"line\">      <span class=\"comment\">//圖表外框線色</span></span><br><span class=\"line\">      borderColor: [</span><br><span class=\"line\">        <span class=\"string\">'rgba(255, 99, 132, 1)'</span>,</span><br><span class=\"line\">        <span class=\"string\">'rgba(54, 162, 235, 1)'</span>,</span><br><span class=\"line\">        <span class=\"string\">'rgba(255, 206, 86, 1)'</span>,</span><br><span class=\"line\">        <span class=\"string\">'rgba(75, 192, 192, 1)'</span>,</span><br><span class=\"line\">        <span class=\"string\">'rgba(153, 102, 255, 1)'</span>,</span><br><span class=\"line\">        <span class=\"string\">'rgba(255, 159, 64, 1)'</span></span><br><span class=\"line\">      ],</span><br><span class=\"line\">      <span class=\"comment\">//外框線寬度</span></span><br><span class=\"line\">      borderWidth: <span class=\"number\">1</span></span><br><span class=\"line\">    &#125;]</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  options: &#123;</span><br><span class=\"line\">    scales: &#123;</span><br><span class=\"line\">      yAxes: [&#123;</span><br><span class=\"line\">        ticks: &#123;</span><br><span class=\"line\">          beginAtZero: <span class=\"literal\">true</span>,</span><br><span class=\"line\">          responsive: <span class=\"literal\">true</span> <span class=\"comment\">//符合響應式</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>codepen <a href=\"https://codepen.io/hnzxewqw/pen/LYVMNPX\" target=\"_blank\" rel=\"noopener\">https://codepen.io/hnzxewqw/pen/LYVMNPX</a></p>\n<h2 id=\"結合兩個圖表使用\"><a href=\"#結合兩個圖表使用\" class=\"headerlink\" title=\"結合兩個圖表使用\"></a>結合兩個圖表使用</h2><p>Chart.js 也支援<a href=\"https://www.chartjs.org/docs/latest/charts/mixed.html\" target=\"_blank\" rel=\"noopener\">混合類型的圖表</a>，能夠將多個 bar chart 跟多個 line chart 放在一起比較；最外層的圖表類型必須設定為 bar，接著在 dataset 的第一個物件後，加上第二個物件，即可插入第二個圖表，例如以下程式碼：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\">datasets: [&#123;</span><br><span class=\"line\">     label: <span class=\"string\">'test01'</span>, <span class=\"comment\">//標籤</span></span><br><span class=\"line\">     data: [<span class=\"number\">12</span>, <span class=\"number\">19</span>, <span class=\"number\">3</span>, <span class=\"number\">5</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>], <span class=\"comment\">//資料</span></span><br><span class=\"line\">     <span class=\"comment\">//圖表背景色</span></span><br><span class=\"line\">     backgroundColor: [</span><br><span class=\"line\">       <span class=\"string\">'rgba(255, 99, 132, 0.5)'</span>,</span><br><span class=\"line\">       <span class=\"string\">'rgba(54, 162, 235, 0.5)'</span>,</span><br><span class=\"line\">       <span class=\"string\">'rgba(255, 206, 86, 0.5)'</span>,</span><br><span class=\"line\">       <span class=\"string\">'rgba(75, 192, 192, 0.5)'</span>,</span><br><span class=\"line\">       <span class=\"string\">'rgba(153, 102, 255, 0.5)'</span>,</span><br><span class=\"line\">       <span class=\"string\">'rgba(255, 159, 64, 0.5)'</span></span><br><span class=\"line\">     ],</span><br><span class=\"line\">     <span class=\"comment\">//圖表外框線色</span></span><br><span class=\"line\">     borderColor: [</span><br><span class=\"line\">       <span class=\"string\">'rgba(255, 99, 132, 1)'</span>,</span><br><span class=\"line\">       <span class=\"string\">'rgba(54, 162, 235, 1)'</span>,</span><br><span class=\"line\">       <span class=\"string\">'rgba(255, 206, 86, 1)'</span>,</span><br><span class=\"line\">       <span class=\"string\">'rgba(75, 192, 192, 1)'</span>,</span><br><span class=\"line\">       <span class=\"string\">'rgba(153, 102, 255, 1)'</span>,</span><br><span class=\"line\">       <span class=\"string\">'rgba(255, 159, 64, 1)'</span></span><br><span class=\"line\">     ],</span><br><span class=\"line\">     <span class=\"comment\">//外框線寬度</span></span><br><span class=\"line\">     borderWidth: <span class=\"number\">1</span>, <span class=\"comment\">//從這裡開始加第二筆物件資料</span></span><br><span class=\"line\">   &#125;, &#123;</span><br><span class=\"line\">     type: <span class=\"string\">'line'</span>,</span><br><span class=\"line\">     label: <span class=\"string\">'test02'</span>,</span><br><span class=\"line\">     data: [<span class=\"number\">12</span>, <span class=\"number\">19</span>, <span class=\"number\">3</span>, <span class=\"number\">5</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>],</span><br><span class=\"line\">     borderColor: <span class=\"string\">'rgba(255, 99, 132, 1)'</span>,</span><br><span class=\"line\">     backgroundColor:<span class=\"string\">'rgba(255, 255, 255, 1)'</span></span><br><span class=\"line\">   &#125;]</span><br><span class=\"line\"> &#125;,</span><br></pre></td></tr></table></figure>\n\n<p>codepen <a href=\"https://codepen.io/hnzxewqw/pen/PoqXNYw\" target=\"_blank\" rel=\"noopener\">https://codepen.io/hnzxewqw/pen/PoqXNYw</a></p>\n<h2 id=\"相關選項註記\"><a href=\"#相關選項註記\" class=\"headerlink\" title=\"相關選項註記\"></a>相關選項註記</h2><p><a href=\"https://www.chartjs.org/docs/latest/general/\" target=\"_blank\" rel=\"noopener\">常規配置</a></p>\n<p>這些部分描述了可在文檔中其他位置應用的常規配置選項。</p>\n<ul>\n<li><strong>響應式</strong>定義適用於所有圖表的響應式圖表選項。</li>\n<li><strong>設備像素比率</strong>定義顯示像素與渲染像素之間的比率。</li>\n<li><strong>交互</strong>定義了反映懸停圖表元素如何工作的選項。</li>\n<li><strong>選項</strong>可腳本化和可索引的選項語法。</li>\n<li><strong>顏色</strong>定義可接受的顏色值。</li>\n<li><strong>字體</strong>定義各種字體選項。</li>\n<li><strong>性能</strong>為需要效能的應用程式給予提示。</li>\n</ul>\n<blockquote>\n<p>若有翻譯不好的地方還請指教。</p>\n</blockquote>\n<h2 id=\"心得\"><a href=\"#心得\" class=\"headerlink\" title=\"心得\"></a>心得</h2><p><code>datasets</code> 呈現的是 JSON 格式資料，所以對於陣列與物件的用法也要熟悉，在插入資料時比較不會搞混。</p>\n<p>參考資料</p>\n<p><a href=\"https://www.chartjs.org/docs/latest/\" target=\"_blank\" rel=\"noopener\">chart.js 官網</a></p>\n<p><a href=\"https://ithelp.ithome.com.tw/articles/10194425\" target=\"_blank\" rel=\"noopener\">十分鐘學習 Chart.js - 圖表繪製</a></p>\n<p><a href=\"https://dotblogs.com.tw/wellwind/2016/12/30/front-end-chart-js\" target=\"_blank\" rel=\"noopener\">Chart.js - 輕鬆完成資料視覺化</a></p>\n","categories":["jQuery Note"],"tags":["JavaScript","jQuery"]},{"title":"jQuery 筆記 - jQuery 基本認識","url":"/jQuery-Note/20200326/177388252/","content":"<p><img src=\"https://images.unsplash.com/photo-1525651561332-f1382d2bb6c4?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=crop&w=1350&q=80\" alt=\"jquery\"></p>\n<h2 id=\"簡介\"><a href=\"#簡介\" class=\"headerlink\" title=\"簡介\"></a>簡介</h2><p>jQuery 是一套跨瀏覽器的 JavaScript 函式庫，簡化 HTML 與 JavaScript 之間的操作。由約翰·雷西格（John Resig）在 2006 年 1 月的 BarCamp NYC 上釋出第一個版本。目前是由 Dave Methvin 領導的開發團隊進行開發。全球前 10,000 個存取最高的網站中，有 65% 使用了 jQuery，是目前最受歡迎的 JavaScript 函式庫。</p>\n<h2 id=\"特色\"><a href=\"#特色\" class=\"headerlink\" title=\"特色\"></a>特色</h2><p>jQuery有下列特色：</p>\n<ul>\n<li>使用多瀏覽器開源選擇器引擎 Sizzle（jQuery 專案的衍生產品）進行 DOM 元素選擇。</li>\n<li>基於 CSS 選擇器的 DOM 操作，使用元素的名稱和屬性（如 id 和 class）作為選擇 DOM 中節點的條件。</li>\n<li>事件。</li>\n<li>特效和動畫。</li>\n<li>Ajax。</li>\n<li>Deferred 和 Promise 物件來控制非同步處理。</li>\n<li>JSON 解析。</li>\n<li>通過外掛程式擴充。</li>\n<li>工具函式，如特徵檢測。</li>\n<li>現代瀏覽器中原生的相容性方法，但對於舊版瀏覽器需要後備（fallback）方法，比如 <code>inArray()</code> 和 <code>each()</code>。</li>\n<li>多瀏覽器（不要與跨瀏覽器混淆）支援。</li>\n</ul>\n<h2 id=\"載入-jQuery\"><a href=\"#載入-jQuery\" class=\"headerlink\" title=\"載入 jQuery\"></a>載入 jQuery</h2><p><a href=\"https://jquery.com/download/\" target=\"_blank\" rel=\"noopener\">官網</a><br><a href=\"https://cdnjs.com/libraries/jquery\" target=\"_blank\" rel=\"noopener\">cdn</a>，或複製下方網址匯入 script 標籤。(目前最新版本)。</p>\n<figure class=\"highlight cmd\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\">https://<span class=\"title\">cdnjs.cloudflare.com</span>/<span class=\"title\">ajax</span>/<span class=\"title\">libs</span>/<span class=\"title\">jquery</span>/3.4.1/<span class=\"title\">jquery.min.js</span></span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"使用-jQuery-函式\"><a href=\"#使用-jQuery-函式\" class=\"headerlink\" title=\"使用 jQuery 函式\"></a>使用 jQuery 函式</h2><p>有別於原生 JavaScript 要寫落落長的程式碼。起手式很容易，可以這樣寫：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\">$(<span class=\"built_in\">document</span>).ready(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">//要執行的內容</span></span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>或是，</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\">$(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">//要執行的內容</span></span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>目前比較推薦這個寫法。</p>\n</blockquote>\n<h2 id=\"子專案\"><a href=\"#子專案\" class=\"headerlink\" title=\"子專案\"></a>子專案</h2><blockquote>\n<p>以下專案均是源自於Interface外掛程式</p>\n</blockquote>\n<h3 id=\"jQuery-UI\"><a href=\"#jQuery-UI\" class=\"headerlink\" title=\"jQuery UI\"></a>jQuery UI</h3><p>更多資訊：<a href=\"https://jqueryui.com/\" target=\"_blank\" rel=\"noopener\">jQuery UI</a><br>基於jQuery的使用者介面庫，包括拖放、縮放、對話方塊、標籤頁等多個組件。</p>\n<h3 id=\"jQuery-Tools\"><a href=\"#jQuery-Tools\" class=\"headerlink\" title=\"jQuery Tools\"></a>jQuery Tools</h3><p>jQuery Tools 是一個第三方的套件，基於 jQuery。包括了標籤頁、表單驗證、滑鼠滾輪事件等多個組件。</p>\n<h3 id=\"jQuery-Mobile\"><a href=\"#jQuery-Mobile\" class=\"headerlink\" title=\"jQuery Mobile\"></a>jQuery Mobile</h3><p>基於 jQuery 的手機網頁製作工具，jQuery Mobile 的網站上包含了網頁的設計工具、主題設計工具。另外 jQuery Mobile 的 js 外掛程式包含了換頁、事件等的多項功能。</p>\n<p>文章參考 <a href=\"https://zh.wikipedia.org/wiki/JQuery_UI\" target=\"_blank\" rel=\"noopener\">https://zh.wikipedia.org/wiki/JQuery_UI</a></p>\n","categories":["jQuery Note"],"tags":["JavaScript","jQuery"]},{"title":"jQuery 筆記 - 使用 select 選取 option 的資料，並同步渲染於網頁","url":"/JavaScript-Note/20200325/2975558676/","content":"<p><img src=\"https://images.unsplash.com/photo-1583361426589-e04f4a812dd5?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=crop&w=1489&q=80\" alt=\"select\"></p>\n<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>主要紀錄這次工作上遇到的狀況，一開始想得太複雜了，但還好今天有解決，但在網路上找不到合適的筆記與範例，就把這個狀況記錄下來當作筆記。</p>\n<h2 id=\"狀況\"><a href=\"#狀況\" class=\"headerlink\" title=\"狀況\"></a>狀況</h2><p>要使用 <code>select</code> 當中有數個 <code>option</code>，當選擇到該 <code>option</code> 時，對應的資料要做呈現於網頁上，所以會有以下資訊：</p>\n<ul>\n<li><code>select</code>，<code>option</code> 標籤。</li>\n<li>要呈現的資料。</li>\n<li>使用 jQuery 控制，所以會使用 <code>change</code> 事件。</li>\n</ul>\n<h2 id=\"解法-1\"><a href=\"#解法-1\" class=\"headerlink\" title=\"解法 1\"></a>解法 1</h2><p>我第一個想法是使用 <code>select</code> + <code>option</code> 來製作下拉選單，另外資料我是使用在選單下方呈現，所以程式碼會長這樣。</p>\n<h3 id=\"HTML\"><a href=\"#HTML\" class=\"headerlink\" title=\"HTML\"></a>HTML</h3><figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"wrap\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">select</span> <span class=\"attr\">name</span>=<span class=\"string\">\"s01\"</span> <span class=\"attr\">id</span>=<span class=\"string\">\"s01\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">option</span> <span class=\"attr\">value</span>=<span class=\"string\">\"0\"</span>&gt;</span>--請選擇--<span class=\"tag\">&lt;/<span class=\"name\">option</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">option</span> <span class=\"attr\">value</span>=<span class=\"string\">\"1\"</span>&gt;</span>1<span class=\"tag\">&lt;/<span class=\"name\">option</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">option</span> <span class=\"attr\">value</span>=<span class=\"string\">\"2\"</span>&gt;</span>2<span class=\"tag\">&lt;/<span class=\"name\">option</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">select</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"show\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"show01\"</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">img</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">src</span>=<span class=\"string\">\"https://images.unsplash.com/photo-1552728089-57bdde30beb3?ixlib=rb-1.2.1&amp;ixid=eyJhcHBfaWQiOjEyMDd9&amp;auto=format&amp;fit=crop&amp;w=667&amp;q=80\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">alt</span>=<span class=\"string\">\"\"</span></span></span><br><span class=\"line\"><span class=\"tag\">      /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"show02\"</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">        一定會天氣，書記出來天空並不據說破解一對只是，註冊時間三星檢驗事故正確實用是個激情之後我家植物一半一下子，整理大聲過去通過回事一句危機調查理想股份有限公司，中港路實驗審核暴力網頁課程，圖文之下先進教育否則，注意蔬菜信用，日月潭提供打擊奇蹟其他衣服能夠，請。</span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>這邊都算簡單，重點來了，我該怎麼讓資料在還沒選取到的時候先不要顯示呢?<br>我第一時間想到的是用 <code>display:none;</code>，結果後來就寫不下去了，後來受不了，趕緊請教資深工程師，很快速的點醒我的思路，原來是我想得太複雜，卻忘記了 <strong>JS 只能一次做一件事情的特性</strong>。</p>\n<p>很重要所以說三次：</p>\n<blockquote>\n<ul>\n<li>JS 只能一次做一件事情！</li>\n<li>JS 只能一次做一件事情！</li>\n<li>JS 只能一次做一件事情！</li>\n</ul>\n</blockquote>\n<h3 id=\"JavaScript\"><a href=\"#JavaScript\" class=\"headerlink\" title=\"JavaScript\"></a>JavaScript</h3><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\">$(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">//一開始所有資料都隱藏</span></span><br><span class=\"line\">  $(<span class=\"string\">\".show01\"</span>).hide(); <span class=\"comment\">//第一個資料隱藏</span></span><br><span class=\"line\">  $(<span class=\"string\">\".show02\"</span>).hide(); <span class=\"comment\">//第二個資料隱藏</span></span><br><span class=\"line\">  $(<span class=\"string\">\"#s01\"</span>).change(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">val</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//因為是 select 所以綁定 change 事件</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> ($(<span class=\"string\">\"#s01\"</span>).val() === <span class=\"string\">\"1\"</span>) &#123;</span><br><span class=\"line\">      <span class=\"comment\">//當 select 中 option 的值等於 1 時</span></span><br><span class=\"line\">      $(<span class=\"string\">\".show01\"</span>).show(); <span class=\"comment\">//第一個資料顯示</span></span><br><span class=\"line\">      $(<span class=\"string\">\".show02\"</span>).hide(); <span class=\"comment\">//第二個資料隱藏</span></span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> ($(<span class=\"string\">\"#s01\"</span>).val() === <span class=\"string\">\"2\"</span>) &#123;</span><br><span class=\"line\">      <span class=\"comment\">//當 select 中 option 的值等於 2 時</span></span><br><span class=\"line\">      $(<span class=\"string\">\".show02\"</span>).show(); <span class=\"comment\">//第二個資料顯示</span></span><br><span class=\"line\">      $(<span class=\"string\">\".show01\"</span>).hide(); <span class=\"comment\">//第一個資料隱藏</span></span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      <span class=\"comment\">//否則兩筆都隱藏</span></span><br><span class=\"line\">      $(<span class=\"string\">\".show01\"</span>).hide();</span><br><span class=\"line\">      $(<span class=\"string\">\".show02\"</span>).hide();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>附上 codepen: <a href=\"https://codepen.io/hnzxewqw/pen/ZEGmEVW\" target=\"_blank\" rel=\"noopener\">https://codepen.io/hnzxewqw/pen/ZEGmEVW</a></p>\n<h2 id=\"解法-2\"><a href=\"#解法-2\" class=\"headerlink\" title=\"解法 2\"></a>解法 2</h2><p>透過 CSS 新增 <code>.active</code>，再透過 jQuery 來動態控制 CSS，並且把 <code>if</code> 判斷是改成 <code>switch</code>，因為這樣在效能上可以提高！</p>\n<p>HTML 不變， CSS 更動成下方所示：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.show01</span>,</span><br><span class=\"line\"><span class=\"selector-class\">.show02</span> &#123;</span><br><span class=\"line\">  display: none; //預設不顯示。</span><br><span class=\"line\">  &amp;<span class=\"selector-class\">.active</span> &#123;</span><br><span class=\"line\">    display: block; //動態新增 .active 用 jQuery 控制顯示出來。</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>因為透過 <code>if</code>、<code>else if</code> 判斷式很吃效能，目前範例只有兩個，倘若有 20 筆，可能會寫到崩潰，所以這邊也學到，資料少可以用 <code>if</code>，但資料多要使用 <code>switch</code>，這要具備的思維跟觀念！</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\">$(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  $(<span class=\"string\">\"#s01\"</span>).change(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">switch</span> (</span><br><span class=\"line\">      $(<span class=\"keyword\">this</span>).val() <span class=\"comment\">//指到 select 自己的選項。</span></span><br><span class=\"line\">    ) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">case</span> <span class=\"string\">\"0\"</span>: <span class=\"comment\">// 當選到 value 是 0 的時候，移除兩個 class。</span></span><br><span class=\"line\">        $(<span class=\"string\">\".show01\"</span>).removeClass(<span class=\"string\">\"active\"</span>);</span><br><span class=\"line\">        $(<span class=\"string\">\".show02\"</span>).removeClass(<span class=\"string\">\"active\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">break</span>;</span><br><span class=\"line\">      <span class=\"keyword\">case</span> <span class=\"string\">\"1\"</span>: <span class=\"comment\">// 當選到 value 是 1 的時候，新增 .show01，移除 .show02。</span></span><br><span class=\"line\">        $(<span class=\"string\">\".show01\"</span>).addClass(<span class=\"string\">\"active\"</span>);</span><br><span class=\"line\">        $(<span class=\"string\">\".show02\"</span>).removeClass(<span class=\"string\">\"active\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">break</span>;</span><br><span class=\"line\">      <span class=\"keyword\">case</span> <span class=\"string\">\"2\"</span>: <span class=\"comment\">// 當選到 value 是 2 的時候，新增 .show02，移除 .show01。</span></span><br><span class=\"line\">        $(<span class=\"string\">\".show02\"</span>).addClass(<span class=\"string\">\"active\"</span>);</span><br><span class=\"line\">        $(<span class=\"string\">\".show01\"</span>).removeClass(<span class=\"string\">\"active\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">break</span>;</span><br><span class=\"line\">      <span class=\"keyword\">default</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>當資料讀取完，就把所有的結果都跑完了，很棒的方法呢!!</p>\n<h4 id=\"學長補充說明：\"><a href=\"#學長補充說明：\" class=\"headerlink\" title=\"學長補充說明：\"></a>學長補充說明：</h4><ul>\n<li><p>第一個是這種 <code>show</code> &amp; <code>hide</code> 可以用 CSS 處理就不要用 JS，例如在 <code>.show01</code> &amp; <code>.show02</code> CSS 可以先 <code>display: none;</code> 再設定一個 <code>active</code><br>class 處理 <code>display: block;</code> JS 的部分只要根據條件 <code>addClass</code> or <code>removeClass</code> 即可。這樣的好處是 browser 渲染會比較有效率，而且 jQuery 的 <code>show</code> &amp; <code>hide</code> 是直接寫 inline style 在 HTML tag 上面，權重有點過高。</p>\n</li>\n<li><p>第二是 JS 的 <code>if else</code> 可以嘗試用 <code>switch</code> 判斷會比較易讀一點。現在因為 <code>option</code> 只有兩個，到時候如果 <code>option</code> <strong>一多例如有 20 個，用 <code>if else</code> 會寫到脫窗，而且難以維護</strong>，最後是善用 <code>$(this)</code>。因為 change event 已經綁定 <code>$(&quot;#s01&quot;)</code> 了，所以 function 內要 target <code>$(&quot;#s01&quot;)</code>的話用<code>$(this)</code> 即可，這樣寫比較不容易出現不可預期的錯誤。</p>\n</li>\n</ul>\n<p>codepen: <a href=\"https://codepen.io/hnzxewqw/pen/YzXRerX\" target=\"_blank\" rel=\"noopener\">https://codepen.io/hnzxewqw/pen/YzXRerX</a></p>\n","categories":["JavaScript Note"],"tags":["JavaScript","jQuery"]},{"title":"JS 筆記 - Array 陣列 的基本認識","url":"/JavaScript-Note/20200323/233651811/","content":"<p><img src=\"https://firebasestorage.googleapis.com/v0/b/timpicturespace.appspot.com/o/JavaScript%20note-01.jpg?alt=media&token=7bee0261-72ac-4de4-9f5a-f39d58735b7d\" alt=\"JavaScript Note\"></p>\n<p>進入一個新的名稱，陣列 (Array) 與物件 (Object)，看到新名稱就心慌慌，但搞清楚後就有點豁然開朗，來記錄目前所學的這兩個新語法。</p>\n<h2 id=\"Array-陣列\"><a href=\"#Array-陣列\" class=\"headerlink\" title=\"Array 陣列\"></a>Array 陣列</h2><blockquote>\n<p>Array 原本的英文意思是數列，有興趣的可以去查字典或是 Google 看看。透過英文原本的意思，再回到程式來看，會比較知道為什麼要取這樣的名字，其實沿用原本英文的意義，這樣就會好懂些！</p>\n</blockquote>\n<blockquote>\n<p>陣列內可以是<strong>原始的資料類型</strong>、<strong>其他陣列</strong>、<strong>函式</strong>等等。 要注意的是，陣列是個<strong>有順序性的集合</strong>，且只能透過 <code>[]</code> 來存取。</p>\n</blockquote>\n<h3 id=\"一切從變數開始\"><a href=\"#一切從變數開始\" class=\"headerlink\" title=\"一切從變數開始\"></a>一切從變數開始</h3><p>JavaScript 的世界，是從<strong>變數</strong>開始，然後用 <code>console.log</code> 做驗證。所以在陣列的觀念中也是從變數延伸，但如果變數很多的時候，不可能把所有的變數都一股腦丟給對方，這樣收到一堆變數會很崩潰。所以陣列的出現就是將<strong>相同的變數</strong>集合成一個數列，於是陣列就這樣出現了，透過英文的意思來聯想會比較好記!。</p>\n<hr>\n<p>複習一下變數的寫法是，用 「var」 宣告變數，自定義「變數名稱」，給予變數的「值」，如下所示：</p>\n<p><code>var man = &quot;menName&quot;;</code></p>\n<p>但工作上不可能只有一排變數，如果以家庭為例：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> father = <span class=\"string\">\"Tom\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> mother = <span class=\"string\">\"Mary\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> son = <span class=\"string\">\"John\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> daughter = <span class=\"string\">\"Linda\"</span>;</span><br></pre></td></tr></table></figure>\n\n<p>如上就有四個變數，但如果<strong>變數項目增加，但內容不同</strong>該怎麼辦? 像是有 4 張椅子，有紅色，有藍色，就會變下方這樣：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> father = <span class=\"string\">\"Tom\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> mother = <span class=\"string\">\"Mary\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> son = <span class=\"string\">\"John\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> daughter = <span class=\"string\">\"Linda\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> chair = <span class=\"number\">4</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> chair1 = <span class=\"string\">\"red\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> chair2 = <span class=\"string\">\"blue\"</span>;</span><br></pre></td></tr></table></figure>\n\n<p>這樣程式碼就變多了，如果要套很多資料，也不好撰寫，可能要寫好幾次，這時候就需要陣列。</p>\n<hr>\n<h3 id=\"陣列的寫法\"><a href=\"#陣列的寫法\" class=\"headerlink\" title=\"陣列的寫法\"></a>陣列的寫法</h3><p>一樣是用變數宣告，<strong>自定義</strong>陣列名稱，但陣列要用<strong>中括號</strong> <code>[]</code> 呈現，結束要用<strong>分號</strong> <code>;</code> 收尾，寫法如下：</p>\n<p><code>var array = [&quot;a&quot;];</code></p>\n<p>所以椅子有四張，有紅色，有藍色可以這樣寫成陣列，有<strong>相同的名稱</strong>，有<strong>不同的參數</strong>，要用<strong>逗號</strong> <code>,</code> 分開，呈現如下：</p>\n<p><code>var chair =[&quot;red&quot; , &quot;blue&quot;];</code></p>\n<hr>\n<h3 id=\"陣列的排序\"><a href=\"#陣列的排序\" class=\"headerlink\" title=\"陣列的排序\"></a>陣列的排序</h3><p>一般排序的邏輯會從 1 開始，但陣列的世界是從 0 開始，所以今天如果家裡有四個地方要增加桌子，就要增加四個變數，但這樣太多行了，如果使用陣列，並且知道哪個房間有幾張桌子，可以這樣寫，目前實務上也比較常見這樣的寫法，要抓取陣列資料會這樣寫：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> desk = [<span class=\"number\">4</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>];</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(desk[<span class=\"number\">0</span>]); <span class=\"comment\">// 因為排序第一是 4，所以結果會出現 4</span></span><br></pre></td></tr></table></figure>\n\n<p>以此類推，如果在 console 裡面的中括號，寫其他順序，會出現相對應的結果。</p>\n<p>也可以這樣寫：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> desk = [<span class=\"number\">4</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>];</span><br><span class=\"line\"><span class=\"keyword\">var</span> desk1 = desk[<span class=\"number\">0</span>];</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(desk[<span class=\"number\">0</span>]); <span class=\"comment\">// 結果會出現 4</span></span><br></pre></td></tr></table></figure>\n\n<hr>\n<h3 id=\"length-長度\"><a href=\"#length-長度\" class=\"headerlink\" title=\"length 長度\"></a>length 長度</h3><p>要查陣列的資料長度可以使用 length 這個語法，英文原意也是長度的意思。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> desk = [<span class=\"number\">4</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>];</span><br><span class=\"line\"><span class=\"keyword\">var</span> desk1 = desk[<span class=\"number\">0</span>];</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(desk[<span class=\"number\">0</span>]); <span class=\"comment\">// 結果會出現 4</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(desk.length); <span class=\"comment\">//結果會出現 4，代表有陣列的長度有四個</span></span><br></pre></td></tr></table></figure>\n\n<hr>\n<h3 id=\"push-增加陣列的語法\"><a href=\"#push-增加陣列的語法\" class=\"headerlink\" title=\".push 增加陣列的語法\"></a>.push 增加陣列的語法</h3><p>若想要在陣列外新增元素時，可以透過 <code>number.push()</code> 這個語法增加，_透過 <code>.</code> 代表要增加後面的屬性_：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> number = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>];</span><br><span class=\"line\">number.length; <span class=\"comment\">// 會顯示 3，指有三個陣列資料</span></span><br><span class=\"line\"></span><br><span class=\"line\">number.push(<span class=\"number\">4</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(number); <span class=\"comment\">// [1, 2, 3, 4] 新增第四個陣列資料</span></span><br></pre></td></tr></table></figure>\n\n<hr>\n<h3 id=\"splice-刪除陣列語法\"><a href=\"#splice-刪除陣列語法\" class=\"headerlink\" title=\".splice 刪除陣列語法\"></a>.splice 刪除陣列語法</h3><p>有增加就有刪除，可以透過 number.splice(起始位置,資料數量) 這個語法刪除:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> number = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>];</span><br><span class=\"line\">number.length; <span class=\"comment\">// 會顯示 3，指有三個陣列資料</span></span><br><span class=\"line\"></span><br><span class=\"line\">number.splice(<span class=\"number\">0</span>, <span class=\"number\">2</span>); <span class=\"comment\">//從第一筆資料刪除，刪除兩筆資料</span></span><br><span class=\"line\">number; <span class=\"comment\">// [3]</span></span><br></pre></td></tr></table></figure>\n\n<p>參考資料 <a href=\"https://ithelp.ithome.com.tw/articles/10190962\" target=\"_blank\" rel=\"noopener\">https://ithelp.ithome.com.tw/articles/10190962</a></p>\n","categories":["JavaScript Note"],"tags":["JavaScript"]},{"title":"Vue 筆記 - vue 的生命週期","url":"/vue-js-Note/20200318/1480837360/","content":"<p><img src=\"https://firebasestorage.googleapis.com/v0/b/timpicturespace.appspot.com/o/vue_lifecycle_hooks.png?alt=media&token=9cde8325-aa24-4714-994a-f088b67d102c\" alt=\"vue lifecycle hooks\"></p>\n<h2 id=\"何謂生命週期\"><a href=\"#何謂生命週期\" class=\"headerlink\" title=\"何謂生命週期?\"></a>何謂生命週期?</h2><blockquote>\n<p><strong>官方文件說明：</strong></p>\n<p>每個 Vue 實例在被創建時都要經過一系列的初始化過程——例如，需要設置數據監聽、編譯模板、將實例掛載到 DOM 並在數據變化時更新 DOM 等。同時在這個過程中也會運行一些叫做生命週期鉤子(hook)的<strong>函數</strong>，這給了用戶在不同階段添加自己的代碼的機會。</p>\n</blockquote>\n<p>當宣告一個 vue 實體後，會開始進入生命週期，下方說明圖可以得知分成幾個部分：</p>\n<p><img src=\"https://firebasestorage.googleapis.com/v0/b/timpicturespace.appspot.com/o/lifecycle.png?alt=media&token=868328e3-92d1-4323-a80f-929beb4e2a9f\" alt=\"vue 官方生命週期圖片\"></p>\n<ul>\n<li><p><strong>beforecreate</strong><br>元件實體剛被建立，屬性計算之前。</p>\n</li>\n<li><p><strong>created</strong><br>元件實體已經建立，屬性也綁定了，但 DOM 還沒有生成。</p>\n</li>\n<li><p><strong>beforeMount</strong><br>模板編譯 (template)或掛載至 HTML 之前。</p>\n</li>\n<li><p><strong>mounted</strong><br>模板編譯 (template)或掛載至 HTML 之後。</p>\n</li>\n<li><p><strong>beforeUpdate</strong><br>元件 (element) 被更新前。</p>\n</li>\n<li><p><strong>updated</strong><br>元件 (element) 被更新後。</p>\n</li>\n<li><p><strong>activated</strong></p>\n</li>\n<li><p><em>keep-alived*</em> 用，元件被<strong>啟動</strong>時呼叫。</p>\n</li>\n<li><p><strong>deactivated</strong></p>\n</li>\n<li><p><em>keep-alived*</em> 用，元件被<strong>移除</strong>時呼叫。</p>\n</li>\n<li><p><strong>beforeDistroy</strong><br>元件被銷毀前呼叫。</p>\n</li>\n<li><p><strong>destroyed</strong><br>元件被銷毀後呼叫。</p>\n</li>\n</ul>\n<blockquote>\n<p>beforeDistroy，destroyed 較少使用。</p>\n</blockquote>\n<p>以上它們的資料型態全都是 function。</p>\n<h2 id=\"常用的生命週期狀態\"><a href=\"#常用的生命週期狀態\" class=\"headerlink\" title=\"常用的生命週期狀態\"></a>常用的生命週期狀態</h2><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> vm = <span class=\"keyword\">new</span> Vue(&#123;</span><br><span class=\"line\">\tel: <span class=\"string\">'#app'</span>,</span><br><span class=\"line\">\tdata: &#123;</span><br><span class=\"line\">  <span class=\"comment\">//資料選項</span></span><br><span class=\"line\">\t&#125;,</span><br><span class=\"line\">\tbeforeCreate() &#123;</span><br><span class=\"line\">\t<span class=\"comment\">//實體初始化。</span></span><br><span class=\"line\">\t&#125;,</span><br><span class=\"line\">\tcreated() &#123;</span><br><span class=\"line\">\t<span class=\"comment\">//實體建立完成。資料 $data 已可取得，但 $el 屬性還未被建立。</span></span><br><span class=\"line\">\t&#125;,</span><br><span class=\"line\">\tbeforeMount() &#123;</span><br><span class=\"line\">\t<span class=\"comment\">//執行元素掛載之前。</span></span><br><span class=\"line\">\t&#125;,</span><br><span class=\"line\">\tmounted() &#123;</span><br><span class=\"line\">\t<span class=\"comment\">//元素已掛載， $el 被建立。</span></span><br><span class=\"line\">\t&#125;,</span><br><span class=\"line\">\tbeforeUpdate() &#123;</span><br><span class=\"line\">\t<span class=\"comment\">//當資料變化時被呼叫，還不會描繪 View。</span></span><br><span class=\"line\">\t&#125;,</span><br><span class=\"line\">\tupdated() &#123;</span><br><span class=\"line\">\t<span class=\"comment\">//DOM 的更新已經完成，View 被顯示在畫面上。</span></span><br><span class=\"line\">\t&#125;,</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>參考資料:</p>\n<p><a href=\"https://cn.vuejs.org/v2/guide/instance.html#%E5%88%9B%E5%BB%BA%E4%B8%80%E4%B8%AA-Vue-%E5%AE%9E%E4%BE%8B\" target=\"_blank\" rel=\"noopener\">vue 官網</a></p>\n<p><a href=\"http://blog.tonycube.com/2017/04/vuejs-8-lifecycle.html\" target=\"_blank\" rel=\"noopener\">Vue.js (8) - Vue 實體與生命週期</a></p>\n<p><a href=\"https://medium.com/pierceshih/vue-js-%E5%AD%B8%E7%BF%92%E7%AD%86%E8%A8%98-day14-vue%E7%94%9F%E5%91%BD%E9%80%B1%E6%9C%9F-65bc934dfd47\" target=\"_blank\" rel=\"noopener\">「Vue.js 學習筆記 Day14」- Vue生命週期</a></p>\n","categories":["vue.js Note"],"tags":["vue.js"]},{"title":"Vue 筆記 - Vue 的實體與特性","url":"/vue-js-Note/20200318/2845412352/","content":"<p><img src=\"https://firebasestorage.googleapis.com/v0/b/timpicturespace.appspot.com/o/vue%20cover.png?alt=media&token=5f8b5aa0-eb3e-4d21-a715-07c5442dafbc\" alt=\"vue.js\"></p>\n<h2 id=\"Vue-的實體\"><a href=\"#Vue-的實體\" class=\"headerlink\" title=\"Vue 的實體\"></a>Vue 的實體</h2><p>Vue 的實體是透過 new 這個關鍵字來建立的。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> app = <span class=\"keyword\">new</span> Vue(&#123;</span><br><span class=\"line\">  <span class=\"comment\">//實體屬性</span></span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Vue-的起手式\"><a href=\"#Vue-的起手式\" class=\"headerlink\" title=\"Vue 的起手式\"></a>Vue 的起手式</h2><p>在 body 中的第一個 <code>&lt;div&gt;</code> 標籤中給一個 <code>id</code>，並且在實體中，先寫入一個 el (element 的意思)，會與 HTML 中 <code>id</code> 標籤名稱相同，下方給一個 <code>data</code> 的物件。</p>\n<blockquote>\n<p>注意：在實體屬性中，是物件的表示方式。</p>\n</blockquote>\n<p>所以起手式如下：</p>\n<figure class=\"highlight cmd\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;div id=\"app\"&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;/div&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">  var vm = new Vue(&#123;</span><br><span class=\"line\"><span class=\"function\">    el:'#<span class=\"title\">app</span>',</span></span><br><span class=\"line\"><span class=\"function\">    <span class=\"title\">data</span>: &#123;</span></span><br><span class=\"line\"><span class=\"function\">      //資料內容</span></span><br><span class=\"line\"><span class=\"function\">    &#125;,</span></span><br><span class=\"line\"><span class=\"function\">  &#125;)</span></span><br><span class=\"line\"><span class=\"function\">&lt;/<span class=\"title\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Vue-的實體基本屬性\"><a href=\"#Vue-的實體基本屬性\" class=\"headerlink\" title=\"Vue 的實體基本屬性\"></a>Vue 的實體基本屬性</h2><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> vm = <span class=\"keyword\">new</span> Vue(&#123;</span><br><span class=\"line\">  el: <span class=\"string\">\"#app\"</span>, <span class=\"comment\">//用來掛載 Vue 實體元素</span></span><br><span class=\"line\">  data: &#123; &#125;, <span class=\"comment\">//要綁定的資料</span></span><br><span class=\"line\">  props: &#123; &#125;, <span class=\"comment\">//接收外部資料的屬性</span></span><br><span class=\"line\">  methods: &#123; &#125;, <span class=\"comment\">//定義 vue 實體內使用的函式</span></span><br><span class=\"line\">  watch: &#123; &#125;, <span class=\"comment\">//觀察實體內資料變動</span></span><br><span class=\"line\">  computed: &#123; &#125;, <span class=\"comment\">//自動計算的屬性</span></span><br><span class=\"line\">  template: <span class=\"string\">\"...\"</span>, <span class=\"comment\">//提供 Vue 變更後的樣板</span></span><br><span class=\"line\">  component: &#123; &#125; <span class=\"comment\">//定義子元素</span></span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"el-與-data-的詳述\"><a href=\"#el-與-data-的詳述\" class=\"headerlink\" title=\"el 與 data 的詳述\"></a>el 與 data 的詳述</h2><h3 id=\"el\"><a href=\"#el\" class=\"headerlink\" title=\"el\"></a>el</h3><p>用來把 vue 實體與網頁 DOM 元素做綁定的關鍵實體，當 vue 實體<strong>沒有 <code>el</code> 屬性</strong>時，就只能透過 <strong>vm.$mount()</strong>手動編譯。</p>\n<h3 id=\"data\"><a href=\"#data\" class=\"headerlink\" title=\"data\"></a>data</h3><p>用來存放與實體綁定的資料，當實體建立後，可能過 <code>vm.\\$</code>data`` 取得 <code>data</code> 內的資料，實體內則是用 <code>this.xxx</code> 取得。在子元件時，需要用 <code>function()</code> 的形式回傳。</p>\n<blockquote>\n<p>data 內的屬性開頭名稱不可以為 <code>$</code> 或 <code>_</code>。</p>\n</blockquote>\n<h2 id=\"實際操作\"><a href=\"#實際操作\" class=\"headerlink\" title=\"實際操作\"></a>實際操作</h2><p>今天透過 Vue 建立一個 hello Vue!</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"app\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>&#123;&#123;message&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text\"</span> <span class=\"attr\">v-model</span>=<span class=\"string\">\"message\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> vm = <span class=\"keyword\">new</span> Vue(&#123;</span><br><span class=\"line\">      el: <span class=\"string\">'#app'</span>,</span><br><span class=\"line\">      data: &#123;</span><br><span class=\"line\">        message: <span class=\"string\">'hello! Vue!'</span>,</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&lt;<span class=\"regexp\">/script&gt;</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><code></code> 概念有點像 ES6，變數中給予什麼內容，透過大括號會呈現在網頁上。</li>\n<li>使用 <code>v-model</code> 建立資料，對應到 <code>data</code> 的 <code>message</code> 的內容，就會渲染在網頁上。</li>\n</ul>\n<p>因為 <code>input</code> 跟 <code>p</code> 段落都是使用相同的資料，所以在 <code>input</code> 輸入新的資料， <code>p</code> 段落會跟著更新。</p>\n<p><a href=\"https://codepen.io/hnzxewqw/pen/gOpKRwV\" target=\"_blank\" rel=\"noopener\">CodePen</a></p>\n","categories":["vue.js Note"],"tags":["vue.js"]},{"title":"JS 筆記 - ES6 功能：在 JavaScript 中快速組字串","url":"/JavaScript-Note/20200317/144503038/","content":"<p><img src=\"https://firebasestorage.googleapis.com/v0/b/timpicturespace.appspot.com/o/js-ES6.png?alt=media&token=0bf94bee-c7cd-4cc0-b619-45e5bf71d07b\" alt=\"ES6\"></p>\n<h2 id=\"條件\"><a href=\"#條件\" class=\"headerlink\" title=\"條件\"></a>條件</h2><blockquote>\n<ul>\n<li>日期：2020.3.17 (官網不定期更新)</li>\n<li>編輯器：Visual Studio Code</li>\n<li>語法：ES6</li>\n</ul>\n</blockquote>\n<p>會註記上日期原因是 Visual Studio Code 很多功能會一直更新。</p>\n<blockquote>\n<p>官網說明：<a href=\"https://code.visualstudio.com/docs/editor/emmet。\" target=\"_blank\" rel=\"noopener\">https://code.visualstudio.com/docs/editor/emmet。</a></p>\n</blockquote>\n<h2 id=\"修改編輯器內的設定\"><a href=\"#修改編輯器內的設定\" class=\"headerlink\" title=\"修改編輯器內的設定\"></a>修改編輯器內的設定</h2><p>選擇到「設定」，並找到「延伸模組」中的 Emmet，並複製這一段程式碼，並且將其選項「打勾」。</p>\n<figure class=\"highlight cmd\"><table><tr><td class=\"code\"><pre><span class=\"line\">\"emmet.triggerExpansionOnTab\": true</span><br></pre></td></tr></table></figure>\n\n<p>如下圖：</p>\n<p><img src=\"https://firebasestorage.googleapis.com/v0/b/timpicturespace.appspot.com/o/vscodeSetting.png?alt=media&token=c8e2164a-9aff-4da0-8c95-57b9edb6b821\" alt=\"Emmet 設定\"></p>\n<p>找到 <strong>Include Languages</strong> 選項，再選擇 <strong>在 <em>setting.json</em> 內編輯</strong>。<br>就會看到剛剛打勾的選項也在其中，並把這個片段的程式碼貼到原本程式碼中的最下方。</p>\n<figure class=\"highlight cmd\"><table><tr><td class=\"code\"><pre><span class=\"line\">\"emmet.includeLanguages\": &#123;</span><br><span class=\"line\">    \"javascript\": \"javascriptreact\",</span><br><span class=\"line\">    \"vue-html\": \"html\",</span><br><span class=\"line\">    \"razor\": \"html\",</span><br><span class=\"line\">    \"plaintext\": \"pug\"</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>這樣就完成可以在 js 中組 HTML 字串囉!!如下圖: </p>\n<p><img src=\"https://firebasestorage.googleapis.com/v0/b/timpicturespace.appspot.com/o/vscodeSetting03.png?alt=media&token=9e188f2a-7311-4dd5-b3d7-689d4d3e3173\" alt=\"完成設定\"></p>\n<h2 id=\"用-JS-來組字串吧\"><a href=\"#用-JS-來組字串吧\" class=\"headerlink\" title=\"用 JS 來組字串吧!\"></a>用 JS 來組字串吧!</h2><p>會用 JS 組字串的情境，大概像是<strong>口罩地圖</strong>之類的網頁，因為有後端資料庫需要呈現一些內容，要透過 AJAX 取得資料後，渲染在網頁上，那如果透過手動打字串，會非常的繁雜且容易出錯。</p>\n<p>下方有一個清單，裡面沒有任何資料：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">ul</span> <span class=\"attr\">class</span>=<span class=\"string\">\"list\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"js/all.js\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>如果要透過 JS 渲染在網頁上，可以這樣寫：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> list = <span class=\"built_in\">document</span>.querySelector(<span class=\"string\">'.list'</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> imgUrl = <span class=\"string\">'https://images.unsplash.com/photo-1558980664-3a031cf67ea8?ixlib=rb-1.2.1&amp;ixid=eyJhcHBfaWQiOjEyMDd9&amp;auto=format&amp;fit=crop&amp;w=1950&amp;q=80'</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> title = <span class=\"string\">'this is Title'</span>;</span><br></pre></td></tr></table></figure>\n<p>先宣告所要使用的變數，那 imgUrl 可能會是 AJAX 資料。</p>\n<h3 id=\"如何組字串\"><a href=\"#如何組字串\" class=\"headerlink\" title=\"如何組字串\"></a>如何組字串</h3><p>既然我們已經使用了插件，在渲染前就可以依照 HTML 的方式輸入的<strong>結構</strong>，</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\">li&gt;h2+img</span><br></pre></td></tr></table></figure>\n<p>在按下 <code>tab</code> 鍵，就會自動展開，</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\">list.innerHTML=<span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">  <span class=\"tag\">&lt;<span class=\"name\">h2</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">h2</span>&gt;</span></span></span><br><span class=\"line\">  &lt;img src=\"\" alt=\"\"/&gt;</span><br><span class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>真是太神奇了</p>\n</blockquote>\n<p>再來加上 ES6 的語法 <code>${變數名稱}</code>，套入上方變數資料，就會變成這樣:</p>\n<ul>\n<li>${imgUrl} //帶入圖片資料</li>\n<li>${title} //帶入 title 資料</li>\n</ul>\n<blockquote>\n<p>用法就是在前面加一個 <code>$</code> 字號，再加上一個<strong>大括弧</strong>，裡面放<strong>變數名稱</strong>。<br>最後兩邊再加上<a href=\"https://zh.wikipedia.org/zh-tw/%E9%87%8D%E9%9F%B3%E7%AC%A6\" target=\"_blank\" rel=\"noopener\">重音符</a>(與鍵盤 「~」 同一顆按鍵)，就完成資料的輸入了。</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\">list.innerHTML=<span class=\"string\">`&lt;li&gt;</span></span><br><span class=\"line\"><span class=\"string\">  &lt;h2&gt;<span class=\"subst\">$&#123;title&#125;</span>&lt;/h2&gt;</span></span><br><span class=\"line\"><span class=\"string\">  &lt;img src=\"<span class=\"subst\">$&#123;imgUrl&#125;</span>\" alt=\"\"/&gt;</span></span><br><span class=\"line\"><span class=\"string\">&lt;/li&gt;`</span></span><br></pre></td></tr></table></figure>\n\n<p>Codepen <a href=\"https://codepen.io/hnzxewqw/pen/BaNxeJE\" target=\"_blank\" rel=\"noopener\">https://codepen.io/hnzxewqw/pen/BaNxeJE</a></p>\n<h2 id=\"心得\"><a href=\"#心得\" class=\"headerlink\" title=\"心得\"></a>心得</h2><p>學習到這個組字串的語法真的太棒了，先前因為手動組字串，中間的加號，弄得會很混亂，而且速度好慢，重點還容易打錯!!</p>\n","categories":["JavaScript Note"],"tags":["JavaScript","ES6"]},{"title":"Vue 筆記 - Vue 的基本認識與介紹","url":"/vue-js-Note/20200316/3744633474/","content":"<p><img src=\"https://firebasestorage.googleapis.com/v0/b/timpicturespace.appspot.com/o/vue%20cover.png?alt=media&token=5f8b5aa0-eb3e-4d21-a715-07c5442dafbc\" alt=\"vue.js\"></p>\n<h2 id=\"Vue-的介紹\"><a href=\"#Vue-的介紹\" class=\"headerlink\" title=\"Vue 的介紹\"></a>Vue 的介紹</h2><p>vue 音同 「view」，是一個簡單輕量的 JS 漸進式框架，也可以與其他前端框架的函式庫並存共用，有趣的是原本 vue 不是以框架為前提的建構，原本是 library 出發，但後面就慢慢變成了 framework 了。Vue 不支持 IE8 及以下版本，因為 Vue 使用了 IE8 無法模擬的 ECMAScript 5 特性。但它支持所有兼容 ECMAScript 5 的瀏覽器。</p>\n<h3 id=\"vue-DevTools\"><a href=\"#vue-DevTools\" class=\"headerlink\" title=\"vue DevTools\"></a>vue DevTools</h3><p>推薦一個 Chrome 插件，在你的瀏覽器上安裝 <a href=\"https://chrome.google.com/webstore/detail/vuejs-devtools/nhdogjmejiglipccpnnnanhbledajbpd?hl=zh-tw\" target=\"_blank\" rel=\"noopener\">Vue Devtools</a>。可以透過這個工具來檢查 vue 開發時遇到的錯誤。</p>\n<h2 id=\"關注點分離\"><a href=\"#關注點分離\" class=\"headerlink\" title=\"關注點分離\"></a>關注點分離</h2><p>開發者只要專注在<strong>畫面元素</strong>，以及對應的<strong>資料變化</strong>即可， vue 是用資料來控制的畫面的，與原本學習 JavaScript 的概念有點不同。是以操作物件模型為基礎的開發模式，直接描述<strong>狀態</strong>與 <strong>DOM 元素</strong>的對應關係，改變的是<strong>資料</strong>，並不是直接操作 DOM 元素。</p>\n<h2 id=\"漸進式框架\"><a href=\"#漸進式框架\" class=\"headerlink\" title=\"漸進式框架\"></a>漸進式框架</h2><p><img src=\"https://firebasestorage.googleapis.com/v0/b/timpicturespace.appspot.com/o/vueAll.png?alt=media&token=e8437854-f74d-46b2-b759-5de585a4855a\" alt=\"vue 漸進式框架\"></p>\n<p>後續還有 vue-router、vuex、Vue-Cli…等等。</p>\n<h2 id=\"採用-MVVM-模式\"><a href=\"#採用-MVVM-模式\" class=\"headerlink\" title=\"採用 MVVM 模式\"></a>採用 MVVM 模式</h2><p>什麼是 MVVM?</p>\n<p><img src=\"https://firebasestorage.googleapis.com/v0/b/timpicturespace.appspot.com/o/vue-MVVM.png?alt=media&token=3bbf1341-6a9d-4bf5-bc3a-39be4c310883\" alt=\"MVVM\"></p>\n<p>也就是前面提到的關注點分離的概念，Model, View-Model, View，透過修改資料的內容，便立即反映到畫面上，只要透過 vue 的實體與 HTML 的實體連結，就可以輕易地控制網頁元素。</p>\n<h2 id=\"系統元件簡介\"><a href=\"#系統元件簡介\" class=\"headerlink\" title=\"系統元件簡介\"></a>系統元件簡介</h2><p>系統元件是 Vue 的另一個重要概念，因為它是一種抽象，允許我們使用小型、獨立和通常可複用的組件構建大型應用，幾乎任意類型的應用界面都可以抽象為一個組件樹：</p>\n<p><img src=\"https://firebasestorage.googleapis.com/v0/b/timpicturespace.appspot.com/o/vue-%E7%B3%BB%E7%B5%B1%E5%85%83%E4%BB%B6.png?alt=media&token=16a76656-6caa-4fc1-ab53-8170037e615d\" alt=\"系統元件\"></p>\n<p>在一個大型應用中，有必要將整個應用程序劃分為組件，以使開發時更容易管理。</p>\n<h2 id=\"版本間的差異\"><a href=\"#版本間的差異\" class=\"headerlink\" title=\"版本間的差異\"></a>版本間的差異</h2><p><img src=\"https://firebasestorage.googleapis.com/v0/b/timpicturespace.appspot.com/o/vue%20soft.png?alt=media&token=b1a3a480-e1cf-4bd7-8a64-2bdad58cc0c7\" alt=\"版本差異\"></p>\n<p>在 <a href=\"https://cn.vuejs.org/v2/guide/installation.html\" target=\"_blank\" rel=\"noopener\">vue 官方網站</a>會看到兩種版本可以下載，一個是<strong>開發版本</strong>，一個是<strong>產品版本</strong>，通常會兩個都下載，但在開發時會使用開發的版本，等開發完畢變成產品要上線前，會更換成產品版本，原因是產品版本是經過壓縮後的大小。</p>\n<h2 id=\"透過-CDN-加入專案\"><a href=\"#透過-CDN-加入專案\" class=\"headerlink\" title=\"透過 CDN 加入專案\"></a>透過 CDN 加入專案</h2><p>對於<strong>製作原型</strong>或<strong>學習</strong>，你可以這樣使用最新版本：</p>\n<figure class=\"highlight cmd\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;script src=\"https://cdn.jsdelivr.<span class=\"built_in\">net</span>/npm/vue/dist/vue.js\"&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n\n<p>對於生產環境，我們推薦鏈接到一個明確的版本號和構建文件，以避免新版本造成的不可預期的破壞：</p>\n<figure class=\"highlight cmd\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;script src=\"https://cdn.jsdelivr.<span class=\"built_in\">net</span>/npm/vue@<span class=\"number\">2</span>.<span class=\"number\">6</span>.<span class=\"number\">11</span>\"&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n\n<p>參考文章 <a href=\"https://cn.vuejs.org/v2/guide/installation.html\" target=\"_blank\" rel=\"noopener\">https://cn.vuejs.org/v2/guide/installation.html</a></p>\n","categories":["vue.js Note"],"tags":["vue.js"]},{"title":"JS 筆記 - 利用函式 function 寫一個計算題","url":"/JavaScript-Note/20200316/526717564/","content":"<p><img src=\"https://firebasestorage.googleapis.com/v0/b/timpicturespace.appspot.com/o/JavaScript%20note-01.jpg?alt=media&token=7bee0261-72ac-4de4-9f5a-f39d58735b7d\" alt=\"JavaScript Note\"></p>\n<p>紀錄用函式 function 寫一個計算題，透過練習題與自己寫幾次程式碼，就比較了解 <strong>var</strong>、<strong>function</strong>、<strong>return</strong> 彼此的關係。</p>\n<h3 id=\"目前簡易歸類下面三個概念：\"><a href=\"#目前簡易歸類下面三個概念：\" class=\"headerlink\" title=\"目前簡易歸類下面三個概念：\"></a>目前簡易歸類下面三個概念：</h3><ul>\n<li>JavaScript 裡的變數是基本的元素。</li>\n<li>function 是建立許多要使用的功能，但無法直接執行，需要時再取出來用。</li>\n<li>return 是為了有比較複雜的功能時，可以節省時間，不需要一直反覆打重複的程式碼。<blockquote>\n<p>EX. 買衣服的購物後台如果要買很多品項，甚至還要點選不同尺寸的數量，還有不同的加工，項目一多，如果還要逐步撰寫程式碼，那程式碼就會很長一串，使用 function + return 就可以達到只要功能俱足，利用 return 帶回關鍵數值，就可以快速得到結果。</p>\n</blockquote>\n</li>\n</ul>\n<hr>\n<h2 id=\"用-function-寫個計算題\"><a href=\"#用-function-寫個計算題\" class=\"headerlink\" title=\"用 function 寫個計算題\"></a>用 function 寫個計算題</h2><p>主要練習內容：會使用到 JS 的 <code>textContent</code> 屬性，<code>input</code> 表格裡面的數值是用 <code>id</code> 來控制，並對應到 JS 的內容，到時候就可以因為輸入數字後，點擊 <code>Button</code> 後，就能計算出結果！這次要寫的畫面如下：</p>\n<p><img src=\"https://firebasestorage.googleapis.com/v0/b/timpicturespace.appspot.com/o/JS8-calculate.png?alt=media&token=93f803f6-5918-48c1-a5d1-c1857b26dac8\" alt=\"JS 計算題\"></p>\n<h3 id=\"HTML\"><a href=\"#HTML\" class=\"headerlink\" title=\"HTML\"></a>HTML</h3><figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"> <span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>JavaScript 透過表單獲取數值練習<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>漢堡 120 元<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>可樂 60 元<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>我要 <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text\"</span> <span class=\"attr\">id</span>=<span class=\"string\">\"hamNumId\"</span>&gt;</span> 個漢堡 + <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text\"</span> <span class=\"attr\">id</span>=<span class=\"string\">\"cokeNumId\"</span>&gt;</span> 杯可樂<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">type</span>=<span class=\"string\">\"button\"</span> <span class=\"attr\">id</span>=<span class=\"string\">\"countId\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"計算\"</span>&gt;</span>計算<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>總共是 <span class=\"tag\">&lt;<span class=\"name\">strong</span> <span class=\"attr\">class</span>=<span class=\"string\">\"total\"</span> <span class=\"attr\">id</span>=<span class=\"string\">\"totalId\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">strong</span>&gt;</span> 元<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"js/all.js\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"JS-起手式\"><a href=\"#JS-起手式\" class=\"headerlink\" title=\"JS 起手式\"></a>JS 起手式</h2><p>因為今天最終的目的，是要透過 <code>button</code> 按鈕來取得計算數值，所以一開始的程式碼式這一段：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'countId'</span>).onclick = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>說明：透過 <code>getElementById</code> 取得 <code>button</code> 的 <code>id</code>，並且給他一個 <code>onclick</code> 點擊事件，這個事件的功能會包含以下內容 (將其功能的內容寫於其中)。</p>\n<h3 id=\"JavaScript\"><a href=\"#JavaScript\" class=\"headerlink\" title=\"JavaScript\"></a>JavaScript</h3><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'countId'</span>).onclick = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">//button 使用getElementById (後面不用加點，直接套 id 名稱) 加上一個 onclick 事件，並執行 function 內容</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> hamNum = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'hamNumId'</span>).value;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> cokeNum = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'cokeNumId'</span>).value;</span><br><span class=\"line\">  <span class=\"comment\">//命名變數為抓取 input 裡面的數值，所以要用 value</span></span><br><span class=\"line\">  alert(hamNum);</span><br><span class=\"line\">  alert(cokeNum);</span><br><span class=\"line\">  <span class=\"comment\">//使用 alert 做驗證</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ol>\n<li>透過在 <code>input</code> 輸入數值後，再利用 <code>id</code> 抓取其數值，按下 <code>button</code> 時會產生 <code>onclick</code> 事件，這邊先使用 alert。 </li>\n<li>命名變數是透過抓取 <code>id</code> 中的在 <code>input</code> 所得到的值(value)。</li>\n<li>alert 視窗功能做驗證，會彈跳出在 <code>input</code> 輸入的數值。<br>可以玩一下 <a href=\"http://https://codepen.io/hnzxewqw/pen/ExxzraX\" target=\"_blank\" rel=\"noopener\">codepen</a> 看看結果！</li>\n</ol>\n<hr>\n<h2 id=\"typeof-確認屬性\"><a href=\"#typeof-確認屬性\" class=\"headerlink\" title=\"typeof 確認屬性\"></a>typeof 確認屬性</h2><p>在進行計算前，要先確認 input 的值是 string 還是 number，如果要透過 JavaScript 做計算，要先確認輸入的值要是 number，才能正常運算，可以使用下面的方式，確認類型。</p>\n<p>例如現在要確認 hamNum 裡面的值是什麼，就可以這樣確認：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> hamNum = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'hamNumId'</span>).value;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"keyword\">typeof</span>(hamNum)) <span class=\"comment\">//結果會是 string</span></span><br></pre></td></tr></table></figure>\n\n<p>這時如果在 <code>input</code> 輸入 3，<code>console.log</code> 的結果就會變成兩個字串相加，”3” + “3”= 33，但有趣的是，倘若是用相乘，結果竟然會是 “3” * “3” = 9</p>\n<hr>\n<h2 id=\"parseInt-轉換屬性\"><a href=\"#parseInt-轉換屬性\" class=\"headerlink\" title=\"parseInt 轉換屬性\"></a>parseInt 轉換屬性</h2><p>在確認類行為 string 後，要先轉換 <strong>文字變成數字 (string to number)</strong> 的屬性，就可以透過函式來加總。程式碼如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> hamNum = <span class=\"built_in\">parseInt</span>(<span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'hamNumId'</span>).value)</span><br></pre></td></tr></table></figure>\n\n<p>將要在 <code>id</code> 所得到的值用 <code>parseInt</code> 語法轉換成數字。</p>\n<hr>\n<p>這時候再把品項的金額用變數做宣告，也將要得到的結果寫在最下方，程式碼如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'countId'</span>).onclick = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//button 使用getElementById (後面不用加點，直接套 id 名稱) 加上一個 onclick 事件，並執行 function 內容</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> hamPrice = <span class=\"number\">50</span>;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> cokePrice = <span class=\"number\">20</span>;</span><br><span class=\"line\">    <span class=\"comment\">//定義變數的內容</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> hamNum = <span class=\"built_in\">parseInt</span>(<span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'hamNumId'</span>).value) * hamPrice;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> cokeNum = <span class=\"built_in\">parseInt</span>(<span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'cokeNumId'</span>).value) * cokePrice;</span><br><span class=\"line\">    <span class=\"comment\">//命名變數為抓取 input 裡面的數值</span></span><br><span class=\"line\">    <span class=\"comment\">//將要在 id 所得到的值用 parseInt 語法轉換成數字。</span></span><br><span class=\"line\">    <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'totalId'</span>).textContent = hamNum + cokeNum</span><br><span class=\"line\">    <span class=\"comment\">//最終結算的結果</span></span><br></pre></td></tr></table></figure>\n\n<p>可以透過 Codepen 玩玩看! <a href=\"https://codepen.io/hnzxewqw/pen/Yzzbgzm\" target=\"_blank\" rel=\"noopener\">https://codepen.io/hnzxewqw/pen/Yzzbgzm</a></p>\n<hr>\n<h2 id=\"return-回傳\"><a href=\"#return-回傳\" class=\"headerlink\" title=\"return 回傳\"></a>return 回傳</h2><p>透過 <code>return</code> 回傳的屬性，可以運算比較複雜的內容，當商品或是後台採購品項較多時，就不用一直打程式碼，前提是參數內的數值要同一個才可以，比如下方例子：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">count</span>(<span class=\"params\">price</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> addTax(price * <span class=\"number\">0.8</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//商品價格要打八折時</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">count</span>(<span class=\"params\">price</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> addTax * <span class=\"number\">1.05</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//當商品要開立發票時</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(count(<span class=\"number\">500</span>);)</span><br><span class=\"line\"><span class=\"comment\">//return 會把 count 的參數 500，套回 function 中，會得到下面結果</span></span><br><span class=\"line\"><span class=\"comment\">// 500 * 0.8</span></span><br><span class=\"line\"><span class=\"comment\">// 500 * 1.05</span></span><br></pre></td></tr></table></figure>\n\n\n<h2 id=\"心得\"><a href=\"#心得\" class=\"headerlink\" title=\"心得\"></a>心得</h2><p>這次學習到 JavaScript 新的特性，結合之前所學的，透過 function 建立自己要的功能，在使用不同的語法整理取得自己要的函式，截至目前為止，JS 對我來說是很細緻的給予網頁呈現我想要的行為，並且這個行為會讓使用者更方便，也清楚明瞭好操作！<strong>JS 的語法相對直覺，掌握住一個指令一個動作，不要在 function 建立太複雜的內容。</strong></p>\n","categories":["JavaScript Note"],"tags":["JavaScript"]},{"title":"JS 筆記 - function 函式 Hoisting 提升觀念","url":"/JavaScript-Note/20200309/1212075218/","content":"<p><img src=\"https://firebasestorage.googleapis.com/v0/b/timpicturespace.appspot.com/o/JavaScript%20note-01.jpg?alt=media&token=7bee0261-72ac-4de4-9f5a-f39d58735b7d\" alt=\"JavaScript Note\"></p>\n<p>瀏覽器在讀取程式碼基本上都是從上到下讀取，在變數的寫法，會是這樣的結果。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log(a); <span class=\"comment\">//undefind</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"number\">1</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(a); <span class=\"comment\">//1</span></span><br></pre></td></tr></table></figure>\n\n<p>上方變數的撰寫跟讀取的結果，會是由上到下讀取，所以在第一行 <code>console.log</code> 因為找不到變數所以結果會是 undefind，第三個 <code>console.log</code> 因為有讀到第二行的變數，所以找到了 a 的值為1。</p>\n<h2 id=\"那-function-呢\"><a href=\"#那-function-呢\" class=\"headerlink\" title=\"那 function 呢?\"></a>那 function 呢?</h2><p>加入一個 function，先看程式碼：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log(a); <span class=\"comment\">//undefind</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"number\">1</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(a); <span class=\"comment\">//1</span></span><br><span class=\"line\"></span><br><span class=\"line\">count();<span class=\"comment\">//會得到什麼?</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">count</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\"> <span class=\"built_in\">console</span>.log(<span class=\"string\">'hello!'</span>); </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>count 結果會是：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\">count();<span class=\"comment\">// hello!</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">count</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\"> <span class=\"built_in\">console</span>.log(<span class=\"string\">'hello!'</span>); </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>function 有一個 Hoisting 的向上提升的概念，就是瀏覽器會先把 function 設定為優先讀取，在瀏覽器的讀取順序會變成這樣：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">count</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\"> <span class=\"built_in\">console</span>.log(<span class=\"string\">'hello!'</span>); </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">count();<span class=\"comment\">// hello!</span></span><br></pre></td></tr></table></figure>\n\n<p>故在執行 function 的時候，function 名稱寫在上面或下面是沒有差的，但為了讓自己習慣所有程式碼都遵循由上到下讀取的方式，我還是會寫成剛上方一樣的方式，維持一個習慣寫法，也比較不會讓自己搞混！</p>\n<h2 id=\"補充\"><a href=\"#補充\" class=\"headerlink\" title=\"補充\"></a>補充</h2><p>Hositing 就是將<strong>變數</strong>&amp;<strong>函數</strong>提升到所有程式碼最前面，然後先存進記憶體中，後面在做賦值等動作。由此可知 Hositing 主要跟記憶體有關係，而 Hositing 只是一個觀念。</p>\n<hr>\n<p>文章參考:</p>\n<p><a href=\"https://hsiangfeng.github.io/javascript/20190419/3635730318/\" target=\"_blank\" rel=\"noopener\">https://hsiangfeng.github.io/javascript/20190419/3635730318/</a></p>\n<p><a href=\"https://developer.mozilla.org/zh-TW/docs/Glossary/Hoisting\" target=\"_blank\" rel=\"noopener\">https://developer.mozilla.org/zh-TW/docs/Glossary/Hoisting</a></p>\n","categories":["JavaScript Note"],"tags":["JavaScript"]},{"title":"JS 筆記 - 函式 function 搭配 return","url":"/JavaScript-Note/20200302/3851113860/","content":"<p><img src=\"https://firebasestorage.googleapis.com/v0/b/timpicturespace.appspot.com/o/JavaScript%20note-01.jpg?alt=media&token=7bee0261-72ac-4de4-9f5a-f39d58735b7d\" alt=\"JavaScript Note\"></p>\n<blockquote>\n<p>函式 function 搭配 return 是一個常用且好用的小技巧。</p>\n</blockquote>\n<hr>\n<h2 id=\"return-回傳\"><a href=\"#return-回傳\" class=\"headerlink\" title=\"return 回傳\"></a>return 回傳</h2><p>透過 <code>return</code> 回傳的屬性，可以運算比較複雜的內容，當商品或是後台採購品項較多時，就不用一直打程式碼，前提是參數內的數值要同一個才可以，比如下方例子：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">count</span>(<span class=\"params\">price</span>) </span>&#123; </span><br><span class=\"line\">  <span class=\"keyword\">return</span> addTax(price * <span class=\"number\">0.8</span>); <span class=\"comment\">// 商品價格要打八折時</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">count</span>(<span class=\"params\">price</span>) </span>&#123; <span class=\"comment\">// 當商品要開立發票時</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> addTax * <span class=\"number\">1.05</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(count(<span class=\"number\">500</span>);)</span><br><span class=\"line\"><span class=\"comment\">//return 會把 count 的參數 500，套回 function 中，會得到下面結果</span></span><br><span class=\"line\"><span class=\"comment\">// 500 * 0.8</span></span><br><span class=\"line\"><span class=\"comment\">// 500 * 1.05</span></span><br></pre></td></tr></table></figure>\n\n<p><code>return</code> 是幫助資料回傳的一個語法，讓 function 中的語法除了更簡潔外，也更可以提高程式碼閱讀性! 也可以透過判斷式的內容，讓 <code>return</code> 讓函式停止執行。</p>\n","categories":["JavaScript Note"],"tags":["JavaScript"]},{"title":"JS 筆記 - 全域變數與區域變數","url":"/JavaScript-Note/20200224/3133182567/","content":"<p><img src=\"https://firebasestorage.googleapis.com/v0/b/timpicturespace.appspot.com/o/JavaScript%20note-01.jpg?alt=media&token=7bee0261-72ac-4de4-9f5a-f39d58735b7d\" alt=\"JavaScript Note\"></p>\n<p>初學者記法：變數簡單分成兩種，一種在<strong>函式內</strong>、一種在<strong>函式外</strong>，聽起來簡單，但觀念大不同，來紀錄一下。</p>\n<h2 id=\"區域變數\"><a href=\"#區域變數\" class=\"headerlink\" title=\"區域變數\"></a>區域變數</h2><p>簡單來說就是在函式內的變數，函式是這樣寫的：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fName</span>(<span class=\"params\">aName</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> number = aName *<span class=\"number\">10</span>; <span class=\"comment\">//區域變數</span></span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(number); <span class=\"comment\">//驗證變數</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">fName(); <span class=\"comment\">//沒有輸入參數，執行函式</span></span><br></pre></td></tr></table></figure>\n\n<p>上面的寫法會得到的結果是 NaN，因為並沒有帶入其他參數，所以找不到任何的值。</p>\n<p>如果參數帶入 10，會變成這樣寫：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fName</span>(<span class=\"params\">aName</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> number = aName * <span class=\"number\">10</span>; <span class=\"comment\">//區域變數</span></span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(number); <span class=\"comment\">//驗證變數</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">fName(<span class=\"number\">10</span>); <span class=\"comment\">//帶入參數，執行函式</span></span><br></pre></td></tr></table></figure>\n\n<p>執行函式的帶入<strong>參數</strong>後，會帶到<strong>區域變數</strong>，驗證結果會變成 100。</p>\n<p>※區域變數會在執行之後<strong>自動銷毀</strong>，並<strong>同步釋放記憶體</strong>，以免瀏覽器跑很慢，讓使用者體驗不佳。</p>\n<hr>\n<p>以上為原則，但有原則就會有例外，</p>\n<h3 id=\"狀況：開發中也會遇到需要抓之前的變數\"><a href=\"#狀況：開發中也會遇到需要抓之前的變數\" class=\"headerlink\" title=\"狀況：開發中也會遇到需要抓之前的變數\"></a>狀況：開發中也會遇到需要抓之前的變數</h3><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fName</span>(<span class=\"params\">aName</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> number = aName * <span class=\"number\">10</span>; <span class=\"comment\">//區域變數</span></span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(number); <span class=\"comment\">//驗證變數</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">fName(<span class=\"number\">10</span>); <span class=\"comment\">//帶入參數，執行函式</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(number)</span><br></pre></td></tr></table></figure>\n\n<p>這時候 Chrome 開發工具就會顯示下圖：</p>\n<p><img src=\"https://firebasestorage.googleapis.com/v0/b/timpicturespace.appspot.com/o/JS5-1.png?alt=media&token=f24b0d8d-0249-441b-b21d-3eecf623056c\" alt=\"區域變數\"></p>\n<p>告訴我們抓不到數值，原因是上述提到，區域變數執行結束後會自動銷毀，然後這邊我記錄的是，<strong>在執行 console.log 的時候，上面一定要是宣告變數了才能驗證，不然會沒有結果。*</strong>(目前學到的概念是這樣，若有誤還請指正或未來修正)*</p>\n<hr>\n<p>但開發中遇到的狀況絕不會這麼單純，如果仍然要設定一個變數值，在區域變數外抓取的話可以這樣寫：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> number</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fName</span>(<span class=\"params\">aName</span>) </span>&#123;</span><br><span class=\"line\">  number = <span class=\"number\">10</span>; <span class=\"comment\">//區域變數</span></span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(number); <span class=\"comment\">//驗證變數</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">fName(); <span class=\"comment\">//執行函式</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(number);</span><br></pre></td></tr></table></figure>\n\n<p>在區域函數外新增一個 var 變數(全域變數)，當最後面的 console.log 執行變數驗證時，它會回去區域變數找到變數的設定值，在套進外面的 console.log 內。<br>得到的畫面如下圖：</p>\n<p><img src=\"https://firebasestorage.googleapis.com/v0/b/timpicturespace.appspot.com/o/JS5-2.png?alt=media&token=ccaee45f-ba98-44af-8b9f-b0a67451fb70\" alt=\"找外面的全域變數\"></p>\n<hr>\n<h2 id=\"全域變數\"><a href=\"#全域變數\" class=\"headerlink\" title=\"全域變數\"></a>全域變數</h2><p>簡單來說是在區域變數外的就是叫做全域變數，不過也有參考 <a href=\"http://https://ithelp.ithome.com.tw/articles/10191549\" target=\"_blank\" rel=\"noopener\">Kuro 老師的說法</a>：</p>\n<blockquote>\n<p>在 JavaScript 這門語言中，沒有所謂「全域變數」這種東西。更準確地說，我們所說的「全域變數」其實指的是「全域物件」(或者叫「頂層物件」) 的屬性。以瀏覽器來說，「全域物件」指的就是 <code>window</code>。</p>\n</blockquote>\n<p>這個說法更精準也更正確。</p>\n<p><strong>練習一個全域變數的函式：</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> number; <span class=\"comment\">//全域變數，沒有給予數值</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fName</span>(<span class=\"params\">aName</span>) </span>&#123;</span><br><span class=\"line\">  number = aName + <span class=\"number\">1</span>; <span class=\"comment\">//區域變數</span></span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(number); <span class=\"comment\">//驗證變數</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">fName(<span class=\"number\">10</span>); <span class=\"comment\">//執行函式</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(number);</span><br></pre></td></tr></table></figure>\n\n<p>設定一個全域變數在<strong>最外面</strong>，前面提到在區域變數執行後會註銷該變數效果，但這次裡面的區域變數把 <code>var</code> 變數宣告拿掉，這時他會去抓取執行函式裡面的參數值，在讓全域變數去找到區域變數所套入的數值，在 Chrome 開發工具就會顯示如下圖：</p>\n<p><img src=\"https://firebasestorage.googleapis.com/v0/b/timpicturespace.appspot.com/o/JS5-3.png?alt=media&token=e0284e6d-6f47-4b05-989d-6f1d3ee815ab\" alt=\"全域變數\"></p>\n<p>引用 Kuro 老師的文章有彙整以下結論：</p>\n<blockquote>\n<h3 id=\"什麼叫做全域物件的「屬性」呢？\"><a href=\"#什麼叫做全域物件的「屬性」呢？\" class=\"headerlink\" title=\"什麼叫做全域物件的「屬性」呢？\"></a>什麼叫做全域物件的「屬性」呢？</h3></blockquote>\n<blockquote>\n<p>舉個例子，我們在最外層透過 var 建立一個變數 a，像這樣：</p>\n<p><code>var a = 10;</code><br>一直以來我們都稱它叫「全域變數」對吧？<br>這個時候，請你在後面加一行：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"number\">10</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log( <span class=\"built_in\">window</span>.a );    <span class=\"comment\">// ?</span></span><br></pre></td></tr></table></figure>\n<p>看到了什麼？<br>這時你應該會看到剛剛指定給 a 的 10 這個數字才對。</p>\n<p>那麼就可以來下個結論：</p>\n<p>變數有效範圍 (<code>scope</code>) 的最小切分單位是 <code>function</code> (ES6 的 <code>let</code> 與 <code>const</code> 例外)<br>即使是寫在函式內，沒有 var 的變數會變成「全域變數」<br>全域變數指的是全域物件 (頂層物件) 的「屬性」</p>\n</blockquote>\n<hr>\n<h2 id=\"心得\"><a href=\"#心得\" class=\"headerlink\" title=\"心得\"></a>心得</h2><ol>\n<li>區域變數與全域變數的觀念要弄清楚，不然後面真的會學得很痛苦。JavaScript 有太多名稱要去記，當然不是死背，但需要一一消化跟了解。</li>\n<li>Chrome 的開發工具真的很貼心，都會顯示程式碼哪裡有錯誤，就不用很辛苦的慢慢去看程式碼。</li>\n</ol>\n<p>參考文章 <a href=\"https://ithelp.ithome.com.tw/articles/10191549\" target=\"_blank\" rel=\"noopener\">https://ithelp.ithome.com.tw/articles/10191549</a></p>\n","categories":["JavaScript Note"],"tags":["JavaScript"]},{"title":"JS 筆記 - 在函式 function 加入參數","url":"/JavaScript-Note/20200218/2420857626/","content":"<p><img src=\"https://firebasestorage.googleapis.com/v0/b/timpicturespace.appspot.com/o/JavaScript%20note-01.jpg?alt=media&token=7bee0261-72ac-4de4-9f5a-f39d58735b7d\" alt=\"JavaScript Note\"></p>\n<p>學習了變數 variable 跟函式 function 的基本認識，單元分開都很可以，最怕就是綜合應用，深怕我自己根基不夠穩，所以我拆了很細來學習，一次學一點，雖然慢，但觀念清楚比較重要。</p>\n<hr>\n<h2 id=\"函式帶入參數\"><a href=\"#函式帶入參數\" class=\"headerlink\" title=\"函式帶入參數\"></a>函式帶入參數</h2><p>函式基本寫法：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">number</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">\"Tim\"</span>); <span class=\"comment\">//字串要加引號</span></span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"number\">323</span>); <span class=\"comment\">//數字不用加引號</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">number(); <span class=\"comment\">//執行函式</span></span><br></pre></td></tr></table></figure>\n\n<p>在小括弧中可以帶入參數名稱，一樣是<strong>自定義</strong>。</p>\n<h3 id=\"練習帶入一個參數會這樣寫：\"><a href=\"#練習帶入一個參數會這樣寫：\" class=\"headerlink\" title=\"練習帶入一個參數會這樣寫：\"></a>練習帶入一個參數會這樣寫：</h3><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">math</span>(<span class=\"params\">number</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> total = number; <span class=\"comment\">//宣告變數的值等於參數</span></span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(total); <span class=\"comment\">//驗證結果是變數的名稱，但這邊不是輸入字串，故不用加上引號</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">math(<span class=\"number\">10</span>); <span class=\"comment\">//執行函式，並帶入參數</span></span><br></pre></td></tr></table></figure>\n\n<hr>\n<h3 id=\"函式-參數-運算\"><a href=\"#函式-參數-運算\" class=\"headerlink\" title=\"函式 + 參數 + 運算\"></a>函式 + 參數 + 運算</h3><p>參數可以帶入兩個、三個甚至無限多，並可以利用變數做加減乘除的方式來做更多元的變化。(變數的加減乘除是：<code>+</code>、<code>-</code>、<code>*</code>、<code>/</code> )</p>\n<p><strong>EX. 加法</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">math</span>(<span class=\"params\">numOne, numTwo</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> total = numOne + numTwo; <span class=\"comment\">//結果為兩個變數相加</span></span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(total); <span class=\"comment\">//驗證變數</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">math(<span class=\"number\">10</span>, <span class=\"number\">25</span>); <span class=\"comment\">//執行函式，並帶入參數</span></span><br></pre></td></tr></table></figure>\n\n<p>在 Chrome 的開發人員工具會顯示如下：</p>\n<p><img src=\"https://firebasestorage.googleapis.com/v0/b/timpicturespace.appspot.com/o/%E5%87%BD%E5%BC%8F%E5%B8%B6%E5%8F%83%E6%95%B8.png?alt=media&token=b77596ff-aa8e-453e-9d5e-3c1667933cf0\" alt=\"函式帶參數\"></p>\n<p>其他也可以在 <a href=\"https://codepen.io/hnzxewqw/pen/qBdrKKx\" target=\"_blank\" rel=\"noopener\">codepen</a> 調整不同的加減乘除方式玩玩看。</p>\n","categories":["JavaScript Note"],"tags":["JavaScript"]},{"title":"JS 筆記 - 認識函式 function 與使用","url":"/JavaScript-Note/20200211/3165847303/","content":"<p><img src=\"https://firebasestorage.googleapis.com/v0/b/timpicturespace.appspot.com/o/JavaScript%20note-01.jpg?alt=media&token=7bee0261-72ac-4de4-9f5a-f39d58735b7d\" alt=\"JavaScript Note\"></p>\n<p>到目前為止，發現 JS 的寫法非常直觀，跟 HTML 與 CSS 的思維不太一樣，之前學過一陣子 jQuery，會覺得思維模式有點不同，直觀卻又要很仔細，而且感受到<strong>電腦很笨</strong>，要一個口令一個動作，這次就要來學習如何告訴電腦我要的指令。</p>\n<hr>\n<h1 id=\"什麼是函式-funciton\"><a href=\"#什麼是函式-funciton\" class=\"headerlink\" title=\"什麼是函式 funciton\"></a>什麼是函式 funciton</h1><p>簡單來說「函式」指的是將一或多段程式指令包裝起來，可以重複使用，也方便維護。<a href=\"http://https://ithelp.ithome.com.tw/articles/10191549\" target=\"_blank\" rel=\"noopener\">(參考來源)</a></p>\n<p>這邊我覺得有一個有趣的事情，英文 function 有<strong>功能</strong>的意思，也的確在撰寫的時候好像透過幾段程式指令告訴電腦我要做什麼，所以可能是因為這樣，被翻譯成函式吧!?<br><em>因為從小數學很爛，所以看到什麼 “式” 都會特別緊張</em></p>\n<hr>\n<h2 id=\"函式的寫法\"><a href=\"#函式的寫法\" class=\"headerlink\" title=\"函式的寫法\"></a>函式的寫法</h2><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">name</span>(<span class=\"params\">params</span>) </span>&#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>用 function 做<strong>宣告</strong>，後面<strong>自定義</strong>一個名稱，加上<strong>小括弧</strong>(以後可以放參數用)，再把要寫入函式的程式碼用一個大括弧包起來</p>\n<hr>\n<h3 id=\"實際來寫一個練習：\"><a href=\"#實際來寫一個練習：\" class=\"headerlink\" title=\"實際來寫一個練習：\"></a>實際來寫一個練習：</h3><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">number</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'Tim'</span>) <span class=\"comment\">//字串要加引號</span></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"number\">323</span>) <span class=\"comment\">//數字不用加引號</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>但這樣只是建立好一個函式而已，不會被執行，若要執行函式，要多寫一行程式碼，會如下呈現：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">number</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'Tim'</span>) <span class=\"comment\">//字串要加引號</span></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"number\">323</span>) <span class=\"comment\">//數字不用加引號  </span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">number(); <span class=\"comment\">//執行函式</span></span><br></pre></td></tr></table></figure>\n\n<hr>\n<p>函式可以重複執行，如果要重複執行一樣的函式，只要再打上一樣的指令就可了，如下程式碼：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">number</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'Tim'</span>) <span class=\"comment\">//字串要加引號</span></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"number\">323</span>) <span class=\"comment\">//數字不用加引號    </span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">number(); <span class=\"comment\">//執行函式</span></span><br><span class=\"line\">number(); <span class=\"comment\">//重複執行函式</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"心得\"><a href=\"#心得\" class=\"headerlink\" title=\"心得\"></a>心得</h3><p>function 函式可以當作設定好的功能，等需要執行的時候再找到做好的功能拿出來使用就可以囉！</p>\n","categories":["JavaScript Note"],"tags":["JavaScript"]},{"title":"JS 筆記 - 認識變數 variable 與使用方法","url":"/JavaScript-Note/20200208/3675098643/","content":"<p><img src=\"https://firebasestorage.googleapis.com/v0/b/timpicturespace.appspot.com/o/JavaScript%20note-01.jpg?alt=media&token=7bee0261-72ac-4de4-9f5a-f39d58735b7d\" alt=\"JavaScript Note\"></p>\n<p>在學習 JavaScript 之前，都會聽到一堆專有名詞，結果專有名詞的白話文還是聽不懂，就覺得很可怕，心中產生排斥，但我發現如果心中產生排斥感，就會稍微拒絕學習該領域的東西，經過 HTML &amp; CSS、jQuery、RWD、Sass、Bootstrap4…等課程後，就比較沒這麼排斥這些「專有名詞」，這幾個月在前端領域中不斷的蒐集資料，也慢慢知道幾位大神級人物，這次的學習也有參考 Kuro 大大的在 <a href=\"http://https://ithelp.ithome.com.tw/users/20065504/ironman/1259\" target=\"_blank\" rel=\"noopener\">2018 鐵人賽</a>撰寫成<a href=\"http://https://www.tenlong.com.tw/products/9789864344130\" target=\"_blank\" rel=\"noopener\">書籍</a>的內容搭配<a href=\"http://https://www.hexschool.com/\" target=\"_blank\" rel=\"noopener\">六角學院</a>的<a href=\"http://https://www.hexschool.com/courses/javascript.html\" target=\"_blank\" rel=\"noopener\">課程</a>來看，廣度學習下，比較能知道課程跟書本內容在講什麼了。</p>\n<h2 id=\"認識變數-Variable\"><a href=\"#認識變數-Variable\" class=\"headerlink\" title=\"認識變數 Variable\"></a>認識變數 Variable</h2><p>簡單來說變數是用來儲存資料和進行運算的基本單位，可以將變數想像為一個盒子，用來存放資料。<br>更多詳盡的定義可以看<a href=\"http://https://ithelp.ithome.com.tw/articles/10190873\" target=\"_blank\" rel=\"noopener\">這篇</a></p>\n<h2 id=\"使用變數\"><a href=\"#使用變數\" class=\"headerlink\" title=\"使用變數\"></a>使用變數</h2><p>使用變數時，需要先使用 <code>var</code> 這個語法，告訴電腦說：我現在要宣告一個變數囉!!<br>再來打上想要的<strong>變數名稱</strong>，就會變成這樣 <code>var varName</code>。</p>\n<blockquote>\n<p>EX. </p>\n<ol>\n<li>命名一個變數是<strong>我的名字</strong>，就會這樣寫： <code>var myName =$;</code></li>\n<li>命名一個變數是<strong>號碼</strong>，就會這樣寫：<code>var number = $;</code></li>\n</ol>\n</blockquote>\n<p>變數的命名是<strong>自己定義的</strong>，但建議要有<strong>語意化</strong>，不然哪天回來修改程式碼，又沒有寫註解，就會忘記為什麼會這樣打，然後就會發生恐怖的事情。<br>另外維持一個習慣就是在每個程式碼<strong>結束後</strong>都打上一個<strong>分號</strong>。</p>\n<blockquote>\n<p><em>通常使用變數會在 HTML 中會建立一個 id 來使用。</em></p>\n</blockquote>\n<h2 id=\"變數的值\"><a href=\"#變數的值\" class=\"headerlink\" title=\"變數的值\"></a>變數的值</h2><p>宣告要使用變數，還有命名之後，要給變數一個值，電腦才會知道這個變數的內容是什麼，呈現的內容稱作為<strong>值</strong>：</p>\n<h3 id=\"Number-數字\"><a href=\"#Number-數字\" class=\"headerlink\" title=\"Number (數字)\"></a>Number (數字)</h3><p>也就是一般的數字 <strong>0 ~ 9</strong></p>\n<blockquote>\n<p>沿用上方例子，<code>var number = 8;</code>,文字解釋為，宣告一個變數，其名稱為 number，數字值為 8。</p>\n</blockquote>\n<p>可以使用這段語法將變數名稱呈現在網頁上</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> number = <span class=\"number\">8</span></span><br><span class=\"line\"><span class=\"comment\">//建立變數</span></span><br><span class=\"line\"><span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'number'</span>).textContent = number</span><br><span class=\"line\"><span class=\"comment\">//透過 textContent 控制 id 的內容，結果要等於變數名稱</span></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>可參考連結 <a href=\"https://codepen.io/hnzxewqw/pen/abbXXmX\" target=\"_blank\" rel=\"noopener\">https://codepen.io/hnzxewqw/pen/abbXXmX</a></p>\n</blockquote>\n<p><em>對了，可以用變數來做加減乘除喔~</em></p>\n<h3 id=\"String-字串\"><a href=\"#String-字串\" class=\"headerlink\" title=\"String (字串)\"></a>String (字串)</h3><p>也就是文字，打中文也可以，但<strong>建議打英文</strong>，不然如果專案是國際專案，會變成亂碼。<br>打字串的時候要加上<strong>單引號</strong>或<strong>雙引號</strong>，不然電腦會不知道這個值是什麼。</p>\n<blockquote>\n<p>沿用上方例子，<code>var myName = &quot;Tim&quot;;</code>,文字解釋為，宣告一個變數，其名稱為 myName，字串值為 Tim。</p>\n</blockquote>\n<p>可以使用這段語法將變數名稱呈現在網頁上</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> myName = <span class=\"string\">\"Tim\"</span>;</span><br><span class=\"line\"><span class=\"comment\">//建立變數，字串值要加上引號</span></span><br><span class=\"line\"><span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'myName'</span>).textContent = myName</span><br><span class=\"line\"><span class=\"comment\">//透過 textContent 控制 id 的內容，結果要等於變數名稱</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>可參考連結 <a href=\"https://codepen.io/hnzxewqw/pen/qBBggaG\" target=\"_blank\" rel=\"noopener\">https://codepen.io/hnzxewqw/pen/qBBggaG</a></p>\n</blockquote>\n<h3 id=\"Boolean-布林\"><a href=\"#Boolean-布林\" class=\"headerlink\" title=\"Boolean (布林)\"></a>Boolean (布林)</h3><p>只有兩種值，true 跟 false</p>\n<blockquote>\n<p>可參考連結 <a href=\"https://codepen.io/hnzxewqw/pen/OJJddpb\" target=\"_blank\" rel=\"noopener\">https://codepen.io/hnzxewqw/pen/OJJddpb</a></p>\n</blockquote>\n<p><em>之後使用  if 判斷式會滿常被使用</em></p>\n<h2 id=\"什麼是-undefined\"><a href=\"#什麼是-undefined\" class=\"headerlink\" title=\"什麼是 undefined\"></a>什麼是 undefined</h2><p>還沒有給變數數值的時候會顯示的回傳資料，如果程式碼這樣寫：<code>var number;</code><br>因為沒有給任何定義的數值，所以會回傳 undefined。<br>舉例：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> number;</span><br><span class=\"line\"><span class=\"comment\">//沒有給值，所以會是 undefined</span></span><br></pre></td></tr></table></figure>\n<p>或是這樣也是一樣的結果</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log(number); <span class=\"comment\">//因為前面沒有變數的值，結果會是 undefined</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> number = <span class=\"number\">1</span>;</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"變數的命名規則\"><a href=\"#變數的命名規則\" class=\"headerlink\" title=\"變數的命名規則\"></a>變數的命名規則</h2><h3 id=\"開頭不能用數字\"><a href=\"#開頭不能用數字\" class=\"headerlink\" title=\"開頭不能用數字\"></a>開頭不能用數字</h3><p>宣告變數的名稱若開頭數字，會格式錯誤，如下圖：</p>\n<p><img src=\"https://firebasestorage.googleapis.com/v0/b/timpicturespace.appspot.com/o/2-1.png?alt=media&token=1446ae99-7b7e-498e-903a-2baa4636fa75\" alt=\"開頭不能用數字\"></p>\n<h3 id=\"不能包含-或是-等符號\"><a href=\"#不能包含-或是-等符號\" class=\"headerlink\" title=\"不能包含 - 或是 . 等符號\"></a>不能包含 - 或是 . 等符號</h3><p>宣告變數的名稱若使用 “-“ 或 “.”，會格式錯誤，如下圖：</p>\n<p><img src=\"https://firebasestorage.googleapis.com/v0/b/timpicturespace.appspot.com/o/2-2.png?alt=media&token=ead6b977-c4c7-4c55-a8e5-90059331a700\" alt=\"不能包含 - 或是 . 等符號\"></p>\n<h3 id=\"不能使用-JS-預設的-關鍵字-指令\"><a href=\"#不能使用-JS-預設的-關鍵字-指令\" class=\"headerlink\" title=\"不能使用 JS 預設的 ( 關鍵字 ) 指令\"></a>不能使用 JS 預設的 ( 關鍵字 ) 指令</h3><p>JS 在變數中有一些預設的關鍵字，初學者可以當作是預設指令，如果重複預設的關鍵字會格式錯誤，如下圖：<br><em>更多關鍵字可以看<a href=\"http://https://www.w3schools.com/js/js_reserved.asp\" target=\"_blank\" rel=\"noopener\">這裡</a></em></p>\n<p><img src=\"https://firebasestorage.googleapis.com/v0/b/timpicturespace.appspot.com/o/2-3.png?alt=media&token=45dd0919-fe5e-4f2c-b724-be5d7d4a177a\" alt=\"不能使用 JS 預設的 ( 關鍵字 ) 指令\"></p>\n<h3 id=\"有大小寫之分\"><a href=\"#有大小寫之分\" class=\"headerlink\" title=\"有大小寫之分\"></a>有大小寫之分</h3><blockquote>\n<p>JavaScript 的語法是有區分大小寫的，也就是說，變數 app 與 App 在 JavaScript 會被認為是兩個不同的變數。<br>如果大小寫弄錯了，在執行變數時會變成找不到資料，如下圖：</p>\n</blockquote>\n<p><img src=\"https://firebasestorage.googleapis.com/v0/b/timpicturespace.appspot.com/o/2-4.png?alt=media&token=1a3b1b87-7226-4b1f-8b69-c43e5ce155b0\" alt=\"有大小寫之分\"></p>\n<h2 id=\"建議變數名稱要有語意化\"><a href=\"#建議變數名稱要有語意化\" class=\"headerlink\" title=\"建議變數名稱要有語意化\"></a>建議變數名稱要有語意化</h2><p>原因是在寫專案當下可能知道自己在幹嘛，但如果之後要維護或修改時，可能就會找不到相對應的程式碼了。</p>\n<p>參考文章 <a href=\"https://ithelp.ithome.com.tw/articles/10190873\" target=\"_blank\" rel=\"noopener\">https://ithelp.ithome.com.tw/articles/10190873</a></p>\n","categories":["JavaScript Note"],"tags":["JavaScript"]},{"title":"JS 筆記 - 建立 JS 環境、alert、textContent","url":"/JavaScript-Note/20200206/2494141895/","content":"<p><img src=\"https://firebasestorage.googleapis.com/v0/b/timpicturespace.appspot.com/o/JavaScript%20note-01.jpg?alt=media&token=7bee0261-72ac-4de4-9f5a-f39d58735b7d\" alt=\"JavaScript Note\"></p>\n<h2 id=\"JavaScript-概述\"><a href=\"#JavaScript-概述\" class=\"headerlink\" title=\"JavaScript 概述\"></a>JavaScript 概述</h2><h3 id=\"一般來說，完整的JavaScript包括以下幾個部分：\"><a href=\"#一般來說，完整的JavaScript包括以下幾個部分：\" class=\"headerlink\" title=\"一般來說，完整的JavaScript包括以下幾個部分：\"></a>一般來說，完整的JavaScript包括以下幾個部分：</h3><ul>\n<li>ECMAScript，描述了該語言的語法和基本物件</li>\n<li>文件物件模型（DOM），描述處理網頁內容的方法和介面</li>\n<li>瀏覽器物件模型（BOM），描述與瀏覽器進行互動的方法和介面</li>\n</ul>\n<h3 id=\"JavaScript的基本特點如下：\"><a href=\"#JavaScript的基本特點如下：\" class=\"headerlink\" title=\"JavaScript的基本特點如下：\"></a>JavaScript的基本特點如下：</h3><ul>\n<li>是一種解釋性程式語言（代碼不進行預編譯）。</li>\n<li>主要用來向 HTML 頁面添加互動行為。</li>\n<li>可以直接嵌入 HTML 頁面，但寫成單獨的 JS 檔案有利於結構和行為的分離。</li>\n</ul>\n<h3 id=\"JavaScript常用來完成以下任務：\"><a href=\"#JavaScript常用來完成以下任務：\" class=\"headerlink\" title=\"JavaScript常用來完成以下任務：\"></a>JavaScript常用來完成以下任務：</h3><ul>\n<li>嵌入動態文字於 HTML 頁面</li>\n<li>對瀏覽器事件作出回應</li>\n<li>讀寫 HTML 元素</li>\n<li>在資料被提交到伺服器之前驗證資料</li>\n<li>檢測訪客的瀏覽器資訊</li>\n<li>控制 cookies，包括建立和修改等</li>\n</ul>\n<h2 id=\"正文開始\"><a href=\"#正文開始\" class=\"headerlink\" title=\"正文開始\"></a>正文開始</h2><p>首先先學習建立一個 <code>JavaScript</code> 的環境，環境建立如下：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"meta-keyword\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">\"en\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"UTF-8\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"viewport\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"width=device-width, initial-scale=1.0\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">http-equiv</span>=<span class=\"string\">\"X-UA-Compatible\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"ie=edge\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>Document<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"js/all.js\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>通常我會把 SCSS 跟 JS 另外各自開立一個資料夾來管理，讓根目錄保持整潔。</p>\n<h2 id=\"alert-警示語法\"><a href=\"#alert-警示語法\" class=\"headerlink\" title=\"alert 警示語法\"></a>alert 警示語法</h2><p>JS 有個警示語法 (alert) 可以來測驗一下目前寫的 JS 有無效果，滿好用的，然後是這樣寫的：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\">alert(<span class=\"string\">'test'</span>);</span><br></pre></td></tr></table></figure>\n<p>記得括弧內的「文字」要使用<strong>單引號</strong>或<strong>雙引號</strong>，才能顯示正確文字。<br>可以玩一下 <a href=\"http://https://codepen.io/hnzxewqw/full/RwwEqWx\" target=\"_blank\" rel=\"noopener\">codepen</a><br>這個語法很常被使用，像是錯誤提示、或是購買商品成功或錯誤提示的彈跳視窗，但沒想到寫法這麼簡單。<br><em>另外如果不喜歡原本預設的 alert 視窗，可以看這一篇 <a href=\"http://https://w3c.hexschool.com/blog/13ef5369\" target=\"_blank\" rel=\"noopener\">SweetAlert 的作法</a></em></p>\n<p>原則上通常會把 JS 放在結尾的 <code>&lt;/body&gt;</code> 前面，確保都讀完「靜態的」程式碼後再執行 JS。</p>\n<blockquote>\n<p>&lt;有原則當然也有例外，如果特定要執行 JS 做特別的效果，也可以把 JS 的程式碼放在 <code>HTML</code> 中&gt;</p>\n</blockquote>\n<h2 id=\"textContent-的作法\"><a href=\"#textContent-的作法\" class=\"headerlink\" title=\"textContent 的作法\"></a>textContent 的作法</h2><p>要用 JS 控制網頁的文字，有一個 <code>textContent</code> 的語法，而這個語法編寫如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">document.getElementById(&#39;title1&#39;).textContent &#x3D; &#39;Hello World&#39;;</span><br></pre></td></tr></table></figure>\n\n<p>白話文解釋：<strong>網頁主體( document )</strong>，宣告用 <strong>使用 id 元件( getElementById )</strong> 加上設定的 <strong>id 名稱</strong> 將原本的文字，使用 <strong>文字內容( textContent )</strong> 的語法變成 <strong>指定文字(這裡是寫 Hello World )</strong></p>\n<p>不過這邊有一個地方要注意，如果把 <code>&lt;script&gt;</code> 標籤寫在 head 裡面的時候，會發現網頁不會有效果，反而一直停在原本的寫的畫面。然後打開 Chrome 檢查會看到 console 裡面會顯示下圖：</p>\n<p><img src=\"https://firebasestorage.googleapis.com/v0/b/timpicturespace.appspot.com/o/JS1-1.png?alt=media&token=95974db7-9979-4a3c-83d2-25fe0e218cc6\" alt=\"把 `&lt;script&gt;` 標籤寫在 `header` 時，`console` 會跳錯\"></p>\n<p>原因是網頁是從上往下閱讀，但如果發現在 head 就讀到 <code>&lt;script&gt;</code> 標籤時，因為找不到內容而無法順利顯示 JS ，所以常常會把 JS 寫在最後面就是這個原因。</p>\n<p><strong>原本 HTML 程式碼如下：</strong></p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"meta-keyword\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">\"en\"</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"UTF-8\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"viewport\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"width=device-width, initial-scale=1.0\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">http-equiv</span>=<span class=\"string\">\"X-UA-Compatible\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"ie=edge\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>JavaScript practice Day1<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">h1</span> <span class=\"attr\">id</span>=<span class=\"string\">\"title1\"</span>&gt;</span>This is Title<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"js/all.js\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>正常來說畫面應該會是下圖所示：</p>\n<p><img src=\"https://firebasestorage.googleapis.com/v0/b/timpicturespace.appspot.com/o/JS%201-2.png?alt=media&token=72be0bdf-22b2-472f-b5df-0344b8ffea64\" alt=\"通常會讓程式碼讀取完後，再跑 `script` 指令\"></p>\n<p>可以點一下<a href=\"http://https://codepen.io/hnzxewqw/pen/OJJraKe\" target=\"_blank\" rel=\"noopener\">這裡</a>把 JS 的註解打開，然後重新整理就會看到透過 JS 就把原本的文字：<strong>This is Title</strong>，變成：<strong>Hello World</strong> 囉~!!</p>\n<p>文獻參考<br> <a href=\"https://zh.wikipedia.org/wiki/JavaScript#%E8%82%87%E5%A7%8B%E6%96%BC%E7%B6%B2%E6%99%AF\" target=\"_blank\" rel=\"noopener\">https://zh.wikipedia.org/wiki/JavaScript#%E8%82%87%E5%A7%8B%E6%96%BC%E7%B6%B2%E6%99%AF</a></p>\n","categories":["JavaScript Note"],"tags":["JavaScript"]},{"title":"寫一個 search bar","url":"/Practice-Note/20200106/1702288669/","content":"<h2 id=\"搜尋列-input-button\"><a href=\"#搜尋列-input-button\" class=\"headerlink\" title=\"搜尋列 ( input + button )\"></a>搜尋列 ( input + button )</h2><p>這次來練習寫一個 Search Bar，要寫的樣式如下</p>\n<p><img src=\"https://firebasestorage.googleapis.com/v0/b/timpicturespace.appspot.com/o/searchbar01.png?alt=media&token=b380ab04-a70c-469e-82c0-78462af98f22\" alt=\"參考樣式\"></p>\n<h3 id=\"起手式\"><a href=\"#起手式\" class=\"headerlink\" title=\"起手式\"></a>起手式</h3><p>我習慣在最外層寫一個 <code>.wrap</code>，在繼續將裡面要完成的 HTML 先寫完<br>所以程式碼會如下，</p>\n<p><strong>HTML</strong></p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"wrap\"</span>&gt;</span></span><br><span class=\"line\"> <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"search\"</span>&gt;</span></span><br><span class=\"line\"> <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">class</span>=<span class=\"string\">\"search-bar\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"search\"</span> <span class=\"attr\">id</span>=<span class=\"string\">\"search\"</span> <span class=\"attr\">placeholder</span>=<span class=\"string\">\"輸入名稱\"</span>&gt;</span></span><br><span class=\"line\"> <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">class</span>=<span class=\"string\">\"search-btn\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\"> <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>這時候我才會加入 CSS 的樣式，因為要讓底色是我指定的顏色，還有這次 Search Bar 的裡面所有的連結按鈕我都取消底線的樣式，所以我的 CSS 先把 layout 寫好，</p>\n<p><strong>CSS</strong></p>\n<figure class=\"highlight css\"><table><tr><td class=\"code\"><pre><span class=\"line\">*&#123;<span class=\"attribute\">box-sizing</span>: border-box;&#125;</span><br><span class=\"line\"><span class=\"selector-tag\">body</span>&#123;</span><br><span class=\"line\"> <span class=\"attribute\">background-color</span>: <span class=\"number\">#efe9e7</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-tag\">a</span>&#123;</span><br><span class=\"line\"> <span class=\"attribute\">text-decoration</span>: none;</span><br><span class=\"line\"> <span class=\"attribute\">color</span>: <span class=\"number\">#3D1101</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.wrap</span>&#123;</span><br><span class=\"line\"> <span class=\"attribute\">max-width</span>: <span class=\"number\">960px</span>;</span><br><span class=\"line\"> <span class=\"attribute\">margin</span>:<span class=\"number\">20px</span> auto <span class=\"number\">0</span> auto;</span><br><span class=\"line\"> <span class=\"attribute\">height</span>: auto;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>使用 <code>box-sizing:border-box</code> 原因是要讓原本 CSS 預設的 padding 值不要影響我的設定值。<br>這時候畫面會顯示這樣</p>\n<p><img src=\"https://firebasestorage.googleapis.com/v0/b/timpicturespace.appspot.com/o/searchbar02.png?alt=media&token=cc40d3ad-325e-4be9-ae09-75f188b57245\" alt=\"大概是我要的感覺了\"></p>\n<hr>\n<h2 id=\"把按鈕的文字改成圖示\"><a href=\"#把按鈕的文字改成圖示\" class=\"headerlink\" title=\"把按鈕的文字改成圖示\"></a>把按鈕的文字改成圖示</h2><p>再來就是優化的內容了，為了要讓搜尋按鈕好看，所以這邊我要載入 fontawesome，方式如下，先到 fontawesome 官網，選擇 Start for free，畫面如下</p>\n<p><img src=\"https://firebasestorage.googleapis.com/v0/b/timpicturespace.appspot.com/o/searchbar03.png?alt=media&token=0ef052e3-683e-4925-8547-e3798366f0a6\" alt=\"fontawesome 首頁\"></p>\n<blockquote>\n<p>以前都免費，現在要付費才能升級成 PRO 的會員了…</p>\n</blockquote>\n<blockquote>\n<p>會出現需要輸入 email 的地方，輸入完後會收到官方寄來的認證信，打開信件認證之後，在登入網頁，會給一組專屬的 kit 程式碼跟代碼，記得先複製存檔到電腦裡喔！以後要用到 fontawesome 都要匯入這個 kit 程式！或是去找 CDN 放在 link 裡面也可以！</p>\n</blockquote>\n<p>然後在貼上到 head 裡面就可以讀取到 fontawesome 的圖案了，然後這次我要找的是 Search 的圖案，所以我就在裡面找 search，有很多放大鏡的圖案，就選一個喜歡的來用，於是我就找到了這個圖案</p>\n<p><img src=\"https://firebasestorage.googleapis.com/v0/b/timpicturespace.appspot.com/o/searchbar04.png?alt=media&token=d824e86d-b802-405f-a92e-158adf41b4e6\" alt=\"在 fontawesome 搜尋 search 在挑選喜歡的樣式\"></p>\n<p>因為我沒有付費升級成 PRO 會員，所以只能選第一個 solid 的選項把上面的網址複製下來貼到原本程式碼 <code>btn</code> 的地方，程式碼會是這樣</p>\n<p><strong>HTML</strong></p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"wrap\"</span>&gt;</span></span><br><span class=\"line\"> <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"search\"</span>&gt;</span></span><br><span class=\"line\"> <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">class</span>=<span class=\"string\">\"search-bar\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"search\"</span> <span class=\"attr\">id</span>=<span class=\"string\">\"search\"</span> <span class=\"attr\">placeholder</span>=<span class=\"string\">\"輸入名稱\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">class</span>=<span class=\"string\">\"search-btn\"</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">i</span> <span class=\"attr\">class</span>=<span class=\"string\">\"fas fa-search\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">i</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>這時候畫面就變成下方所示</p>\n<p><img src=\"https://firebasestorage.googleapis.com/v0/b/timpicturespace.appspot.com/o/searchbar05.png?alt=media&token=3db47084-2c4a-4b94-b98e-462071816fca\" alt=\"好像很接近要寫的樣子\"></p>\n<hr>\n<h2 id=\"細節優化\"><a href=\"#細節優化\" class=\"headerlink\" title=\"細節優化\"></a>細節優化</h2><p>這時候 CSS 要繼續往下寫，先設定 <code>.search</code> 的寬度為畫面的 80%，並且靠左，因為等等還要放上購物車，寫入 <code>position</code> 是將 <code>.search</code> 設定為父元素，讓等等放大鏡圖示可以對齊。</p>\n<p><strong>CSS</strong></p>\n<figure class=\"highlight css\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.search</span>&#123;</span><br><span class=\"line\"> <span class=\"attribute\">position</span>: relative;</span><br><span class=\"line\"> <span class=\"attribute\">width</span>: <span class=\"number\">80%</span>;</span><br><span class=\"line\"> <span class=\"attribute\">float</span>: left; </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"優化-input\"><a href=\"#優化-input\" class=\"headerlink\" title=\"優化 input\"></a>優化 input</h3><p>再來優化 <code>.search-bar</code> 讓它填滿 <code>.search</code> 的範圍，並按照標記文件 <code>height:32px</code>，並且外框設定 <code>3px</code> 的棕色實心線，為了讓 search bar 與畫面一致，所以也將背景填滿色。</p>\n<p><strong>CSS</strong></p>\n<figure class=\"highlight css\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.search-bar</span>&#123;</span><br><span class=\"line\"> <span class=\"attribute\">width</span>: <span class=\"number\">100%</span>;</span><br><span class=\"line\"> <span class=\"attribute\">height</span>: <span class=\"number\">32px</span>;</span><br><span class=\"line\"> <span class=\"attribute\">font-size</span>: <span class=\"number\">20px</span>;</span><br><span class=\"line\"> <span class=\"attribute\">border</span>: <span class=\"number\">3px</span> solid <span class=\"number\">#3D1101</span>;</span><br><span class=\"line\"> <span class=\"attribute\">background-color</span>: <span class=\"number\">#efe9e7</span>;</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h3 id=\"優化-button\"><a href=\"#優化-button\" class=\"headerlink\" title=\"優化 button\"></a>優化 button</h3><p>優化按鈕，按照標記文件設定寬高與背景色後，也將 fontawesome 的顏色與背景設定相同，加上 <code>cursor</code> 讓滑鼠移過去時可以變成手指的圖示，再透過 <code>position:absolute</code> 設定成絕對定為，讓按鈕可以靠上靠右對齊 Search bar</p>\n<p><strong>CSS</strong></p>\n<figure class=\"highlight css\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.search-btn</span>&#123;</span><br><span class=\"line\"> <span class=\"attribute\">width</span>: <span class=\"number\">36px</span>;</span><br><span class=\"line\"> <span class=\"attribute\">height</span>: <span class=\"number\">32px</span>;</span><br><span class=\"line\"> <span class=\"attribute\">background-color</span>: <span class=\"number\">#3D1101</span>;</span><br><span class=\"line\"> <span class=\"attribute\">color</span>:<span class=\"number\">#efe9e7</span>;</span><br><span class=\"line\"> <span class=\"attribute\">outline</span>:none;</span><br><span class=\"line\"> <span class=\"attribute\">border</span>: <span class=\"number\">2px</span> solid <span class=\"number\">#3D1101</span>;</span><br><span class=\"line\"> <span class=\"attribute\">cursor</span>: pointer; </span><br><span class=\"line\"> <span class=\"attribute\">position</span>: absolute;</span><br><span class=\"line\"> <span class=\"attribute\">top</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\"> <span class=\"attribute\">right</span>: <span class=\"number\">0</span>; </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h2 id=\"完成\"><a href=\"#完成\" class=\"headerlink\" title=\"完成\"></a>完成</h2><p>寫完上方程式碼就完成這次的好看的搜尋列囉~~!</p>\n<p><img src=\"https://firebasestorage.googleapis.com/v0/b/timpicturespace.appspot.com/o/searchbar06.png?alt=media&token=759ca863-8f17-45e6-9ccd-66feb154d43a\" alt=\"搜尋列完成\"></p>\n<p>完整程式碼在這裡<br><a href=\"https://codepen.io/hnzxewqw/pen/ZgWymm\" target=\"_blank\" rel=\"noopener\">https://codepen.io/hnzxewqw/pen/ZgWymm</a></p>\n","categories":["Practice Note"],"tags":["HTML","CSS"]},{"title":"美化 Powershell","url":"/Powershell/20191225/611397980/","content":"<h2 id=\"Powershell-的美化原因\"><a href=\"#Powershell-的美化原因\" class=\"headerlink\" title=\"Powershell 的美化原因\"></a>Powershell 的美化原因</h2><p>為了開發更方便，Win10 有內建一個終端機叫做 Powershell，但原本的樣式很醜…</p>\n<p><img src=\"https://firebasestorage.googleapis.com/v0/b/timpicturespace.appspot.com/o/powershell%E9%A0%90%E8%A8%AD.png?alt=media&token=33be3a02-3289-4ee3-adb6-eff49f6d2b72\" alt=\"Windows 預設的樣式\"></p>\n<p>這種配色相當刺眼，所以為了以後開發保護眼睛，還是美化一下好了!</p>\n<hr>\n<h2 id=\"環境條件\"><a href=\"#環境條件\" class=\"headerlink\" title=\"環境條件\"></a>環境條件</h2><ul>\n<li>需要在 Windows 10 1903 版以上才能美化喔~不然會失敗。</li>\n</ul>\n<hr>\n<h2 id=\"查看-Windows-版本\"><a href=\"#查看-Windows-版本\" class=\"headerlink\" title=\"查看 Windows 版本\"></a>查看 Windows 版本</h2><p>在下方搜尋列中打 <code>winver</code>，就可以看到版本喔! 如果發現不是 1903 版本要記得更新系統。</p>\n<p><img src=\"https://firebasestorage.googleapis.com/v0/b/timpicturespace.appspot.com/o/winver.png?alt=media&token=e6862e07-d4ab-477e-aada-2db27d22da7e\" alt=\"winver\"></p>\n<p><img src=\"https://firebasestorage.googleapis.com/v0/b/timpicturespace.appspot.com/o/winver1903.png?alt=media&token=7980ae9d-7a88-4047-b40a-48d1a82147b6\" alt=\"winver 1903\"></p>\n<p>確認好後就可以繼續進行美化了。</p>\n<hr>\n<h2 id=\"美化提示條\"><a href=\"#美化提示條\" class=\"headerlink\" title=\"美化提示條\"></a>美化提示條</h2><p>預計要美化提示條的樣式如下：</p>\n<p><img src=\"https://firebasestorage.googleapis.com/v0/b/timpicturespace.appspot.com/o/powershell%E6%8F%90%E7%A4%BA%E6%A2%9D.png?alt=media&token=fa27bd1b-6555-4aa9-9120-b835e639eed1\" alt=\"美化後的提示條\"></p>\n<p>安裝提示條套件 <code>oh-my-posh</code>，<a href=\"https://github.com/JanDeDobbeleer/oh-my-posh\" target=\"_blank\" rel=\"noopener\">oh-my-posh GitHub</a></p>\n<h3 id=\"安裝套件\"><a href=\"#安裝套件\" class=\"headerlink\" title=\"安裝套件\"></a>安裝套件</h3><p>在 powershell 輸入下方指令：</p>\n<figure class=\"highlight cmd\"><table><tr><td class=\"code\"><pre><span class=\"line\">Install-Module posh-git -Scope CurrentUser</span><br></pre></td></tr></table></figure>\n<p>安裝過程會有問題提問，一直輸入 <code>Y</code> 就可以了。</p>\n<p>再來安裝 oh-my-posh 模組，輸入下方指令：</p>\n<figure class=\"highlight cmd\"><table><tr><td class=\"code\"><pre><span class=\"line\">Install-Module oh-my-posh -Scope CurrentUser</span><br></pre></td></tr></table></figure>\n<p>安裝過程會有問題提問，一樣輸入 <code>Y</code> 就可以了。</p>\n<h3 id=\"設定自動套用\"><a href=\"#設定自動套用\" class=\"headerlink\" title=\"設定自動套用\"></a>設定自動套用</h3><p>在 PowerShell 上面輸入 <code>$profile</code> 來顯示 PowerShell 自定義路徑</p>\n<blockquote>\n<p>C:\\Users\\您的資料夾名稱\\Documents\\WindowsPowerShell\\</p>\n</blockquote>\n<p>複製路徑到文件視窗中貼上，打開資料夾後底下若沒有一個檔案叫 Microsoft.PowerShell_profile.ps1 那就新增一個記事本，如果有的話要在 vscode 打開，並內容填入以下資訊：</p>\n<figure class=\"highlight cmd\"><table><tr><td class=\"code\"><pre><span class=\"line\">Import-Module posh-git</span><br><span class=\"line\">Import-Module oh-my-posh</span><br><span class=\"line\"><span class=\"built_in\">Set</span>-Theme Agnoster //我是用這個樣式</span><br></pre></td></tr></table></figure>\n\n<p>設定完成後，往後每次打開 powershell 就會自動套用了~如果想換配色的話可以到官方 readme 底下有提供別的名稱。<a href=\"https://github.com/JanDeDobbeleer/oh-my-posh#themes\" target=\"_blank\" rel=\"noopener\">官方 GitHub</a></p>\n<hr>\n<h2 id=\"調整背景色\"><a href=\"#調整背景色\" class=\"headerlink\" title=\"調整背景色\"></a>調整背景色</h2><p>有鑑於藍色底真是太痛苦了，做平面設計出身的我喜歡深灰色背景，閱讀上比較不吃力，所以要來改下背景。</p>\n<p><img src=\"https://firebasestorage.googleapis.com/v0/b/timpicturespace.appspot.com/o/powershell%20%E7%BE%8E%E5%8C%96.png?alt=media&token=dd4b4099-8d09-4e57-ba60-ebc048210047\" alt=\"我的 powershell 背景\"></p>\n<ul>\n<li>美化之前要先完成環境條件才可以進行</li>\n</ul>\n<hr>\n<h3 id=\"安裝-Windows-Terminal\"><a href=\"#安裝-Windows-Terminal\" class=\"headerlink\" title=\"安裝 Windows Terminal\"></a>安裝 Windows Terminal</h3><p>新版的 Windows Terminal 是透過 Store 安裝的，<a href=\"ms-windows-store://pdp/?ProductId=9n0dx20hk701\">前往 Store 商店</a></p>\n<p><img src=\"https://firebasestorage.googleapis.com/v0/b/timpicturespace.appspot.com/o/windows%20Terminal.png?alt=media&token=5602a109-7a90-4b4e-ad00-f6869f314af9\" alt=\"Windows Terminal\"></p>\n<p>安裝完畢後在搜尋列輸入 <code>Windows Terminal</code> 即可找到。</p>\n<p><img src=\"https://firebasestorage.googleapis.com/v0/b/timpicturespace.appspot.com/o/find%20windows%20Terminal.png?alt=media&token=4ef90689-4e6f-4326-9443-d4acf470550d\" alt=\"直接在搜尋列搜尋 Windows Terminal 即可\"></p>\n<p>打開後在工具列中找到<strong>倒三角形</strong>的圖示，會看到 <strong>setting</strong> 選項。</p>\n<p><img src=\"https://firebasestorage.googleapis.com/v0/b/timpicturespace.appspot.com/o/setting.png?alt=media&token=b2e21fef-5297-4366-bd0b-67a6674628c8\" alt=\"setting\"></p>\n<p>選擇後會打開一個記事本檔案，先另存新檔找到該路徑，在把檔案丟掉 VScode 裡面修改第一個物件，會看到如下圖：</p>\n<p><img src=\"https://firebasestorage.googleapis.com/v0/b/timpicturespace.appspot.com/o/powershell%20%E8%A8%AD%E5%AE%9A.png?alt=media&token=1d615b67-9a2c-4787-a993-2228534f9bed\" alt=\"修改內容\"></p>\n<p>註解處是我修改的地方，可以參考看看。</p>\n<h4 id=\"注意兩件事情\"><a href=\"#注意兩件事情\" class=\"headerlink\" title=\"注意兩件事情\"></a>注意兩件事情</h4><ul>\n<li>背景圖片的地方不可以有中文字，否則無法正常顯示背景圖片。</li>\n<li>字體建議修改，我個人是使用 Sarasa Term SC，否則滿怪的，原本設定 Arial 但如果出現中文字變亂碼。</li>\n</ul>\n<p>設定完之後就成功囉!!</p>\n<p><img src=\"https://firebasestorage.googleapis.com/v0/b/timpicturespace.appspot.com/o/powershell%20%E7%BE%8E%E5%8C%96.png?alt=media&token=dd4b4099-8d09-4e57-ba60-ebc048210047\" alt=\"完成後的 powershell \"></p>\n<hr>\n<blockquote>\n<p>參考文章：<a href=\"https://hsiangfeng.github.io/other/20190924/3446878284/\" target=\"_blank\" rel=\"noopener\">https://hsiangfeng.github.io/other/20190924/3446878284/</a></p>\n</blockquote>\n","categories":["Powershell"],"tags":["Powershell"]},{"title":"第一次建立 Hexo 與推上 GitHub","url":"/hexo/20191217/1291925723/","content":"<h2 id=\"為什麼要建立-Hexo-部落格\"><a href=\"#為什麼要建立-Hexo-部落格\" class=\"headerlink\" title=\"為什麼要建立 Hexo 部落格\"></a>為什麼要建立 Hexo 部落格</h2><p>從今年 2 月開始學習前端，在不同階段給我自己設立目標去挑戰，算一算也 10 個月了，看自己的能力還需要一個挑戰來幫助自己升級，讓我自己可以更快投入前端產業領域，經與 Ray 討論後，開始建立 Hexo 部落格，平台這麼多為什麼要使用 Hexo？</p>\n<p>因為 Hexo 是要使用指令來做開發，也要配合 GitHub 使用，一方面可以練習指令，另一方面可以練習 GitHub 版本控制，算是一石二鳥。</p>\n<p>使用 Hexo 是使用 Markdown 撰寫格式，也需要熟悉 Git 指令還有一點 npm 的知識，可以參考下方連結教學。</p>\n<p><a href=\"https://hsiangfeng.github.io/other/20191111/1875438261/\" target=\"_blank\" rel=\"noopener\">Markdown</a></p>\n<p><a href=\"https://w3c.hexschool.com/git/cfdbd310\" target=\"_blank\" rel=\"noopener\">Git</a></p>\n<p><a href=\"https://hsiangfeng.github.io/nodejs/20190626/1317979814/\" target=\"_blank\" rel=\"noopener\">npm</a></p>\n<hr>\n<h2 id=\"建立-Hexo-部落格\"><a href=\"#建立-Hexo-部落格\" class=\"headerlink\" title=\"建立 Hexo 部落格\"></a>建立 Hexo 部落格</h2><h3 id=\"版本與環境\"><a href=\"#版本與環境\" class=\"headerlink\" title=\"版本與環境\"></a>版本與環境</h3><p>作業系統： Windows10 X64</p>\n<p>Nodejs:：V12.13.1 LTS</p>\n<p>IDE：VS Code</p>\n<h3 id=\"本文環境\"><a href=\"#本文環境\" class=\"headerlink\" title=\"本文環境\"></a>本文環境</h3><p><strong>Hexo 版本</strong></p>\n<p>hexo: 4.1.1</p>\n<p>hexo-cli: 3.1.0</p>\n<p><strong>NexT 版本</strong></p>\n<p>Next: 7.6.0</p>\n<hr>\n<h2 id=\"從-GitHub-建立新的數據-Creat-a-new-Repository\"><a href=\"#從-GitHub-建立新的數據-Creat-a-new-Repository\" class=\"headerlink\" title=\"從 GitHub 建立新的數據 (Creat a new Repository)\"></a>從 GitHub 建立新的數據 (Creat a new Repository)</h2><p><img src=\"https://firebasestorage.googleapis.com/v0/b/timpicturespace.appspot.com/o/%E5%BB%BA%E7%AB%8B%E6%95%B8%E6%93%9A.png?alt=media&token=1f2b07d5-023a-48aa-a163-21b4095e955d\" alt=\"初始 GitHub 畫面\"></p>\n<ul>\n<li>名稱務必要謹慎設定，因為之後就無法更改，若想要修改只能重新建立數據庫，記得後面的 github.io 要打一樣的。</li>\n<li>下方的權限直接用 Public (公開) 即可，若一開始還不想公開就選擇 Private (私人的)。</li>\n<li>其他不用更動，直接選擇最下方的綠色按鈕 (Create repostory) 建立數據庫。</li>\n</ul>\n<p><strong>Warning</strong></p>\n<ul>\n<li>有提到 HEXO 是用指令建立的，所以不要在本地端建立數據庫，建立的格式內容會是錯誤的 (我已經失敗過一次，最後還是重新來過。)</li>\n</ul>\n<p><img src=\"https://firebasestorage.googleapis.com/v0/b/timpicturespace.appspot.com/o/GitHub%20%E4%B8%80%E9%96%8B%E5%A7%8B%E6%9C%83%E7%9C%8B%E5%88%B0%E7%9A%84%E6%A8%A3%E5%AD%90.png?alt=media&token=105bb415-3516-491f-af61-df87a4f22a43\" alt=\"這是一開始看到的樣子，如下圖：\"></p>\n<hr>\n<h2 id=\"安裝-Hexo\"><a href=\"#安裝-Hexo\" class=\"headerlink\" title=\"安裝 Hexo\"></a>安裝 Hexo</h2><p>使用指令安裝 Hexo，開啟終端機 (cmd)輸入以下指令：</p>\n<figure class=\"highlight cmd\"><table><tr><td class=\"code\"><pre><span class=\"line\">npm install hexo-cli -g</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://firebasestorage.googleapis.com/v0/b/timpicturespace.appspot.com/o/%E5%AE%89%E8%A3%9D%20HEXO.png?alt=media&token=f6e154ec-0f7f-4077-b918-10694c06454d\" alt=\"安裝 Hexo\"></p>\n<p>*指令說明：透過 npm 在 全域 (-g) 下安裝 Hexo-Cli</p>\n<p>輸入後會看到有進度條再跑，大概幾秒後就完成了。</p>\n<hr>\n<h2 id=\"建立-Hexo\"><a href=\"#建立-Hexo\" class=\"headerlink\" title=\"建立 Hexo\"></a>建立 Hexo</h2><p>在要存取的硬碟中開啟一個新資料夾，並自訂名稱 (建議用英文)，之後的資料就會在這個資料夾內，並輸入以下指令：</p>\n<figure class=\"highlight cmd\"><table><tr><td class=\"code\"><pre><span class=\"line\">hexo init projectname</span><br></pre></td></tr></table></figure>\n<ul>\n<li>projectname 改成自己定義的名稱，建議用英文，安裝完成後如下圖：</li>\n</ul>\n<p><img src=\"https://firebasestorage.googleapis.com/v0/b/timpicturespace.appspot.com/o/%E5%BB%BA%E7%AB%8B%20HEXO.png?alt=media&token=48c35faf-b65e-42ee-9433-a89d265def7a\" alt=\"\"></p>\n<hr>\n<h2 id=\"進入-Hexo\"><a href=\"#進入-Hexo\" class=\"headerlink\" title=\"進入 Hexo\"></a>進入 Hexo</h2><p>在終端機輸入：</p>\n<figure class=\"highlight cmd\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> projectname</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>projectname 改成自己定義的名稱，建議用英文</li>\n</ul>\n<h3 id=\"安裝相關套件\"><a href=\"#安裝相關套件\" class=\"headerlink\" title=\"安裝相關套件\"></a>安裝相關套件</h3><p>由於建立完畢的 Hexo 還必須安裝 npm 相關套件，所以必須在這個目錄下輸入：</p>\n<figure class=\"highlight cmd\"><table><tr><td class=\"code\"><pre><span class=\"line\">npm install</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>指令說明：將 package.json 相依套件下載下來</li>\n</ul>\n<hr>\n<h2 id=\"啟動-Hexo\"><a href=\"#啟動-Hexo\" class=\"headerlink\" title=\"啟動 Hexo\"></a>啟動 Hexo</h2><p>完成上方內容後再輸入下方指令：</p>\n<figure class=\"highlight cmd\"><table><tr><td class=\"code\"><pre><span class=\"line\">hexo server</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://firebasestorage.googleapis.com/v0/b/timpicturespace.appspot.com/o/%E5%95%9F%E5%8B%95%20hexo.png?alt=media&token=b06502f3-b23c-4a8d-8b69-5e07cd31fdc0\" alt=\"啟動 hexo server\"></p>\n<hr>\n<h2 id=\"使用主題-themes\"><a href=\"#使用主題-themes\" class=\"headerlink\" title=\"使用主題 themes\"></a>使用主題 themes</h2><p>使用 Next 7.6.0 ，<a href=\"https://github.com/theme-next/hexo-theme-next\" target=\"_blank\" rel=\"noopener\">主題連結</a>，或是可以到<a href=\"https://theme-next.iissnan.com/\" target=\"_blank\" rel=\"noopener\">官方網站</a>取得想要的主題，但因為每個主題要修改的程式碼不同，如果要按照我這邊設定，建議選用一樣的樣式!! </p>\n<h3 id=\"替換主題\"><a href=\"#替換主題\" class=\"headerlink\" title=\"替換主題\"></a>替換主題</h3><p>下載 themes 並解壓縮到資料夾內的 themes 資料夾內，並使用 VSCODE 開啟跟目錄資料夾中的 <code>congig.yml</code></p>\n<p><img src=\"https://firebasestorage.googleapis.com/v0/b/timpicturespace.appspot.com/o/themes%20%E8%B3%87%E6%96%99%E5%A4%BE.png?alt=media&token=23291574-3088-4580-8a67-be03a21fa206\" alt=\"資料夾 themes 選項\"></p>\n<p>找到第 96 行更改 themes 後面的名稱如下：</p>\n<figure class=\"highlight cmd\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\">theme: <span class=\"title\">hexo</span>-<span class=\"title\">theme</span>-<span class=\"title\">next</span>-<span class=\"title\">master</span></span></span><br></pre></td></tr></table></figure>\n\n<hr>\n<p>Hexo 基礎設定</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\">// Site</span><br><span class=\"line\">title: TimCodingBlog// 網站標題</span><br><span class=\"line\">subtitle: 提姆寫程式。 // 網站副標題</span><br><span class=\"line\">description: 提姆的前端筆記 // 網站敘述</span><br><span class=\"line\">keywords: // 關鍵字</span><br><span class=\"line\">author: Tim // 網站作者</span><br><span class=\"line\">language: zh-TW // 網站語系</span><br><span class=\"line\">timezone:</span><br><span class=\"line\"></span><br><span class=\"line\">// URL</span><br><span class=\"line\">url: http://yoursite.com  //輸入您的網站URL，舉例我的就是ray.github.io</span><br><span class=\"line\">root: /</span><br><span class=\"line\">permalink: :year/:month/:day/:title/</span><br><span class=\"line\">permalink_defaults:</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"部署-GitHub\"><a href=\"#部署-GitHub\" class=\"headerlink\" title=\"部署 GitHub\"></a>部署 GitHub</h2><p>需要安裝一個 Hexo 沒有安裝的插件</p>\n<figure class=\"highlight cmd\"><table><tr><td class=\"code\"><pre><span class=\"line\">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure>\n\n<p>修改 _config.yml 中的 Depolyment 如下：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\">deploy:</span><br><span class=\"line\">  type: git // 模式</span><br><span class=\"line\">  repo: https://github.com/yourGithub /yourGithubName.github.io.git // 自己 GitHub repos 連結</span><br><span class=\"line\">  branch: master // 分支</span><br></pre></td></tr></table></figure>\n\n<p>修改完後輸入下方指令：</p>\n<figure class=\"highlight cmd\"><table><tr><td class=\"code\"><pre><span class=\"line\">hexo d g</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>指令說明：d →部屬、g →生成靜態頁面</li>\n</ul>\n<hr>\n<h2 id=\"其他指令\"><a href=\"#其他指令\" class=\"headerlink\" title=\"其他指令\"></a>其他指令</h2><figure class=\"highlight cmd\"><table><tr><td class=\"code\"><pre><span class=\"line\">hexo new \"<span class=\"built_in\">title</span>\"</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>說明：建立新文章</li>\n</ul>\n<figure class=\"highlight cmd\"><table><tr><td class=\"code\"><pre><span class=\"line\">hexo s -g</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>說明：s →啟動伺服器 -g →生成靜態頁面</li>\n</ul>\n<figure class=\"highlight cmd\"><table><tr><td class=\"code\"><pre><span class=\"line\">hexo d -g</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>說明： d →部屬模式 -g →生成靜態頁面</li>\n</ul>\n<figure class=\"highlight cmd\"><table><tr><td class=\"code\"><pre><span class=\"line\">hexo clean</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>說明：刪除已生成的靜態頁面及快取檔案</li>\n</ul>\n<h2 id=\"刪除指定文章\"><a href=\"#刪除指定文章\" class=\"headerlink\" title=\"刪除指定文章\"></a>刪除指定文章</h2><p>在本地端 source 資料夾，把指定的 md. 檔案刪除，在重新佈署即可，指令為：</p>\n<figure class=\"highlight cmd\"><table><tr><td class=\"code\"><pre><span class=\"line\">hexo d -g</span><br></pre></td></tr></table></figure>\n\n<hr>\n<blockquote>\n<p>參考文章：<a href=\"https://hsiangfeng.github.io/hexo/20190411/932826160/\" target=\"_blank\" rel=\"noopener\">https://hsiangfeng.github.io/hexo/20190411/932826160/</a></p>\n</blockquote>\n","categories":["hexo"],"tags":["hexo"]}]