[{"title":"JS 筆記 - 函式 function 搭配 return","url":"/JavaScript-Note/20200302/3851113860/","content":"<p><img src=\"https://firebasestorage.googleapis.com/v0/b/timpicturespace.appspot.com/o/JavaScript%20note-01.jpg?alt=media&token=7bee0261-72ac-4de4-9f5a-f39d58735b7d\" alt=\"JavaScript Note\"></p>\n<blockquote>\n<p>函式 function 搭配 return 是一個常用且好用的小技巧。</p>\n</blockquote>\n<hr>\n<h2 id=\"return-回傳\"><a href=\"#return-回傳\" class=\"headerlink\" title=\"return 回傳\"></a>return 回傳</h2><p>透過 <code>return</code> 回傳的屬性，可以運算比較複雜的內容，當商品或是後台採購品項較多時，就不用一直打程式碼，前提是參數內的數值要同一個才可以，比如下方例子：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">count</span>(<span class=\"params\">price</span>) </span>&#123; </span><br><span class=\"line\">  <span class=\"keyword\">return</span> addTax(price * <span class=\"number\">0.8</span>); <span class=\"comment\">// 商品價格要打八折時</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">count</span>(<span class=\"params\">price</span>) </span>&#123; <span class=\"comment\">// 當商品要開立發票時</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> addTax * <span class=\"number\">1.05</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(count(<span class=\"number\">500</span>);)</span><br><span class=\"line\"><span class=\"comment\">//return 會把 count 的參數 500，套回 function 中，會得到下面結果</span></span><br><span class=\"line\"><span class=\"comment\">// 500 * 0.8</span></span><br><span class=\"line\"><span class=\"comment\">// 500 * 1.05</span></span><br></pre></td></tr></table></figure>\n\n<p><code>return</code> 是幫助資料回傳的一個語法，讓 function 中的語法除了更簡潔外，也更可以提高程式碼閱讀性! 也可以透過判斷式的內容，讓 <code>return</code> 讓函式停止執行。</p>\n","categories":["JavaScript Note"],"tags":["JavaScript"]},{"title":"JS 筆記 - 全域變數與區域變數","url":"/JavaScript-Note/20200224/3133182567/","content":"<p><img src=\"https://firebasestorage.googleapis.com/v0/b/timpicturespace.appspot.com/o/JavaScript%20note-01.jpg?alt=media&token=7bee0261-72ac-4de4-9f5a-f39d58735b7d\" alt=\"JavaScript Note\"></p>\n<p>初學者記法：變數簡單分成兩種，一種在<strong>函式內</strong>、一種在<strong>函式外</strong>，聽起來簡單，但觀念大不同，來紀錄一下。</p>\n<h2 id=\"區域變數\"><a href=\"#區域變數\" class=\"headerlink\" title=\"區域變數\"></a>區域變數</h2><p>簡單來說就是在函式內的變數，函式是這樣寫的：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fName</span>(<span class=\"params\">aName</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> number = aName *<span class=\"number\">10</span>; <span class=\"comment\">//區域變數</span></span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(number); <span class=\"comment\">//驗證變數</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">fName(); <span class=\"comment\">//沒有輸入參數，執行函式</span></span><br></pre></td></tr></table></figure>\n\n<p>上面的寫法會得到的結果是 NaN，因為並沒有帶入其他參數，所以找不到任何的值。</p>\n<p>如果參數帶入 10，會變成這樣寫：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fName</span>(<span class=\"params\">aName</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> number = aName * <span class=\"number\">10</span>; <span class=\"comment\">//區域變數</span></span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(number); <span class=\"comment\">//驗證變數</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">fName(<span class=\"number\">10</span>); <span class=\"comment\">//帶入參數，執行函式</span></span><br></pre></td></tr></table></figure>\n\n<p>執行函式的帶入<strong>參數</strong>後，會帶到<strong>區域變數</strong>，驗證結果會變成 100。</p>\n<p>※區域變數會在執行之後<strong>自動銷毀</strong>，並<strong>同步釋放記憶體</strong>，以免瀏覽器跑很慢，讓使用者體驗不佳。</p>\n<hr>\n<p>以上為原則，但有原則就會有例外，</p>\n<h3 id=\"狀況：開發中也會遇到需要抓之前的變數\"><a href=\"#狀況：開發中也會遇到需要抓之前的變數\" class=\"headerlink\" title=\"狀況：開發中也會遇到需要抓之前的變數\"></a>狀況：開發中也會遇到需要抓之前的變數</h3><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fName</span>(<span class=\"params\">aName</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> number = aName * <span class=\"number\">10</span>; <span class=\"comment\">//區域變數</span></span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(number); <span class=\"comment\">//驗證變數</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">fName(<span class=\"number\">10</span>); <span class=\"comment\">//帶入參數，執行函式</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(number)</span><br></pre></td></tr></table></figure>\n\n<p>這時候 Chrome 開發工具就會顯示下圖：</p>\n<p><img src=\"https://firebasestorage.googleapis.com/v0/b/timpicturespace.appspot.com/o/JS5-1.png?alt=media&token=f24b0d8d-0249-441b-b21d-3eecf623056c\" alt=\"區域變數\"></p>\n<p>告訴我們抓不到數值，原因是上述提到，區域變數執行結束後會自動銷毀，然後這邊我記錄的是，<strong>在執行 console.log 的時候，上面一定要是宣告變數了才能驗證，不然會沒有結果。*</strong>(目前學到的概念是這樣，若有誤還請指正或未來修正)*</p>\n<hr>\n<p>但開發中遇到的狀況絕不會這麼單純，如果仍然要設定一個變數值，在區域變數外抓取的話可以這樣寫：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> number</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fName</span>(<span class=\"params\">aName</span>) </span>&#123;</span><br><span class=\"line\">  number = <span class=\"number\">10</span>; <span class=\"comment\">//區域變數</span></span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(number); <span class=\"comment\">//驗證變數</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">fName(); <span class=\"comment\">//執行函式</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(number);</span><br></pre></td></tr></table></figure>\n\n<p>在區域函數外新增一個 var 變數(全域變數)，當最後面的 console.log 執行變數驗證時，它會回去區域變數找到變數的設定值，在套進外面的 console.log 內。<br>得到的畫面如下圖：</p>\n<p><img src=\"https://firebasestorage.googleapis.com/v0/b/timpicturespace.appspot.com/o/JS5-2.png?alt=media&token=ccaee45f-ba98-44af-8b9f-b0a67451fb70\" alt=\"找外面的全域變數\"></p>\n<hr>\n<h2 id=\"全域變數\"><a href=\"#全域變數\" class=\"headerlink\" title=\"全域變數\"></a>全域變數</h2><p>簡單來說是在區域變數外的就是叫做全域變數，不過也有參考 <a href=\"http://https://ithelp.ithome.com.tw/articles/10191549\" target=\"_blank\" rel=\"noopener\">Kuro 老師的說法</a>：</p>\n<blockquote>\n<p>在 JavaScript 這門語言中，沒有所謂「全域變數」這種東西。更準確地說，我們所說的「全域變數」其實指的是「全域物件」(或者叫「頂層物件」) 的屬性。以瀏覽器來說，「全域物件」指的就是 <code>window</code>。</p>\n</blockquote>\n<p>這個說法更精準也更正確。</p>\n<p><strong>練習一個全域變數的函式：</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> number; <span class=\"comment\">//全域變數，沒有給予數值</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fName</span>(<span class=\"params\">aName</span>) </span>&#123;</span><br><span class=\"line\">  number = aName + <span class=\"number\">1</span>; <span class=\"comment\">//區域變數</span></span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(number); <span class=\"comment\">//驗證變數</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">fName(<span class=\"number\">10</span>); <span class=\"comment\">//執行函式</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(number);</span><br></pre></td></tr></table></figure>\n\n<p>設定一個全域變數在<strong>最外面</strong>，前面提到在區域變數執行後會註銷該變數效果，但這次裡面的區域變數把 <code>var</code> 變數宣告拿掉，這時他會去抓取執行函式裡面的參數值，在讓全域變數去找到區域變數所套入的數值，在 Chrome 開發工具就會顯示如下圖：</p>\n<p><img src=\"https://firebasestorage.googleapis.com/v0/b/timpicturespace.appspot.com/o/JS5-3.png?alt=media&token=e0284e6d-6f47-4b05-989d-6f1d3ee815ab\" alt=\"全域變數\"></p>\n<p>引用 Kuro 老師的文章有彙整以下結論：</p>\n<blockquote>\n<h3 id=\"什麼叫做全域物件的「屬性」呢？\"><a href=\"#什麼叫做全域物件的「屬性」呢？\" class=\"headerlink\" title=\"什麼叫做全域物件的「屬性」呢？\"></a>什麼叫做全域物件的「屬性」呢？</h3></blockquote>\n<blockquote>\n<p>舉個例子，我們在最外層透過 var 建立一個變數 a，像這樣：</p>\n<p><code>var a = 10;</code><br>一直以來我們都稱它叫「全域變數」對吧？<br>這個時候，請你在後面加一行：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"number\">10</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log( <span class=\"built_in\">window</span>.a );    <span class=\"comment\">// ?</span></span><br></pre></td></tr></table></figure>\n<p>看到了什麼？<br>這時你應該會看到剛剛指定給 a 的 10 這個數字才對。</p>\n<p>那麼就可以來下個結論：</p>\n<p>變數有效範圍 (<code>scope</code>) 的最小切分單位是 <code>function</code> (ES6 的 <code>let</code> 與 <code>const</code> 例外)<br>即使是寫在函式內，沒有 var 的變數會變成「全域變數」<br>全域變數指的是全域物件 (頂層物件) 的「屬性」</p>\n</blockquote>\n<hr>\n<h2 id=\"心得\"><a href=\"#心得\" class=\"headerlink\" title=\"心得\"></a>心得</h2><ol>\n<li>區域變數與全域變數的觀念要弄清楚，不然後面真的會學得很痛苦。JavaScript 有太多名稱要去記，當然不是死背，但需要一一消化跟了解。</li>\n<li>Chrome 的開發工具真的很貼心，都會顯示程式碼哪裡有錯誤，就不用很辛苦的慢慢去看程式碼。</li>\n</ol>\n<p>參考文章 <a href=\"https://ithelp.ithome.com.tw/articles/10191549\" target=\"_blank\" rel=\"noopener\">https://ithelp.ithome.com.tw/articles/10191549</a></p>\n","categories":["JavaScript Note"],"tags":["JavaScript"]},{"title":"JS 筆記 - 在函式 function 加入參數","url":"/JavaScript-Note/20200218/2420857626/","content":"<p><img src=\"https://firebasestorage.googleapis.com/v0/b/timpicturespace.appspot.com/o/JavaScript%20note-01.jpg?alt=media&token=7bee0261-72ac-4de4-9f5a-f39d58735b7d\" alt=\"JavaScript Note\"></p>\n<p>學習了變數 variable 跟函式 function 的基本認識，單元分開都很可以，最怕就是綜合應用，深怕我自己根基不夠穩，所以我拆了很細來學習，一次學一點，雖然慢，但觀念清楚比較重要。</p>\n<hr>\n<h2 id=\"函式帶入參數\"><a href=\"#函式帶入參數\" class=\"headerlink\" title=\"函式帶入參數\"></a>函式帶入參數</h2><p>函式基本寫法：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">number</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">\"Tim\"</span>); <span class=\"comment\">//字串要加引號</span></span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"number\">323</span>); <span class=\"comment\">//數字不用加引號</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">number(); <span class=\"comment\">//執行函式</span></span><br></pre></td></tr></table></figure>\n\n<p>在小括弧中可以帶入參數名稱，一樣是<strong>自定義</strong>。</p>\n<h3 id=\"練習帶入一個參數會這樣寫：\"><a href=\"#練習帶入一個參數會這樣寫：\" class=\"headerlink\" title=\"練習帶入一個參數會這樣寫：\"></a>練習帶入一個參數會這樣寫：</h3><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">math</span>(<span class=\"params\">number</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> total = number; <span class=\"comment\">//宣告變數的值等於參數</span></span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(total); <span class=\"comment\">//驗證結果是變數的名稱，但這邊不是輸入字串，故不用加上引號</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">math(<span class=\"number\">10</span>); <span class=\"comment\">//執行函式，並帶入參數</span></span><br></pre></td></tr></table></figure>\n\n<hr>\n<h3 id=\"函式-參數-運算\"><a href=\"#函式-參數-運算\" class=\"headerlink\" title=\"函式 + 參數 + 運算\"></a>函式 + 參數 + 運算</h3><p>參數可以帶入兩個、三個甚至無限多，並可以利用變數做加減乘除的方式來做更多元的變化。(變數的加減乘除是：<code>+</code>、<code>-</code>、<code>*</code>、<code>/</code> )</p>\n<p><strong>EX. 加法</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">math</span>(<span class=\"params\">numOne, numTwo</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> total = numOne + numTwo; <span class=\"comment\">//結果為兩個變數相加</span></span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(total); <span class=\"comment\">//驗證變數</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">math(<span class=\"number\">10</span>, <span class=\"number\">25</span>); <span class=\"comment\">//執行函式，並帶入參數</span></span><br></pre></td></tr></table></figure>\n\n<p>在 Chrome 的開發人員工具會顯示如下：</p>\n<p><img src=\"https://firebasestorage.googleapis.com/v0/b/timpicturespace.appspot.com/o/%E5%87%BD%E5%BC%8F%E5%B8%B6%E5%8F%83%E6%95%B8.png?alt=media&token=b77596ff-aa8e-453e-9d5e-3c1667933cf0\" alt=\"函式帶參數\"></p>\n<p>其他也可以在 <a href=\"https://codepen.io/hnzxewqw/pen/qBdrKKx\" target=\"_blank\" rel=\"noopener\">codepen</a> 調整不同的加減乘除方式玩玩看。</p>\n","categories":["JavaScript Note"],"tags":["JavaScript"]},{"title":"JS 筆記 - 認識函式 function 與使用","url":"/JavaScript-Note/20200211/3165847303/","content":"<p><img src=\"https://firebasestorage.googleapis.com/v0/b/timpicturespace.appspot.com/o/JavaScript%20note-01.jpg?alt=media&token=7bee0261-72ac-4de4-9f5a-f39d58735b7d\" alt=\"JavaScript Note\"></p>\n<p>到目前為止，發現 JS 的寫法非常直觀，跟 HTML 與 CSS 的思維不太一樣，之前學過一陣子 jQuery，會覺得思維模式有點不同，直觀卻又要很仔細，而且感受到<strong>電腦很笨</strong>，要一個口令一個動作，這次就要來學習如何告訴電腦我要的指令。</p>\n<hr>\n<h1 id=\"什麼是函式-funciton\"><a href=\"#什麼是函式-funciton\" class=\"headerlink\" title=\"什麼是函式 funciton\"></a>什麼是函式 funciton</h1><p>簡單來說「函式」指的是將一或多段程式指令包裝起來，可以重複使用，也方便維護。<a href=\"http://https://ithelp.ithome.com.tw/articles/10191549\" target=\"_blank\" rel=\"noopener\">(參考來源)</a></p>\n<p>這邊我覺得有一個有趣的事情，英文 function 有<strong>功能</strong>的意思，也的確在撰寫的時候好像透過幾段程式指令告訴電腦我要做什麼，所以可能是因為這樣，被翻譯成函式吧!?<br><em>因為從小數學很爛，所以看到什麼 “式” 都會特別緊張</em></p>\n<hr>\n<h2 id=\"函式的寫法\"><a href=\"#函式的寫法\" class=\"headerlink\" title=\"函式的寫法\"></a>函式的寫法</h2><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">name</span>(<span class=\"params\">params</span>) </span>&#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>用 function 做<strong>宣告</strong>，後面<strong>自定義</strong>一個名稱，加上<strong>小括弧</strong>(以後可以放參數用)，再把要寫入函式的程式碼用一個大括弧包起來</p>\n<hr>\n<h3 id=\"實際來寫一個練習：\"><a href=\"#實際來寫一個練習：\" class=\"headerlink\" title=\"實際來寫一個練習：\"></a>實際來寫一個練習：</h3><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">number</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'Tim'</span>) <span class=\"comment\">//字串要加引號</span></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"number\">323</span>) <span class=\"comment\">//數字不用加引號</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>但這樣只是建立好一個函式而已，不會被執行，若要執行函式，要多寫一行程式碼，會如下呈現：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">number</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'Tim'</span>) <span class=\"comment\">//字串要加引號</span></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"number\">323</span>) <span class=\"comment\">//數字不用加引號  </span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">number(); <span class=\"comment\">//執行函式</span></span><br></pre></td></tr></table></figure>\n\n<hr>\n<p>函式可以重複執行，如果要重複執行一樣的函式，只要再打上一樣的指令就可了，如下程式碼：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">number</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'Tim'</span>) <span class=\"comment\">//字串要加引號</span></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"number\">323</span>) <span class=\"comment\">//數字不用加引號    </span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">number(); <span class=\"comment\">//執行函式</span></span><br><span class=\"line\">number(); <span class=\"comment\">//重複執行函式</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"心得\"><a href=\"#心得\" class=\"headerlink\" title=\"心得\"></a>心得</h3><p>function 函式可以當作設定好的功能，等需要執行的時候再找到做好的功能拿出來使用就可以囉！</p>\n","categories":["JavaScript Note"],"tags":["JavaScript"]},{"title":"JS 筆記 - 認識變數 variable 與使用方法","url":"/JavaScript-Note/20200208/3675098643/","content":"<p><img src=\"https://firebasestorage.googleapis.com/v0/b/timpicturespace.appspot.com/o/JavaScript%20note-01.jpg?alt=media&token=7bee0261-72ac-4de4-9f5a-f39d58735b7d\" alt=\"JavaScript Note\"></p>\n<p>在學習 JavaScript 之前，都會聽到一堆專有名詞，結果專有名詞的白話文還是聽不懂，就覺得很可怕，心中產生排斥，但我發現如果心中產生排斥感，就會稍微拒絕學習該領域的東西，經過 HTML &amp; CSS、jQuery、RWD、Sass、Bootstrap4…等課程後，就比較沒這麼排斥這些「專有名詞」，這幾個月在前端領域中不斷的蒐集資料，也慢慢知道幾位大神級人物，這次的學習也有參考 Kuro 大大的在 <a href=\"http://https://ithelp.ithome.com.tw/users/20065504/ironman/1259\" target=\"_blank\" rel=\"noopener\">2018 鐵人賽</a>撰寫成<a href=\"http://https://www.tenlong.com.tw/products/9789864344130\" target=\"_blank\" rel=\"noopener\">書籍</a>的內容搭配<a href=\"http://https://www.hexschool.com/\" target=\"_blank\" rel=\"noopener\">六角學院</a>的<a href=\"http://https://www.hexschool.com/courses/javascript.html\" target=\"_blank\" rel=\"noopener\">課程</a>來看，廣度學習下，比較能知道課程跟書本內容在講什麼了。</p>\n<h2 id=\"認識變數-Variable\"><a href=\"#認識變數-Variable\" class=\"headerlink\" title=\"認識變數 Variable\"></a>認識變數 Variable</h2><p>簡單來說變數是用來儲存資料和進行運算的基本單位，可以將變數想像為一個盒子，用來存放資料。<br>更多詳盡的定義可以看<a href=\"http://https://ithelp.ithome.com.tw/articles/10190873\" target=\"_blank\" rel=\"noopener\">這篇</a></p>\n<h2 id=\"使用變數\"><a href=\"#使用變數\" class=\"headerlink\" title=\"使用變數\"></a>使用變數</h2><p>使用變數時，需要先使用 <code>var</code> 這個語法，告訴電腦說：我現在要宣告一個變數囉!!<br>再來打上想要的<strong>變數名稱</strong>，就會變成這樣 <code>var varName</code>。</p>\n<blockquote>\n<p>EX. </p>\n<ol>\n<li>命名一個變數是<strong>我的名字</strong>，就會這樣寫： <code>var myName =$;</code></li>\n<li>命名一個變數是<strong>號碼</strong>，就會這樣寫：<code>var number = $;</code></li>\n</ol>\n</blockquote>\n<p>變數的命名是<strong>自己定義的</strong>，但建議要有<strong>語意化</strong>，不然哪天回來修改程式碼，又沒有寫註解，就會忘記為什麼會這樣打，然後就會發生恐怖的事情。<br>另外維持一個習慣就是在每個程式碼<strong>結束後</strong>都打上一個<strong>分號</strong>。</p>\n<blockquote>\n<p><em>通常使用變數會在 HTML 中會建立一個 id 來使用。</em></p>\n</blockquote>\n<h2 id=\"變數的值\"><a href=\"#變數的值\" class=\"headerlink\" title=\"變數的值\"></a>變數的值</h2><p>宣告要使用變數，還有命名之後，要給變數一個值，電腦才會知道這個變數的內容是什麼，呈現的內容稱作為<strong>值</strong>：</p>\n<h3 id=\"Number-數字\"><a href=\"#Number-數字\" class=\"headerlink\" title=\"Number (數字)\"></a>Number (數字)</h3><p>也就是一般的數字 <strong>0 ~ 9</strong></p>\n<blockquote>\n<p>沿用上方例子，<code>var number = 8;</code>,文字解釋為，宣告一個變數，其名稱為 number，數字值為 8。</p>\n</blockquote>\n<p>可以使用這段語法將變數名稱呈現在網頁上</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> number = <span class=\"number\">8</span></span><br><span class=\"line\"><span class=\"comment\">//建立變數</span></span><br><span class=\"line\"><span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'number'</span>).textContent = number</span><br><span class=\"line\"><span class=\"comment\">//透過 textContent 控制 id 的內容，結果要等於變數名稱</span></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>可參考連結 <a href=\"https://codepen.io/hnzxewqw/pen/abbXXmX\" target=\"_blank\" rel=\"noopener\">https://codepen.io/hnzxewqw/pen/abbXXmX</a></p>\n</blockquote>\n<p><em>對了，可以用變數來做加減乘除喔~</em></p>\n<h3 id=\"String-字串\"><a href=\"#String-字串\" class=\"headerlink\" title=\"String (字串)\"></a>String (字串)</h3><p>也就是文字，打中文也可以，但<strong>建議打英文</strong>，不然如果專案是國際專案，會變成亂碼。<br>打字串的時候要加上<strong>單引號</strong>或<strong>雙引號</strong>，不然電腦會不知道這個值是什麼。</p>\n<blockquote>\n<p>沿用上方例子，<code>var myName = &quot;Tim&quot;;</code>,文字解釋為，宣告一個變數，其名稱為 myName，字串值為 Tim。</p>\n</blockquote>\n<p>可以使用這段語法將變數名稱呈現在網頁上</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> myName = <span class=\"string\">\"Tim\"</span>;</span><br><span class=\"line\"><span class=\"comment\">//建立變數，字串值要加上引號</span></span><br><span class=\"line\"><span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'myName'</span>).textContent = myName</span><br><span class=\"line\"><span class=\"comment\">//透過 textContent 控制 id 的內容，結果要等於變數名稱</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>可參考連結 <a href=\"https://codepen.io/hnzxewqw/pen/qBBggaG\" target=\"_blank\" rel=\"noopener\">https://codepen.io/hnzxewqw/pen/qBBggaG</a></p>\n</blockquote>\n<h3 id=\"Boolean-布林\"><a href=\"#Boolean-布林\" class=\"headerlink\" title=\"Boolean (布林)\"></a>Boolean (布林)</h3><p>只有兩種值，true 跟 false</p>\n<blockquote>\n<p>可參考連結 <a href=\"https://codepen.io/hnzxewqw/pen/OJJddpb\" target=\"_blank\" rel=\"noopener\">https://codepen.io/hnzxewqw/pen/OJJddpb</a></p>\n</blockquote>\n<p><em>之後使用  if 判斷式會滿常被使用</em></p>\n<h2 id=\"什麼是-undefined\"><a href=\"#什麼是-undefined\" class=\"headerlink\" title=\"什麼是 undefined\"></a>什麼是 undefined</h2><p>還沒有給變數數值的時候會顯示的回傳資料，如果程式碼這樣寫：<code>var number;</code><br>因為沒有給任何定義的數值，所以會回傳 undefined。<br>舉例：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> number;</span><br><span class=\"line\"><span class=\"comment\">//沒有給值，所以會是 undefined</span></span><br></pre></td></tr></table></figure>\n<p>或是這樣也是一樣的結果</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log(number); <span class=\"comment\">//因為前面沒有變數的值，結果會是 undefined</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> number = <span class=\"number\">1</span>;</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"變數的命名規則\"><a href=\"#變數的命名規則\" class=\"headerlink\" title=\"變數的命名規則\"></a>變數的命名規則</h2><h3 id=\"開頭不能用數字\"><a href=\"#開頭不能用數字\" class=\"headerlink\" title=\"開頭不能用數字\"></a>開頭不能用數字</h3><p>宣告變數的名稱若開頭數字，會格式錯誤，如下圖：</p>\n<p><img src=\"https://firebasestorage.googleapis.com/v0/b/timpicturespace.appspot.com/o/2-1.png?alt=media&token=1446ae99-7b7e-498e-903a-2baa4636fa75\" alt=\"開頭不能用數字\"></p>\n<h3 id=\"不能包含-或是-等符號\"><a href=\"#不能包含-或是-等符號\" class=\"headerlink\" title=\"不能包含 - 或是 . 等符號\"></a>不能包含 - 或是 . 等符號</h3><p>宣告變數的名稱若使用 “-“ 或 “.”，會格式錯誤，如下圖：</p>\n<p><img src=\"https://firebasestorage.googleapis.com/v0/b/timpicturespace.appspot.com/o/2-2.png?alt=media&token=ead6b977-c4c7-4c55-a8e5-90059331a700\" alt=\"不能包含 - 或是 . 等符號\"></p>\n<h3 id=\"不能使用-JS-預設的-關鍵字-指令\"><a href=\"#不能使用-JS-預設的-關鍵字-指令\" class=\"headerlink\" title=\"不能使用 JS 預設的 ( 關鍵字 ) 指令\"></a>不能使用 JS 預設的 ( 關鍵字 ) 指令</h3><p>JS 在變數中有一些預設的關鍵字，初學者可以當作是預設指令，如果重複預設的關鍵字會格式錯誤，如下圖：<br><em>更多關鍵字可以看<a href=\"http://https://www.w3schools.com/js/js_reserved.asp\" target=\"_blank\" rel=\"noopener\">這裡</a></em></p>\n<p><img src=\"https://firebasestorage.googleapis.com/v0/b/timpicturespace.appspot.com/o/2-3.png?alt=media&token=45dd0919-fe5e-4f2c-b724-be5d7d4a177a\" alt=\"不能使用 JS 預設的 ( 關鍵字 ) 指令\"></p>\n<h3 id=\"有大小寫之分\"><a href=\"#有大小寫之分\" class=\"headerlink\" title=\"有大小寫之分\"></a>有大小寫之分</h3><blockquote>\n<p>JavaScript 的語法是有區分大小寫的，也就是說，變數 app 與 App 在 JavaScript 會被認為是兩個不同的變數。<br>如果大小寫弄錯了，在執行變數時會變成找不到資料，如下圖：</p>\n</blockquote>\n<p><img src=\"https://firebasestorage.googleapis.com/v0/b/timpicturespace.appspot.com/o/2-4.png?alt=media&token=1a3b1b87-7226-4b1f-8b69-c43e5ce155b0\" alt=\"有大小寫之分\"></p>\n<h2 id=\"建議變數名稱要有語意化\"><a href=\"#建議變數名稱要有語意化\" class=\"headerlink\" title=\"建議變數名稱要有語意化\"></a>建議變數名稱要有語意化</h2><p>原因是在寫專案當下可能知道自己在幹嘛，但如果之後要維護或修改時，可能就會找不到相對應的程式碼了。</p>\n<p>參考文章 <a href=\"https://ithelp.ithome.com.tw/articles/10190873\" target=\"_blank\" rel=\"noopener\">https://ithelp.ithome.com.tw/articles/10190873</a></p>\n","categories":["JavaScript Note"],"tags":["JavaScript"]},{"title":"JS 筆記 - 建立 JS 環境、alert、textContent","url":"/JavaScript-Note/20200206/2494141895/","content":"<p><img src=\"https://firebasestorage.googleapis.com/v0/b/timpicturespace.appspot.com/o/JavaScript%20note-01.jpg?alt=media&token=7bee0261-72ac-4de4-9f5a-f39d58735b7d\" alt=\"JavaScript Note\"></p>\n<h2 id=\"JavaScript-概述\"><a href=\"#JavaScript-概述\" class=\"headerlink\" title=\"JavaScript 概述\"></a>JavaScript 概述</h2><h3 id=\"一般來說，完整的JavaScript包括以下幾個部分：\"><a href=\"#一般來說，完整的JavaScript包括以下幾個部分：\" class=\"headerlink\" title=\"一般來說，完整的JavaScript包括以下幾個部分：\"></a>一般來說，完整的JavaScript包括以下幾個部分：</h3><ul>\n<li>ECMAScript，描述了該語言的語法和基本物件</li>\n<li>文件物件模型（DOM），描述處理網頁內容的方法和介面</li>\n<li>瀏覽器物件模型（BOM），描述與瀏覽器進行互動的方法和介面</li>\n</ul>\n<h3 id=\"JavaScript的基本特點如下：\"><a href=\"#JavaScript的基本特點如下：\" class=\"headerlink\" title=\"JavaScript的基本特點如下：\"></a>JavaScript的基本特點如下：</h3><ul>\n<li>是一種解釋性程式語言（代碼不進行預編譯）。</li>\n<li>主要用來向 HTML 頁面添加互動行為。</li>\n<li>可以直接嵌入 HTML 頁面，但寫成單獨的 JS 檔案有利於結構和行為的分離。</li>\n</ul>\n<h3 id=\"JavaScript常用來完成以下任務：\"><a href=\"#JavaScript常用來完成以下任務：\" class=\"headerlink\" title=\"JavaScript常用來完成以下任務：\"></a>JavaScript常用來完成以下任務：</h3><ul>\n<li>嵌入動態文字於 HTML 頁面</li>\n<li>對瀏覽器事件作出回應</li>\n<li>讀寫 HTML 元素</li>\n<li>在資料被提交到伺服器之前驗證資料</li>\n<li>檢測訪客的瀏覽器資訊</li>\n<li>控制 cookies，包括建立和修改等</li>\n</ul>\n<h2 id=\"正文開始\"><a href=\"#正文開始\" class=\"headerlink\" title=\"正文開始\"></a>正文開始</h2><p>首先先學習建立一個 <code>JavaScript</code> 的環境，環境建立如下：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"meta-keyword\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">\"en\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"UTF-8\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"viewport\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"width=device-width, initial-scale=1.0\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">http-equiv</span>=<span class=\"string\">\"X-UA-Compatible\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"ie=edge\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>Document<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"js/all.js\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>通常我會把 SCSS 跟 JS 另外各自開立一個資料夾來管理，讓根目錄保持整潔。</p>\n<h2 id=\"alert-警示語法\"><a href=\"#alert-警示語法\" class=\"headerlink\" title=\"alert 警示語法\"></a>alert 警示語法</h2><p>JS 有個警示語法 (alert) 可以來測驗一下目前寫的 JS 有無效果，滿好用的，然後是這樣寫的：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\">alert(<span class=\"string\">'test'</span>);</span><br></pre></td></tr></table></figure>\n<p>記得括弧內的「文字」要使用<strong>單引號</strong>或<strong>雙引號</strong>，才能顯示正確文字。<br>可以玩一下 <a href=\"http://https://codepen.io/hnzxewqw/full/RwwEqWx\" target=\"_blank\" rel=\"noopener\">codepen</a><br>這個語法很常被使用，像是錯誤提示、或是購買商品成功或錯誤提示的彈跳視窗，但沒想到寫法這麼簡單。<br><em>另外如果不喜歡原本預設的 alert 視窗，可以看這一篇 <a href=\"http://https://w3c.hexschool.com/blog/13ef5369\" target=\"_blank\" rel=\"noopener\">SweetAlert 的作法</a></em></p>\n<p>原則上通常會把 JS 放在結尾的 <code>&lt;/body&gt;</code> 前面，確保都讀完「靜態的」程式碼後再執行 JS。</p>\n<blockquote>\n<p>&lt;有原則當然也有例外，如果特定要執行 JS 做特別的效果，也可以把 JS 的程式碼放在 <code>HTML</code> 中&gt;</p>\n</blockquote>\n<h2 id=\"textContent-的作法\"><a href=\"#textContent-的作法\" class=\"headerlink\" title=\"textContent 的作法\"></a>textContent 的作法</h2><p>要用 JS 控制網頁的文字，有一個 <code>textContent</code> 的語法，而這個語法編寫如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">document.getElementById(&#39;title1&#39;).textContent &#x3D; &#39;Hello World&#39;;</span><br></pre></td></tr></table></figure>\n\n<p>白話文解釋：<strong>網頁主體( document )</strong>，宣告用 <strong>使用 id 元件( getElementById )</strong> 加上設定的 <strong>id 名稱</strong> 將原本的文字，使用 <strong>文字內容( textContent )</strong> 的語法變成 <strong>指定文字(這裡是寫 Hello World )</strong></p>\n<p>不過這邊有一個地方要注意，如果把 <code>&lt;script&gt;</code> 標籤寫在 head 裡面的時候，會發現網頁不會有效果，反而一直停在原本的寫的畫面。然後打開 Chrome 檢查會看到 console 裡面會顯示下圖：</p>\n<p><img src=\"https://firebasestorage.googleapis.com/v0/b/timpicturespace.appspot.com/o/JS1-1.png?alt=media&token=95974db7-9979-4a3c-83d2-25fe0e218cc6\" alt=\"把 `&lt;script&gt;` 標籤寫在 `header` 時，`console` 會跳錯\"></p>\n<p>原因是網頁是從上往下閱讀，但如果發現在 head 就讀到 <code>&lt;script&gt;</code> 標籤時，因為找不到內容而無法順利顯示 JS ，所以常常會把 JS 寫在最後面就是這個原因。</p>\n<p><strong>原本 HTML 程式碼如下：</strong></p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"meta-keyword\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">\"en\"</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"UTF-8\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"viewport\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"width=device-width, initial-scale=1.0\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">http-equiv</span>=<span class=\"string\">\"X-UA-Compatible\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"ie=edge\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>JavaScript practice Day1<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">h1</span> <span class=\"attr\">id</span>=<span class=\"string\">\"title1\"</span>&gt;</span>This is Title<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"js/all.js\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>正常來說畫面應該會是下圖所示：</p>\n<p><img src=\"https://firebasestorage.googleapis.com/v0/b/timpicturespace.appspot.com/o/JS%201-2.png?alt=media&token=72be0bdf-22b2-472f-b5df-0344b8ffea64\" alt=\"通常會讓程式碼讀取完後，再跑 `script` 指令\"></p>\n<p>可以點一下<a href=\"http://https://codepen.io/hnzxewqw/pen/OJJraKe\" target=\"_blank\" rel=\"noopener\">這裡</a>把 JS 的註解打開，然後重新整理就會看到透過 JS 就把原本的文字：<strong>This is Title</strong>，變成：<strong>Hello World</strong> 囉~!!</p>\n<p>文獻參考<br> <a href=\"https://zh.wikipedia.org/wiki/JavaScript#%E8%82%87%E5%A7%8B%E6%96%BC%E7%B6%B2%E6%99%AF\" target=\"_blank\" rel=\"noopener\">https://zh.wikipedia.org/wiki/JavaScript#%E8%82%87%E5%A7%8B%E6%96%BC%E7%B6%B2%E6%99%AF</a></p>\n","categories":["JavaScript Note"],"tags":["JavaScript"]},{"title":"寫一個 search bar","url":"/Practice-Note/20200106/1702288669/","content":"<h2 id=\"搜尋列-input-button\"><a href=\"#搜尋列-input-button\" class=\"headerlink\" title=\"搜尋列 ( input + button )\"></a>搜尋列 ( input + button )</h2><p>這次來練習寫一個 Search Bar，要寫的樣式如下</p>\n<p><img src=\"https://firebasestorage.googleapis.com/v0/b/timpicturespace.appspot.com/o/searchbar01.png?alt=media&token=b380ab04-a70c-469e-82c0-78462af98f22\" alt=\"參考樣式\"></p>\n<h3 id=\"起手式\"><a href=\"#起手式\" class=\"headerlink\" title=\"起手式\"></a>起手式</h3><p>我習慣在最外層寫一個 <code>.wrap</code>，在繼續將裡面要完成的 HTML 先寫完<br>所以程式碼會如下，</p>\n<p><strong>HTML</strong></p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"wrap\"</span>&gt;</span></span><br><span class=\"line\"> <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"search\"</span>&gt;</span></span><br><span class=\"line\"> <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">class</span>=<span class=\"string\">\"search-bar\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"search\"</span> <span class=\"attr\">id</span>=<span class=\"string\">\"search\"</span> <span class=\"attr\">placeholder</span>=<span class=\"string\">\"輸入名稱\"</span>&gt;</span></span><br><span class=\"line\"> <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">class</span>=<span class=\"string\">\"search-btn\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\"> <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>這時候我才會加入 CSS 的樣式，因為要讓底色是我指定的顏色，還有這次 Search Bar 的裡面所有的連結按鈕我都取消底線的樣式，所以我的 CSS 先把 layout 寫好，</p>\n<p><strong>CSS</strong></p>\n<figure class=\"highlight css\"><table><tr><td class=\"code\"><pre><span class=\"line\">*&#123;<span class=\"attribute\">box-sizing</span>: border-box;&#125;</span><br><span class=\"line\"><span class=\"selector-tag\">body</span>&#123;</span><br><span class=\"line\"> <span class=\"attribute\">background-color</span>: <span class=\"number\">#efe9e7</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-tag\">a</span>&#123;</span><br><span class=\"line\"> <span class=\"attribute\">text-decoration</span>: none;</span><br><span class=\"line\"> <span class=\"attribute\">color</span>: <span class=\"number\">#3D1101</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.wrap</span>&#123;</span><br><span class=\"line\"> <span class=\"attribute\">max-width</span>: <span class=\"number\">960px</span>;</span><br><span class=\"line\"> <span class=\"attribute\">margin</span>:<span class=\"number\">20px</span> auto <span class=\"number\">0</span> auto;</span><br><span class=\"line\"> <span class=\"attribute\">height</span>: auto;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>使用 <code>box-sizing:border-box</code> 原因是要讓原本 CSS 預設的 padding 值不要影響我的設定值。<br>這時候畫面會顯示這樣</p>\n<p><img src=\"https://firebasestorage.googleapis.com/v0/b/timpicturespace.appspot.com/o/searchbar02.png?alt=media&token=cc40d3ad-325e-4be9-ae09-75f188b57245\" alt=\"大概是我要的感覺了\"></p>\n<hr>\n<h2 id=\"把按鈕的文字改成圖示\"><a href=\"#把按鈕的文字改成圖示\" class=\"headerlink\" title=\"把按鈕的文字改成圖示\"></a>把按鈕的文字改成圖示</h2><p>再來就是優化的內容了，為了要讓搜尋按鈕好看，所以這邊我要載入 fontawesome，方式如下，先到 fontawesome 官網，選擇 Start for free，畫面如下</p>\n<p><img src=\"https://firebasestorage.googleapis.com/v0/b/timpicturespace.appspot.com/o/searchbar03.png?alt=media&token=0ef052e3-683e-4925-8547-e3798366f0a6\" alt=\"fontawesome 首頁\"></p>\n<blockquote>\n<p>以前都免費，現在要付費才能升級成 PRO 的會員了…</p>\n</blockquote>\n<blockquote>\n<p>會出現需要輸入 email 的地方，輸入完後會收到官方寄來的認證信，打開信件認證之後，在登入網頁，會給一組專屬的 kit 程式碼跟代碼，記得先複製存檔到電腦裡喔！以後要用到 fontawesome 都要匯入這個 kit 程式！或是去找 CDN 放在 link 裡面也可以！</p>\n</blockquote>\n<p>然後在貼上到 head 裡面就可以讀取到 fontawesome 的圖案了，然後這次我要找的是 Search 的圖案，所以我就在裡面找 search，有很多放大鏡的圖案，就選一個喜歡的來用，於是我就找到了這個圖案</p>\n<p><img src=\"https://firebasestorage.googleapis.com/v0/b/timpicturespace.appspot.com/o/searchbar04.png?alt=media&token=d824e86d-b802-405f-a92e-158adf41b4e6\" alt=\"在 fontawesome 搜尋 search 在挑選喜歡的樣式\"></p>\n<p>因為我沒有付費升級成 PRO 會員，所以只能選第一個 solid 的選項把上面的網址複製下來貼到原本程式碼 <code>btn</code> 的地方，程式碼會是這樣</p>\n<p><strong>HTML</strong></p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"wrap\"</span>&gt;</span></span><br><span class=\"line\"> <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"search\"</span>&gt;</span></span><br><span class=\"line\"> <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">class</span>=<span class=\"string\">\"search-bar\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"search\"</span> <span class=\"attr\">id</span>=<span class=\"string\">\"search\"</span> <span class=\"attr\">placeholder</span>=<span class=\"string\">\"輸入名稱\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">class</span>=<span class=\"string\">\"search-btn\"</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">i</span> <span class=\"attr\">class</span>=<span class=\"string\">\"fas fa-search\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">i</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>這時候畫面就變成下方所示</p>\n<p><img src=\"https://firebasestorage.googleapis.com/v0/b/timpicturespace.appspot.com/o/searchbar05.png?alt=media&token=3db47084-2c4a-4b94-b98e-462071816fca\" alt=\"好像很接近要寫的樣子\"></p>\n<hr>\n<h2 id=\"細節優化\"><a href=\"#細節優化\" class=\"headerlink\" title=\"細節優化\"></a>細節優化</h2><p>這時候 CSS 要繼續往下寫，先設定 <code>.search</code> 的寬度為畫面的 80%，並且靠左，因為等等還要放上購物車，寫入 <code>position</code> 是將 <code>.search</code> 設定為父元素，讓等等放大鏡圖示可以對齊。</p>\n<p><strong>CSS</strong></p>\n<figure class=\"highlight css\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.search</span>&#123;</span><br><span class=\"line\"> <span class=\"attribute\">position</span>: relative;</span><br><span class=\"line\"> <span class=\"attribute\">width</span>: <span class=\"number\">80%</span>;</span><br><span class=\"line\"> <span class=\"attribute\">float</span>: left; </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"優化-input\"><a href=\"#優化-input\" class=\"headerlink\" title=\"優化 input\"></a>優化 input</h3><p>再來優化 <code>.search-bar</code> 讓它填滿 <code>.search</code> 的範圍，並按照標記文件 <code>height:32px</code>，並且外框設定 <code>3px</code> 的棕色實心線，為了讓 search bar 與畫面一致，所以也將背景填滿色。</p>\n<p><strong>CSS</strong></p>\n<figure class=\"highlight css\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.search-bar</span>&#123;</span><br><span class=\"line\"> <span class=\"attribute\">width</span>: <span class=\"number\">100%</span>;</span><br><span class=\"line\"> <span class=\"attribute\">height</span>: <span class=\"number\">32px</span>;</span><br><span class=\"line\"> <span class=\"attribute\">font-size</span>: <span class=\"number\">20px</span>;</span><br><span class=\"line\"> <span class=\"attribute\">border</span>: <span class=\"number\">3px</span> solid <span class=\"number\">#3D1101</span>;</span><br><span class=\"line\"> <span class=\"attribute\">background-color</span>: <span class=\"number\">#efe9e7</span>;</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h3 id=\"優化-button\"><a href=\"#優化-button\" class=\"headerlink\" title=\"優化 button\"></a>優化 button</h3><p>優化按鈕，按照標記文件設定寬高與背景色後，也將 fontawesome 的顏色與背景設定相同，加上 <code>cursor</code> 讓滑鼠移過去時可以變成手指的圖示，再透過 <code>position:absolute</code> 設定成絕對定為，讓按鈕可以靠上靠右對齊 Search bar</p>\n<p><strong>CSS</strong></p>\n<figure class=\"highlight css\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.search-btn</span>&#123;</span><br><span class=\"line\"> <span class=\"attribute\">width</span>: <span class=\"number\">36px</span>;</span><br><span class=\"line\"> <span class=\"attribute\">height</span>: <span class=\"number\">32px</span>;</span><br><span class=\"line\"> <span class=\"attribute\">background-color</span>: <span class=\"number\">#3D1101</span>;</span><br><span class=\"line\"> <span class=\"attribute\">color</span>:<span class=\"number\">#efe9e7</span>;</span><br><span class=\"line\"> <span class=\"attribute\">outline</span>:none;</span><br><span class=\"line\"> <span class=\"attribute\">border</span>: <span class=\"number\">2px</span> solid <span class=\"number\">#3D1101</span>;</span><br><span class=\"line\"> <span class=\"attribute\">cursor</span>: pointer; </span><br><span class=\"line\"> <span class=\"attribute\">position</span>: absolute;</span><br><span class=\"line\"> <span class=\"attribute\">top</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\"> <span class=\"attribute\">right</span>: <span class=\"number\">0</span>; </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h2 id=\"完成\"><a href=\"#完成\" class=\"headerlink\" title=\"完成\"></a>完成</h2><p>寫完上方程式碼就完成這次的好看的搜尋列囉~~!</p>\n<p><img src=\"https://firebasestorage.googleapis.com/v0/b/timpicturespace.appspot.com/o/searchbar06.png?alt=media&token=759ca863-8f17-45e6-9ccd-66feb154d43a\" alt=\"搜尋列完成\"></p>\n<p>完整程式碼在這裡<br><a href=\"https://codepen.io/hnzxewqw/pen/ZgWymm\" target=\"_blank\" rel=\"noopener\">https://codepen.io/hnzxewqw/pen/ZgWymm</a></p>\n","categories":["Practice Note"],"tags":["HTML","CSS"]},{"title":"美化 Powershell","url":"/Powershell/20191225/611397980/","content":"<h2 id=\"Powershell-的美化原因\"><a href=\"#Powershell-的美化原因\" class=\"headerlink\" title=\"Powershell 的美化原因\"></a>Powershell 的美化原因</h2><p>為了開發更方便，Win10 有內建一個終端機叫做 Powershell，但原本的樣式很醜…</p>\n<p><img src=\"https://firebasestorage.googleapis.com/v0/b/timpicturespace.appspot.com/o/powershell%E9%A0%90%E8%A8%AD.png?alt=media&token=33be3a02-3289-4ee3-adb6-eff49f6d2b72\" alt=\"Windows 預設的樣式\"></p>\n<p>這種配色相當刺眼，所以為了以後開發保護眼睛，還是美化一下好了!</p>\n<hr>\n<h2 id=\"環境條件\"><a href=\"#環境條件\" class=\"headerlink\" title=\"環境條件\"></a>環境條件</h2><ul>\n<li>需要在 Windows 10 1903 版以上才能美化喔~不然會失敗。</li>\n</ul>\n<hr>\n<h2 id=\"查看-Windows-版本\"><a href=\"#查看-Windows-版本\" class=\"headerlink\" title=\"查看 Windows 版本\"></a>查看 Windows 版本</h2><p>在下方搜尋列中打 <code>winver</code>，就可以看到版本喔! 如果發現不是 1903 版本要記得更新系統。</p>\n<p><img src=\"https://firebasestorage.googleapis.com/v0/b/timpicturespace.appspot.com/o/winver.png?alt=media&token=e6862e07-d4ab-477e-aada-2db27d22da7e\" alt=\"winver\"></p>\n<p><img src=\"https://firebasestorage.googleapis.com/v0/b/timpicturespace.appspot.com/o/winver1903.png?alt=media&token=7980ae9d-7a88-4047-b40a-48d1a82147b6\" alt=\"winver 1903\"></p>\n<p>確認好後就可以繼續進行美化了。</p>\n<hr>\n<h2 id=\"美化提示條\"><a href=\"#美化提示條\" class=\"headerlink\" title=\"美化提示條\"></a>美化提示條</h2><p>預計要美化提示條的樣式如下：</p>\n<p><img src=\"https://firebasestorage.googleapis.com/v0/b/timpicturespace.appspot.com/o/powershell%E6%8F%90%E7%A4%BA%E6%A2%9D.png?alt=media&token=fa27bd1b-6555-4aa9-9120-b835e639eed1\" alt=\"美化後的提示條\"></p>\n<p>安裝提示條套件 <code>oh-my-posh</code>，<a href=\"https://github.com/JanDeDobbeleer/oh-my-posh\" target=\"_blank\" rel=\"noopener\">oh-my-posh GitHub</a></p>\n<h3 id=\"安裝套件\"><a href=\"#安裝套件\" class=\"headerlink\" title=\"安裝套件\"></a>安裝套件</h3><p>在 powershell 輸入下方指令：</p>\n<figure class=\"highlight cmd\"><table><tr><td class=\"code\"><pre><span class=\"line\">Install-Module posh-git -Scope CurrentUser</span><br></pre></td></tr></table></figure>\n<p>安裝過程會有問題提問，一直輸入 <code>Y</code> 就可以了。</p>\n<p>再來安裝 oh-my-posh 模組，輸入下方指令：</p>\n<figure class=\"highlight cmd\"><table><tr><td class=\"code\"><pre><span class=\"line\">Install-Module oh-my-posh -Scope CurrentUser</span><br></pre></td></tr></table></figure>\n<p>安裝過程會有問題提問，一樣輸入 <code>Y</code> 就可以了。</p>\n<h3 id=\"設定自動套用\"><a href=\"#設定自動套用\" class=\"headerlink\" title=\"設定自動套用\"></a>設定自動套用</h3><p>在 PowerShell 上面輸入 <code>$profile</code> 來顯示 PowerShell 自定義路徑</p>\n<blockquote>\n<p>C:\\Users\\您的資料夾名稱\\Documents\\WindowsPowerShell\\</p>\n</blockquote>\n<p>複製路徑到文件視窗中貼上，打開資料夾後底下若沒有一個檔案叫 Microsoft.PowerShell_profile.ps1 那就新增一個記事本，如果有的話要在 vscode 打開，並內容填入以下資訊：</p>\n<figure class=\"highlight cmd\"><table><tr><td class=\"code\"><pre><span class=\"line\">Import-Module posh-git</span><br><span class=\"line\">Import-Module oh-my-posh</span><br><span class=\"line\"><span class=\"built_in\">Set</span>-Theme Agnoster //我是用這個樣式</span><br></pre></td></tr></table></figure>\n\n<p>設定完成後，往後每次打開 powershell 就會自動套用了~如果想換配色的話可以到官方 readme 底下有提供別的名稱。<a href=\"https://github.com/JanDeDobbeleer/oh-my-posh#themes\" target=\"_blank\" rel=\"noopener\">官方 GitHub</a></p>\n<hr>\n<h2 id=\"調整背景色\"><a href=\"#調整背景色\" class=\"headerlink\" title=\"調整背景色\"></a>調整背景色</h2><p>有鑑於藍色底真是太痛苦了，做平面設計出身的我喜歡深灰色背景，閱讀上比較不吃力，所以要來改下背景。</p>\n<p><img src=\"https://firebasestorage.googleapis.com/v0/b/timpicturespace.appspot.com/o/powershell%20%E7%BE%8E%E5%8C%96.png?alt=media&token=dd4b4099-8d09-4e57-ba60-ebc048210047\" alt=\"我的 powershell 背景\"></p>\n<ul>\n<li>美化之前要先完成環境條件才可以進行</li>\n</ul>\n<hr>\n<h3 id=\"安裝-Windows-Terminal\"><a href=\"#安裝-Windows-Terminal\" class=\"headerlink\" title=\"安裝 Windows Terminal\"></a>安裝 Windows Terminal</h3><p>新版的 Windows Terminal 是透過 Store 安裝的，<a href=\"ms-windows-store://pdp/?ProductId=9n0dx20hk701\">前往 Store 商店</a></p>\n<p><img src=\"https://firebasestorage.googleapis.com/v0/b/timpicturespace.appspot.com/o/windows%20Terminal.png?alt=media&token=5602a109-7a90-4b4e-ad00-f6869f314af9\" alt=\"Windows Terminal\"></p>\n<p>安裝完畢後在搜尋列輸入 <code>Windows Terminal</code> 即可找到。</p>\n<p><img src=\"https://firebasestorage.googleapis.com/v0/b/timpicturespace.appspot.com/o/find%20windows%20Terminal.png?alt=media&token=4ef90689-4e6f-4326-9443-d4acf470550d\" alt=\"直接在搜尋列搜尋 Windows Terminal 即可\"></p>\n<p>打開後在工具列中找到<strong>倒三角形</strong>的圖示，會看到 <strong>setting</strong> 選項。</p>\n<p><img src=\"https://firebasestorage.googleapis.com/v0/b/timpicturespace.appspot.com/o/setting.png?alt=media&token=b2e21fef-5297-4366-bd0b-67a6674628c8\" alt=\"setting\"></p>\n<p>選擇後會打開一個記事本檔案，先另存新檔找到該路徑，在把檔案丟掉 VScode 裡面修改第一個物件，會看到如下圖：</p>\n<p><img src=\"https://firebasestorage.googleapis.com/v0/b/timpicturespace.appspot.com/o/powershell%20%E8%A8%AD%E5%AE%9A.png?alt=media&token=1d615b67-9a2c-4787-a993-2228534f9bed\" alt=\"修改內容\"></p>\n<p>註解處是我修改的地方，可以參考看看。</p>\n<h4 id=\"注意兩件事情\"><a href=\"#注意兩件事情\" class=\"headerlink\" title=\"注意兩件事情\"></a>注意兩件事情</h4><ul>\n<li>背景圖片的地方不可以有中文字，否則無法正常顯示背景圖片。</li>\n<li>字體建議修改，我個人是使用 Sarasa Term SC，否則滿怪的，原本設定 Arial 但如果出現中文字變亂碼。</li>\n</ul>\n<p>設定完之後就成功囉!!</p>\n<p><img src=\"https://firebasestorage.googleapis.com/v0/b/timpicturespace.appspot.com/o/powershell%20%E7%BE%8E%E5%8C%96.png?alt=media&token=dd4b4099-8d09-4e57-ba60-ebc048210047\" alt=\"完成後的 powershell \"></p>\n<hr>\n<blockquote>\n<p>參考文章：<a href=\"https://hsiangfeng.github.io/other/20190924/3446878284/\" target=\"_blank\" rel=\"noopener\">https://hsiangfeng.github.io/other/20190924/3446878284/</a></p>\n</blockquote>\n","categories":["Powershell"],"tags":["Powershell"]},{"title":"第一次建立 Hexo 與推上 GitHub","url":"/hexo/20191217/1291925723/","content":"<h2 id=\"為什麼要建立-Hexo-部落格\"><a href=\"#為什麼要建立-Hexo-部落格\" class=\"headerlink\" title=\"為什麼要建立 Hexo 部落格\"></a>為什麼要建立 Hexo 部落格</h2><p>從今年 2 月開始學習前端，在不同階段給我自己設立目標去挑戰，算一算也 10 個月了，看自己的能力還需要一個挑戰來幫助自己升級，讓我自己可以更快投入前端產業領域，經與 Ray 討論後，開始建立 Hexo 部落格，平台這麼多為什麼要使用 Hexo？</p>\n<p>因為 Hexo 是要使用指令來做開發，也要配合 GitHub 使用，一方面可以練習指令，另一方面可以練習 GitHub 版本控制，算是一石二鳥。</p>\n<p>使用 Hexo 是使用 Markdown 撰寫格式，也需要熟悉 Git 指令還有一點 npm 的知識，可以參考下方連結教學。</p>\n<p><a href=\"https://hsiangfeng.github.io/other/20191111/1875438261/\" target=\"_blank\" rel=\"noopener\">Markdown</a></p>\n<p><a href=\"https://w3c.hexschool.com/git/cfdbd310\" target=\"_blank\" rel=\"noopener\">Git</a></p>\n<p><a href=\"https://hsiangfeng.github.io/nodejs/20190626/1317979814/\" target=\"_blank\" rel=\"noopener\">npm</a></p>\n<hr>\n<h2 id=\"建立-Hexo-部落格\"><a href=\"#建立-Hexo-部落格\" class=\"headerlink\" title=\"建立 Hexo 部落格\"></a>建立 Hexo 部落格</h2><h3 id=\"版本與環境\"><a href=\"#版本與環境\" class=\"headerlink\" title=\"版本與環境\"></a>版本與環境</h3><p>作業系統： Windows10 X64</p>\n<p>Nodejs:：V12.13.1 LTS</p>\n<p>IDE：VS Code</p>\n<h3 id=\"本文環境\"><a href=\"#本文環境\" class=\"headerlink\" title=\"本文環境\"></a>本文環境</h3><p><strong>Hexo 版本</strong></p>\n<p>hexo: 4.1.1</p>\n<p>hexo-cli: 3.1.0</p>\n<p><strong>NexT 版本</strong></p>\n<p>Next: 7.6.0</p>\n<hr>\n<h2 id=\"從-GitHub-建立新的數據-Creat-a-new-Repository\"><a href=\"#從-GitHub-建立新的數據-Creat-a-new-Repository\" class=\"headerlink\" title=\"從 GitHub 建立新的數據 (Creat a new Repository)\"></a>從 GitHub 建立新的數據 (Creat a new Repository)</h2><p><img src=\"https://firebasestorage.googleapis.com/v0/b/timpicturespace.appspot.com/o/%E5%BB%BA%E7%AB%8B%E6%95%B8%E6%93%9A.png?alt=media&token=1f2b07d5-023a-48aa-a163-21b4095e955d\" alt=\"初始 GitHub 畫面\"></p>\n<ul>\n<li>名稱務必要謹慎設定，因為之後就無法更改，若想要修改只能重新建立數據庫，記得後面的 github.io 要打一樣的。</li>\n<li>下方的權限直接用 Public (公開) 即可，若一開始還不想公開就選擇 Private (私人的)。</li>\n<li>其他不用更動，直接選擇最下方的綠色按鈕 (Create repostory) 建立數據庫。</li>\n</ul>\n<p><strong>Warning</strong></p>\n<ul>\n<li>有提到 HEXO 是用指令建立的，所以不要在本地端建立數據庫，建立的格式內容會是錯誤的 (我已經失敗過一次，最後還是重新來過。)</li>\n</ul>\n<p><img src=\"https://firebasestorage.googleapis.com/v0/b/timpicturespace.appspot.com/o/GitHub%20%E4%B8%80%E9%96%8B%E5%A7%8B%E6%9C%83%E7%9C%8B%E5%88%B0%E7%9A%84%E6%A8%A3%E5%AD%90.png?alt=media&token=105bb415-3516-491f-af61-df87a4f22a43\" alt=\"這是一開始看到的樣子，如下圖：\"></p>\n<hr>\n<h2 id=\"安裝-Hexo\"><a href=\"#安裝-Hexo\" class=\"headerlink\" title=\"安裝 Hexo\"></a>安裝 Hexo</h2><p>使用指令安裝 Hexo，開啟終端機 (cmd)輸入以下指令：</p>\n<figure class=\"highlight cmd\"><table><tr><td class=\"code\"><pre><span class=\"line\">npm install hexo-cli -g</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://firebasestorage.googleapis.com/v0/b/timpicturespace.appspot.com/o/%E5%AE%89%E8%A3%9D%20HEXO.png?alt=media&token=f6e154ec-0f7f-4077-b918-10694c06454d\" alt=\"安裝 Hexo\"></p>\n<p>*指令說明：透過 npm 在 全域 (-g) 下安裝 Hexo-Cli</p>\n<p>輸入後會看到有進度條再跑，大概幾秒後就完成了。</p>\n<hr>\n<h2 id=\"建立-Hexo\"><a href=\"#建立-Hexo\" class=\"headerlink\" title=\"建立 Hexo\"></a>建立 Hexo</h2><p>在要存取的硬碟中開啟一個新資料夾，並自訂名稱 (建議用英文)，之後的資料就會在這個資料夾內，並輸入以下指令：</p>\n<figure class=\"highlight cmd\"><table><tr><td class=\"code\"><pre><span class=\"line\">hexo init projectname</span><br></pre></td></tr></table></figure>\n<ul>\n<li>projectname 改成自己定義的名稱，建議用英文，安裝完成後如下圖：</li>\n</ul>\n<p><img src=\"https://firebasestorage.googleapis.com/v0/b/timpicturespace.appspot.com/o/%E5%BB%BA%E7%AB%8B%20HEXO.png?alt=media&token=48c35faf-b65e-42ee-9433-a89d265def7a\" alt=\"\"></p>\n<hr>\n<h2 id=\"進入-Hexo\"><a href=\"#進入-Hexo\" class=\"headerlink\" title=\"進入 Hexo\"></a>進入 Hexo</h2><p>在終端機輸入：</p>\n<figure class=\"highlight cmd\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> projectname</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>projectname 改成自己定義的名稱，建議用英文</li>\n</ul>\n<h3 id=\"安裝相關套件\"><a href=\"#安裝相關套件\" class=\"headerlink\" title=\"安裝相關套件\"></a>安裝相關套件</h3><p>由於建立完畢的 Hexo 還必須安裝 npm 相關套件，所以必須在這個目錄下輸入：</p>\n<figure class=\"highlight cmd\"><table><tr><td class=\"code\"><pre><span class=\"line\">npm install</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>指令說明：將 package.json 相依套件下載下來</li>\n</ul>\n<hr>\n<h2 id=\"啟動-Hexo\"><a href=\"#啟動-Hexo\" class=\"headerlink\" title=\"啟動 Hexo\"></a>啟動 Hexo</h2><p>完成上方內容後再輸入下方指令：</p>\n<figure class=\"highlight cmd\"><table><tr><td class=\"code\"><pre><span class=\"line\">hexo server</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://firebasestorage.googleapis.com/v0/b/timpicturespace.appspot.com/o/%E5%95%9F%E5%8B%95%20hexo.png?alt=media&token=b06502f3-b23c-4a8d-8b69-5e07cd31fdc0\" alt=\"啟動 hexo server\"></p>\n<hr>\n<h2 id=\"使用主題-themes\"><a href=\"#使用主題-themes\" class=\"headerlink\" title=\"使用主題 themes\"></a>使用主題 themes</h2><p>使用 Next 7.6.0 ，<a href=\"https://github.com/theme-next/hexo-theme-next\" target=\"_blank\" rel=\"noopener\">主題連結</a>，或是可以到<a href=\"https://theme-next.iissnan.com/\" target=\"_blank\" rel=\"noopener\">官方網站</a>取得想要的主題，但因為每個主題要修改的程式碼不同，如果要按照我這邊設定，建議選用一樣的樣式!! </p>\n<h3 id=\"替換主題\"><a href=\"#替換主題\" class=\"headerlink\" title=\"替換主題\"></a>替換主題</h3><p>下載 themes 並解壓縮到資料夾內的 themes 資料夾內，並使用 VSCODE 開啟跟目錄資料夾中的 <code>congig.yml</code></p>\n<p><img src=\"https://firebasestorage.googleapis.com/v0/b/timpicturespace.appspot.com/o/themes%20%E8%B3%87%E6%96%99%E5%A4%BE.png?alt=media&token=23291574-3088-4580-8a67-be03a21fa206\" alt=\"資料夾 themes 選項\"></p>\n<p>找到第 96 行更改 themes 後面的名稱如下：</p>\n<figure class=\"highlight cmd\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\">theme: <span class=\"title\">hexo</span>-<span class=\"title\">theme</span>-<span class=\"title\">next</span>-<span class=\"title\">master</span></span></span><br></pre></td></tr></table></figure>\n\n<hr>\n<p>Hexo 基礎設定</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\">// Site</span><br><span class=\"line\">title: TimCodingBlog// 網站標題</span><br><span class=\"line\">subtitle: 提姆寫程式。 // 網站副標題</span><br><span class=\"line\">description: 提姆的前端筆記 // 網站敘述</span><br><span class=\"line\">keywords: // 關鍵字</span><br><span class=\"line\">author: Tim // 網站作者</span><br><span class=\"line\">language: zh-TW // 網站語系</span><br><span class=\"line\">timezone:</span><br><span class=\"line\"></span><br><span class=\"line\">// URL</span><br><span class=\"line\">url: http://yoursite.com  //輸入您的網站URL，舉例我的就是ray.github.io</span><br><span class=\"line\">root: /</span><br><span class=\"line\">permalink: :year/:month/:day/:title/</span><br><span class=\"line\">permalink_defaults:</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"部署-GitHub\"><a href=\"#部署-GitHub\" class=\"headerlink\" title=\"部署 GitHub\"></a>部署 GitHub</h2><p>需要安裝一個 Hexo 沒有安裝的插件</p>\n<figure class=\"highlight cmd\"><table><tr><td class=\"code\"><pre><span class=\"line\">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure>\n\n<p>修改 _config.yml 中的 Depolyment 如下：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\">deploy:</span><br><span class=\"line\">  type: git // 模式</span><br><span class=\"line\">  repo: https://github.com/yourGithub /yourGithubName.github.io.git // 自己 GitHub repos 連結</span><br><span class=\"line\">  branch: master // 分支</span><br></pre></td></tr></table></figure>\n\n<p>修改完後輸入下方指令：</p>\n<figure class=\"highlight cmd\"><table><tr><td class=\"code\"><pre><span class=\"line\">hexo d g</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>指令說明：d →部屬、g →生成靜態頁面</li>\n</ul>\n<hr>\n<h2 id=\"其他指令\"><a href=\"#其他指令\" class=\"headerlink\" title=\"其他指令\"></a>其他指令</h2><figure class=\"highlight cmd\"><table><tr><td class=\"code\"><pre><span class=\"line\">hexo new \"<span class=\"built_in\">title</span>\"</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>說明：建立新文章</li>\n</ul>\n<figure class=\"highlight cmd\"><table><tr><td class=\"code\"><pre><span class=\"line\">hexo s -g</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>說明：s →啟動伺服器 -g →生成靜態頁面</li>\n</ul>\n<figure class=\"highlight cmd\"><table><tr><td class=\"code\"><pre><span class=\"line\">hexo d -g</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>說明： d →部屬模式 -g →生成靜態頁面</li>\n</ul>\n<figure class=\"highlight cmd\"><table><tr><td class=\"code\"><pre><span class=\"line\">hexo clean</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>說明：刪除已生成的靜態頁面及快取檔案</li>\n</ul>\n<h2 id=\"刪除指定文章\"><a href=\"#刪除指定文章\" class=\"headerlink\" title=\"刪除指定文章\"></a>刪除指定文章</h2><p>在本地端 source 資料夾，把指定的 md. 檔案刪除，在重新佈署即可，指令為：</p>\n<figure class=\"highlight cmd\"><table><tr><td class=\"code\"><pre><span class=\"line\">hexo d -g</span><br></pre></td></tr></table></figure>\n\n<hr>\n<blockquote>\n<p>參考文章：<a href=\"https://hsiangfeng.github.io/hexo/20190411/932826160/\" target=\"_blank\" rel=\"noopener\">https://hsiangfeng.github.io/hexo/20190411/932826160/</a></p>\n</blockquote>\n","categories":["hexo"],"tags":["hexo"]}]